using StaticArrays
using GeometryTypes
using Reactive
using Contour
using FileIO
using ImageCore
using ImageTransformations
using UnicodeFun
using ColorBrewer
using ModernGL
using GLFW
using FreeType
using FreeTypeAbstraction
using ImageMagick
using AbstractPlotting
using Primes
using PlotUtils
using IntervalSets
using Showoff
using ColorTypes
using Colors
using ColorVectorSpace
using FixedPointNumbers
using IterTools
using AxisArrays
using ImageAxes
using IndirectArrays
using BinaryProvider
using Distributed
using Random
using LinearAlgebra

precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, String, String, String, String})
precompile(Tuple{typeof(Base.copy), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.similar), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Grisu.Bignums.Bignum, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.copy), Array{UInt32, 1}})
precompile(Tuple{getfield(Base, Symbol("##replace#327")), Int64, typeof(Base.replace), String, Base.Pair{Base.Fix2{typeof(Base.isequal), Char}, UInt32}})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##647#648")){String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##283#286"))})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##645#646")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##651#652")){String, Base.PkgId}, String})
precompile(Tuple{getfield(Base, Symbol("##open#297")), Bool, Nothing, Nothing, Nothing, Nothing, typeof(Base.open), String})
precompile(Tuple{getfield(Base, Symbol("##read#302")), Bool, typeof(Base.read), Base.IOStream, Int32})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##645#646")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##649#650")){String, Base.UUID, String}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.UUID}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##649#650")){String, Base.UUID, String}, String})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{Type{BinaryProvider.Prefix}, String})
precompile(Tuple{typeof(Base.copyto!), Array{Base.SubString{String}, 1}, Int64, Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Symbol, String}, getfield(BinaryProvider, Symbol("##101#103"))}})
precompile(Tuple{typeof(BinaryProvider.libdir), BinaryProvider.Prefix, BinaryProvider.Windows})
precompile(Tuple{getfield(BinaryProvider, Symbol("##probe_platform_engines!#30")), Bool, typeof(BinaryProvider.probe_platform_engines!)})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(BinaryProvider.parse_tar_list)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(BinaryProvider.parse_7z_list)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Base.Cmd, Function}, 1}, Tuple{Base.Cmd, getfield(BinaryProvider, Symbol("##31#54")){String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Base.Cmd, Function}, 1}, Tuple{Base.Cmd, getfield(BinaryProvider, Symbol("##32#55")){String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Base.Cmd, Function}, 1}, Tuple{Base.Cmd, getfield(BinaryProvider, Symbol("##33#56")){String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Base.Cmd, Function}, 1}, Tuple{Base.Cmd, getfield(BinaryProvider, Symbol("##34#57")){String}}, Int64})
precompile(Tuple{getfield(BinaryProvider, Symbol("##probe_cmd#29")), Bool, typeof(BinaryProvider.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
precompile(Tuple{getfield(Distributed, Symbol("##139#140"))})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##643#644")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##645#646")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##651#652")){String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##262#263")){String}, String})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(GLFW.__init__)})
precompile(Tuple{typeof(Base.iterate), Array{Exception, 1}})
precompile(Tuple{typeof(FreeTypeAbstraction.__init__)})
precompile(Tuple{typeof(Base.success), Base.Cmd})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Colon, Bool}, Int64})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
precompile(Tuple{getfield(Reactive, Symbol("##30#31"))})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{String, typeof(Base.info)}, Int64})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.Filesystem.dirname), String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##647#648")){String, String}, String})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.getproperty), Expr, Symbol})
precompile(Tuple{typeof(Base.Docs.signature!), Array{Any, 1}, Expr})
precompile(Tuple{typeof(Base.Docs.objectdoc), LineNumberNode, Module, String, Expr, Expr, Expr})
precompile(Tuple{typeof(Base.getproperty), LineNumberNode, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Module}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Module}}})
precompile(Tuple{typeof(Base.getproperty), Core.TypeName, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Module}}, Int64})
precompile(Tuple{typeof(Base.Docs.docstr), Core.SimpleVector, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Type{Tuple{IO, Int64}}})
precompile(Tuple{typeof(Base.getproperty), Base.Docs.MultiDoc, Symbol})

precompile(Tuple{Type{Base.Set{T} where T}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Filesystem.mktempdir)})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@info")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, Expr})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@warn")), LineNumberNode, Module, Expr})
precompile(Tuple{getfield(Main, Symbol("#@block")), LineNumberNode, Module, Symbol, Expr, Expr})
precompile(Tuple{typeof(Main.find_startend), Array{Any, 1}})
precompile(Tuple{typeof(Main.is_linenumber), Expr})
precompile(Tuple{typeof(Base.mapreduce), typeof(Main.find_lastline), typeof(Base.max), Array{Any, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Main.find_lastline), typeof(Base.max), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Main.find_lastline), typeof(Base.max), LineNumberNode})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.max), Int64})
precompile(Tuple{typeof(Main.is_linenumber), String})
precompile(Tuple{typeof(Main.find_lastline), Symbol})
precompile(Tuple{typeof(Main.find_lastline), LineNumberNode})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Main.find_lastline), String})
precompile(Tuple{typeof(Main.is_linenumber), Symbol})
precompile(Tuple{typeof(Main.is_linenumber), Int64})
precompile(Tuple{typeof(Main.find_lastline), Int64})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Main.find_lastline), typeof(Base.max), Expr})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Main.find_lastline), typeof(Base.max), Symbol})
precompile(Tuple{typeof(Main.is_linenumber), QuoteNode})
precompile(Tuple{typeof(Main.find_lastline), QuoteNode})
precompile(Tuple{typeof(Main.is_linenumber), Float64})
precompile(Tuple{typeof(Main.find_lastline), Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Main.extract_tags), Expr})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Set{T} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.findall), typeof(Main.is_cell), Array{Any, 1}})
precompile(Tuple{typeof(Main.is_cell), LineNumberNode})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.findall), getfield(Main, Symbol("##39#40")), Array{Any, 1}})
precompile(Tuple{getfield(Main, Symbol("##39#40")), LineNumberNode})
precompile(Tuple{getfield(Main, Symbol("##39#40")), Expr})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Main.extract_cell), Expr, Symbol, Base.Set{String}, String, String, Int64})
precompile(Tuple{getfield(Main, Symbol("##37#38")), Symbol})
precompile(Tuple{getfield(Main, Symbol("##37#38")), LineNumberNode})
precompile(Tuple{getfield(Main, Symbol("##37#38")), String})
precompile(Tuple{getfield(Main, Symbol("##37#38")), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, Expr, Expr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, Expr, Expr}, Int64, Int64})
precompile(Tuple{typeof(Main.extract_source), String, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("##35#36")){Base.UnitRange{Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.union), Base.Set{String}, Base.Set{String}})

precompile(Tuple{typeof(Main.unique_name!), String, Base.Set{Symbol}})
precompile(Tuple{getfield(Base, Symbol("##replace#327")), Int64, typeof(Base.replace), String, Base.Pair{Base.Regex, Char}})


precompile(Tuple{typeof(Base.collect), Type{String}, Base.Set{String}})
precompile(Tuple{typeof(Base.push!), Array{Any, 1}, String, String, String})
precompile(Tuple{typeof(Base.push!), Array{Any, 1}, String, String, String, String})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Base.findall), typeof(Main.is_group), Array{Any, 1}})
precompile(Tuple{typeof(Main.is_group), LineNumberNode})

precompile(Tuple{typeof(Main.is_linenumber), Bool})
precompile(Tuple{typeof(Main.find_lastline), Bool})
precompile(Tuple{typeof(Main.is_linenumber), Float32})
precompile(Tuple{typeof(Main.find_lastline), Float32})
precompile(Tuple{Type{String}, String})
precompile(Tuple{typeof(Base.push!), Array{Any, 1}, String, String})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Tuple{String, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Tuple{String, String, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Tuple{String, String, String, String, String, String}})
precompile(Tuple{typeof(Main.is_linenumber), Nothing})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Main.find_lastline), typeof(Base.max), Nothing})
precompile(Tuple{typeof(Main.is_linenumber), Char})
precompile(Tuple{typeof(Main.find_lastline), Char})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Main.find_lastline), typeof(Base.max), Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String, Array{Any, 1}, Expr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String, Array{Any, 1}, Expr}, Int64, Int64})
precompile(Tuple{typeof(Main.extract_tags), Array{Any, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Any, 1}})
precompile(Tuple{typeof(Base.union), Base.Set{String}, Base.Set{Any}})

precompile(Tuple{typeof(Base.push!), Base.Set{String}, String})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{getfield(Base, Symbol("##print_to_string#330")), Nothing, typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, QuoteNode, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, QuoteNode, Int64, Int64})
precompile(Tuple{typeof(Base.is_quoted), Float64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.is_quoted), Float32})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Float32, Int64, Int64})
precompile(Tuple{typeof(Base.get), Base.EnvDict, String, Bool})
precompile(Tuple{typeof(Base.:(==)), Bool, String})
precompile(Tuple{getfield(Base, Symbol("#@v_str")), LineNumberNode, Module, String})
precompile(Tuple{Type{Base.VersionNumber}, String})
precompile(Tuple{getfield(Base, Symbol("#@__DIR__")), LineNumberNode, Module})
precompile(Tuple{typeof(Base.Filesystem.abspath), String})
precompile(Tuple{typeof(Base.string), String, Base.VersionNumber, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, String})
precompile(Tuple{typeof(Base.Filesystem.homedir)})
precompile(Tuple{getfield(Base, Symbol("#@cmd")), LineNumberNode, Module, String})
precompile(Tuple{getfield(Base, Symbol("#kw##shell_parse")), NamedTuple{(:special,), Tuple{String}}, typeof(Base.shell_parse), String})
precompile(Tuple{getfield(Base, Symbol("##shell_parse#339")), String, typeof(Base.shell_parse), String, Bool})
precompile(Tuple{typeof(Base.convert), Type{Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Main.url2hash), String})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Base.Libc.RawFD, Base.Libc.RawFD, Base.Libc.RawFD}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("##60#61"))}, Int64})
precompile(Tuple{getfield(Base, Symbol("##replace#327")), Int64, typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.arg_gen), String, Base.SubString{String}, String})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##pipeline#494")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:wait,), Tuple{Bool}}, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Base, Symbol("##run#509")), Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Base, Symbol("##_spawn#495")), Nothing, typeof(Base._spawn), Base.CmdRedirect, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Nothing}}, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("##60#61")), String})
precompile(Tuple{typeof(Base.:(|>)), String, typeof(Base.println)})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@info")), LineNumberNode, Module, String})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String})
precompile(Tuple{typeof(Main.download_images)})
precompile(Tuple{typeof(BinaryProvider.download_verify), String, String, String})
precompile(Tuple{getfield(BinaryProvider, Symbol("##download_verify#94")), Bool, Bool, Bool, typeof(BinaryProvider.download_verify), String, String, String})
precompile(Tuple{getfield(BinaryProvider, Symbol("##verify#126")), Bool, Bool, String, typeof(BinaryProvider.verify), String, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(BinaryProvider, Symbol("##127#129")){Bool, String, String, String}, String})
precompile(Tuple{typeof(Base.getproperty), ErrorException, Symbol})
precompile(Tuple{Type{NamedTuple{(:force,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##rm")), NamedTuple{(:force,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##rm#9")), Bool, Bool, typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mkpath#8")), UInt16, typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{getfield(BinaryProvider, Symbol("##download#93")), Bool, typeof(BinaryProvider.download), String, String})
precompile(Tuple{getfield(BinaryProvider, Symbol("##46#69")){Base.Cmd, String}, String, String})
precompile(Tuple{typeof(Base.join), Tuple{Symbol}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{Symbol}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol}, String})
precompile(Tuple{getfield(Base, Symbol("##string#310")), Int64, Int64, typeof(Base.string), UInt64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base._split), Base.SubString{String}, Base.Fix2{typeof(Base.isequal), Char}, Int64, Bool, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base, Symbol("##print_to_string#330")), Nothing, typeof(Base.print_to_string), Base.CoreLogging.LogLevel})
precompile(Tuple{getfield(Base, Symbol("##printstyled#666")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#666")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:verbose,), Tuple{Bool}}, Type{BinaryProvider.OutputCollector}, Base.Cmd})
precompile(Tuple{getfield(BinaryProvider, Symbol("##OutputCollector#5")), Bool, Bool, Base.TTY, Type{BinaryProvider.OutputCollector}, Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##pipeline#494")), Base.DevNullStream, Base.Pipe, Base.Pipe, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Nothing}}, typeof(Base._spawn), Base.CmdRedirect, Tuple{Base.DevNullStream, Base.DevNullStream, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#495")), Nothing, typeof(Base._spawn), Base.CmdRedirect, Tuple{Base.DevNullStream, Base.DevNullStream, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Nothing}}, typeof(Base._spawn), Base.CmdRedirect, Tuple{Base.DevNullStream, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#495")), Nothing, typeof(Base._spawn), Base.CmdRedirect, Tuple{Base.DevNullStream, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Nothing}}, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(BinaryProvider, Symbol("##1#3")){Base.Pipe, Base.Condition, Array{Tuple{Float64, String}, 1}}})
precompile(Tuple{getfield(BinaryProvider, Symbol("##2#4")){Base.Condition, Task}})
precompile(Tuple{Type{BinaryProvider.OutputCollector}, Base.Cmd, Base.Process, BinaryProvider.LineStream, BinaryProvider.LineStream, Base.Condition, Base.TTY, Bool, Bool})
precompile(Tuple{getfield(BinaryProvider, Symbol("##tee#13")), Bool, Base.TTY, typeof(BinaryProvider.tee), BinaryProvider.OutputCollector})
precompile(Tuple{getfield(BinaryProvider, Symbol("##14#15")){Base.TTY, BinaryProvider.OutputCollector}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(Base, Symbol("#readcb_specialized#479")), Base.PipeEndpoint, Int64, UInt64})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(Base.getproperty), Base.Condition, Symbol})
precompile(Tuple{typeof(Base.notify), Base.Condition, Nothing, Bool, Bool})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(BinaryProvider, Symbol("##128#130")){String}, String, String})
precompile(Tuple{typeof(BinaryProvider.unpack), String, String})
precompile(Tuple{getfield(BinaryProvider, Symbol("##unpack#98")), Bool, typeof(BinaryProvider.unpack), String, String})
precompile(Tuple{getfield(BinaryProvider, Symbol("##36#59")){String}, String, String})
precompile(Tuple{getfield(Base, Symbol("##pipeline#494")), Nothing, Base.Cmd, Nothing, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:verbose,), Tuple{Bool}}, Type{BinaryProvider.OutputCollector}, Base.OrCmds})
precompile(Tuple{getfield(BinaryProvider, Symbol("##OutputCollector#5")), Bool, Bool, Base.TTY, Type{BinaryProvider.OutputCollector}, Base.OrCmds})
precompile(Tuple{getfield(Base, Symbol("##pipeline#494")), Base.DevNullStream, Base.Pipe, Base.Pipe, Bool, typeof(Base.pipeline), Base.OrCmds})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Nothing}}, typeof(Base._spawn), Base.OrCmds, Tuple{Base.DevNullStream, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#496")), Nothing, typeof(Base._spawn), Base.OrCmds, Tuple{Base.DevNullStream, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Base.ProcessChain}}, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.Libc.WindowsRawSocket, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Base.ProcessChain, typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.Libc.WindowsRawSocket, Base.Pipe}})
precompile(Tuple{typeof(Base.push!), Array{Base.Process, 1}, Base.Process})
precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Base.ProcessChain}}, typeof(Base._spawn), Base.Cmd, Tuple{Base.Libc.WindowsRawSocket, Base.Pipe, Base.Pipe}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Base.ProcessChain, typeof(Base._spawn), Base.Cmd, Tuple{Base.Libc.WindowsRawSocket, Base.Pipe, Base.Pipe}})
precompile(Tuple{Type{BinaryProvider.OutputCollector}, Base.OrCmds, Base.ProcessChain, BinaryProvider.LineStream, BinaryProvider.LineStream, Base.Condition, Base.TTY, Bool, Bool})
precompile(Tuple{typeof(Base.wait), Base.ProcessChain})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, Int64})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), getfield(Base.Meta, Symbol("##2#3")){Bool, String}, Logging.ConsoleLogger})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##643#644")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##645#646")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##651#652")){String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, String, String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, String, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##649#650")){String, Base.UUID, String}, String})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(ImageFiltering.__init__)})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, String})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Expr, Expr})
precompile(Tuple{typeof(Base.getindex), Tuple{Expr, Expr}, Int64})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{Expr, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{Expr}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Symbol, Symbol, QuoteNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{QuoteNode, 1}}})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.Filesystem.cd), String})
precompile(Tuple{Type{NamedTuple{(:resolution,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##set_theme!")), NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}, typeof(AbstractPlotting.set_theme!)})
precompile(Tuple{Type{Reactive.Signal{Any}}, Tuple{Int64, Int64}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging.current_logger_for_env), Base.CoreLogging.LogLevel, String, Module})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Base.CoreLogging.LogLevel, Tuple{}})
precompile(Tuple{getfield(Base, Symbol("##string#310")), Int64, Int64, typeof(Base.string), UInt64})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, String, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.string), String, Array{String, 1}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.warn)}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:prefix,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Main.find_indices), String})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.find_indices)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Main.to_tag)}, Int64})
precompile(Tuple{getfield(Main, Symbol("##find_indices#12")), Nothing, Nothing, typeof(Base.all), typeof(Main.find_indices), Tuple{String}})

precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unique), Array{Any, 1}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
precompile(Tuple{Type{NamedTuple{(:exclude_tags,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#kw##test_examples")), NamedTuple{(:exclude_tags,), Tuple{Array{String, 1}}}, typeof(Main.test_examples), Bool})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Bool, getfield(Main, Symbol("##65#68"))}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:replace_nframes, :outputfile), Tuple{Bool, getfield(Main, Symbol("##65#68"))}}}, Type{NamedTuple{(:exclude_tags,), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("##65#68"))}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Bool}, Type{getfield(Main, Symbol("##65#68"))}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Main, Symbol("##42#45"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:replace_nframes, :outputfile), Tuple{Bool, getfield(Main, Symbol("##65#68"))}}}, Type{NamedTuple{(:scope_start, :scope_end), Tuple{String, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("##65#68")), String, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.round), DataType}, Int64})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##s97#42")), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Type{typeof(Makie.GLAbstraction.default_internalcolorformat)}, Type{Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.TransparentColor{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##s97#41")), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Type{typeof(Makie.GLAbstraction.default_colorformat)}, Type{Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.typename), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{GeometryTypes.Vec{2, UInt16}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{2, UInt16}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(2,)}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(2,)}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{GeometryTypes.Vec{2, UInt16}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Symbol, Symbol, UInt32, UInt32}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Symbol, UInt32, UInt32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{UInt32}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{UInt32}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DataType}, Int64})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s14#7")), Int64, Type{Float32}, Type{typeof(Base.convert)}, Type{Type{GeometryTypes.Vec{3, Float32}}}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##8#17")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##8#17"))}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Symbol, UInt32, Int32}, 1}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s14#1")), Int64, Type{Float32}, Type{typeof(StaticArrays.convert_ntuple)}, Type{Type{Float32}}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("##2#3")), Base.Val{2}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}})
precompile(Tuple{Type{StaticArrays.Size{()}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(2,)}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{()}}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#212")), Type{typeof(StaticArrays.combine_sizes)}, Type{Tuple{StaticArrays.Size{()}, StaticArrays.Size{(2,)}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##213#214")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##213#214"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("##213#214")), Type{StaticArrays.Size{()}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##213#214"))}, Int64})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{}}, Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.similar), Array{Tuple{}, 1}, Type{Tuple{Vararg{Int64, N} where N}}})
precompile(Tuple{Type{Array{Tuple{Vararg{Int64, N} where N}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##213#214"))}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Vararg{Int64, N} where N}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{StaticArrays.Dynamic, Int64}, N} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Union{StaticArrays.Dynamic, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, StaticArrays.Dynamic, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{()}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#215")), Tuple{Int64}, Type{typeof(StaticArrays._broadcast)}, Type{typeof(Base.:(/))}, Type{StaticArrays.Size{(2,)}}, Type{Tuple{StaticArrays.Size{()}, StaticArrays.Size{(2,)}}}, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.getindex), Tuple{DataType, DataType}, Int64})
precompile(Tuple{Type{Array{Expr, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{typeof(Base.ones), Type{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##216#219")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##216#219"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("##216#219")), Type{StaticArrays.Size{()}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##216#219"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##216#219"))}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##218#221")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Tuple{DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{Float32}, Base.Generator{Tuple{DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}, Int64, Int64})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s18#11")), Type{GeometryTypes.Vec{2, Float32}}, Type{Float32}, Tuple{Int64}, Type{typeof(StaticArrays.similar_type)}, Type{Type{GeometryTypes.Vec{2, Float32}}}, Type{Type{Float32}}, Type{StaticArrays.Size{(2,)}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Int64}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s14#4")), Type{Tuple{Int64, Int64}}, Type{typeof(StaticArrays.promote_tuple_eltype)}, Type{Type{Tuple{Int64, Int64}}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##213#214"))}, Int64})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Int64}}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.similar), Array{Tuple{Int64}, 1}, Type{Tuple{Vararg{Int64, N} where N}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##216#219"))}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Tuple{DataType, DataType}, Base.HasLength})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s12#5")), Int64, Type{Float64}, Type{Type{GeometryTypes.Vec{2, Float64}}}, Type{GeometryTypes.Vec{2, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##6#16")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##6#16"))}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Int64}, 1}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{FixedPointNumbers.Normed{UInt8, 8}, 3}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{FixedPointNumbers.Normed{UInt8, 8}, 3}}})
precompile(Tuple{typeof(ColorTypes.basetype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(ImageCore.clamp01nan)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(FileIO.save), Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.add)}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:mode,), Tuple{Symbol}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(Base.readstring)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(FileIO.load), Int64}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(3,)}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Float64, Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{ImageFiltering.NA{0}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.real)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.has_offset_axes), Bool}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.IteratorsMD.CartesianIndex{0}, Bool}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(ImageFiltering.padfft)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractFFTs.rfft), Int64}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:dims,), Tuple{Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.array_subpadding), Type{ColorTypes.ARGB32}, Type{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.ARGB32}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{Type{Base.CyclePadding{P} where P}, Type{ColorTypes.ARGB32}})
precompile(Tuple{typeof(Base.sizeof), Type{UInt32}})
precompile(Tuple{typeof(Base.sizeof), Type{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Bool, Symbol}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Int64, Int64}}, Int64})
precompile(Tuple{getfield(Main, Symbol("##test_examples#62")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:exclude_tags,), Tuple{Array{String, 1}}}}, typeof(Main.test_examples), Bool})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{getfield(Main, Symbol("##enumerate_examples#41")), Array{String, 1}, typeof(Main.enumerate_examples), getfield(Main, Symbol("##56#57")){Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:replace_nframes, :outputfile), Tuple{Bool, getfield(Main, Symbol("##65#68"))}}}, getfield(Main, Symbol("##63#66")){Bool}}})


precompile(Tuple{typeof(Base.in), String, Base.Set{String}})




precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4, 4}}})
precompile(Tuple{Type{StaticArrays.Size{(4, 4)}}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Int64, Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#344")), Tuple{Int64, Int64}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Type{Bool}, Type{typeof(StaticArrays._eye)}, Type{StaticArrays.Size{(4, 4)}}, Type{Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Type{LinearAlgebra.UniformScaling{Bool}}})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##345#346")){DataType}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(StaticArrays, Symbol("##345#346")){DataType}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s14#5")), Type{Tuple{4, 4}}, Type{Float32}, Int64, Int64, Type{typeof(StaticArrays.check_array_parameters)}, Type{Type{Tuple{4, 4}}}, Type{Type{Float32}}, Type{Type{Base.Val{2}}}, Type{Type{Base.Val{16}}}})
precompile(Tuple{typeof(Base.all), getfield(StaticArrays, Symbol("##6#7")), Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("##6#7")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4, 4}}})
precompile(Tuple{Type{Base.Val{16}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("##2#3")), Base.Val{16}})
precompile(Tuple{getfield(Base, Symbol("##s565#412")), Type{getfield(StaticArrays, Symbol("##2#3"))}, Int64, Type{typeof(Base.ntuple)}, Type{getfield(StaticArrays, Symbol("##2#3"))}, Type{Base.Val{16}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{3, Bool}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#227")), Tuple{Int64}, Type{typeof(StaticArrays._map)}, Type{getfield(AbstractPlotting, Symbol("##318#321"))}, Type{StaticArrays.Size{(3,)}}, Tuple{DataType, DataType}})
precompile(Tuple{Type{Array{Expr, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##228#230")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##228#230"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType, DataType}}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{3, Bool}}})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{Bool}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType, DataType}}}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{Type{Base.Val{4}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Int64, Int64, Int64, Int64}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Broadcast.Style{Tuple}, DataType, Tuple{Int64, Int64, Int64, Int64}}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#62")), Int64, Int64, Type{Type{StaticArrays.SArray{Tuple{4, S2}, T, 2, L} where L where T where S2}}, Type{Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32}}})
precompile(Tuple{typeof(StaticArrays.promote_tuple_eltype), Type{Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#65")), Int64, Int64, Type{Float32}, Int64, Type{Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, L} where L}}, Type{Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#414")), Tuple{Int64, Int64}, Tuple{Int64, Int64}, Type{Float32}, Type{Float32}, Type{typeof(StaticArrays._mul)}, Type{StaticArrays.Size{(4, 4)}}, Type{StaticArrays.Size{(4, 4)}}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Int64, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#416")), Tuple{Int64, Int64}, Tuple{Int64, Int64}, Type{Float32}, Type{Float32}, Type{typeof(StaticArrays.mul_unrolled)}, Type{StaticArrays.Size{(4, 4)}}, Type{StaticArrays.Size{(4, 4)}}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{(4, 4)}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##417#421")){Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(StaticArrays, Symbol("##417#421")){Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(4, 4)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(4, 4)}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), typeof(AbstractPlotting.scatter)})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Char, Int64}, Int64})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("##2#3")), Base.Val{3}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#359")), Tuple{Int64}, Type{typeof(StaticArrays._norm)}, Type{StaticArrays.Size{(3,)}}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{()}, StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Bool, Bool, AbstractPlotting.Attributes, AbstractPlotting.Attributes, AbstractPlotting.Automatic, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Bool}, Type{Bool}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Bool}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.Automatic}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Bool}})
precompile(Tuple{typeof(Base.getindex), Tuple{DataType}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##218#221")), Tuple{DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType}, getfield(StaticArrays, Symbol("##218#221"))}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Tuple{DataType}, Base.HasLength})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.default_ticks)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Nothing}}, Int64})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s24#25")), Int64, Type{Float32}, Type{typeof(Base.convert)}, Type{Type{GeometryTypes.Point{2, Float32}}}, Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##26#35")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##26#35"))}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:rotation, :color, :textsize, :font, :align, :raw), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Type{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{T, 1} where T}, Type{Array{Float32, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{T, 1} where T}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{T, 1} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{T, 1} where T}, Type{Bool}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.node)}, Int64})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#177")), Tuple{Int64, Int64}, Type{typeof(StaticArrays._getindex_scalar)}, Type{StaticArrays.Size{(4, 4)}}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{DataType, DataType}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(4, 4)}, Int64})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :linewidth, :raw), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{ColorTypes.RGBA{Float32}, 1}}, Type{Array{Float32, 1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{2}}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{Float32}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{Float32, Float32, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{AbstractPlotting.Key{:font}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{AbstractPlotting.Key{:font}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.convert_attribute)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(AbstractPlotting, Symbol("##33#37"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{String, String, String, String}, Int64})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{2}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{2}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{2}}})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(2,)}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.sqrt)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(+)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(-)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Float32}, Int64})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s26#23")), Int64, Type{Float32}, Type{Type{GeometryTypes.Point{2, Float32}}}, Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##24#34")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##24#34"))}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s16#29")), Type{GeometryTypes.Point{2, Float32}}, Type{Float32}, Tuple{Int64}, Type{typeof(StaticArrays.similar_type)}, Type{Type{GeometryTypes.Point{2, Float32}}}, Type{Type{Float32}}, Type{StaticArrays.Size{(2,)}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{Float32}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Float32, Nothing, AbstractPlotting.Mouse.Button, Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Type{Float32}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Nothing}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{2, Int64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{()}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.min), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.max), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(-)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#241")), Tuple{Int64}, Type{typeof(StaticArrays._mapreduce)}, Type{getfield(StaticArrays, Symbol("##273#274")){getfield(AbstractPlotting, Symbol("##183#184"))}}, Type{typeof(Base.:(|))}, Type{Base.Colon}, Type{NamedTuple{(:init,), Tuple{Bool}}}, Type{StaticArrays.Size{(2,)}}, Tuple{DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##242#243")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##242#243"))}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#236")), Tuple{Int64}, Type{typeof(StaticArrays._mapreduce)}, Type{typeof(Base.identity)}, Type{typeof(Base.min)}, Type{Base.Colon}, Type{NamedTuple{(), Tuple{}}}, Type{StaticArrays.Size{(2,)}}, Tuple{DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##237#239")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##237#239"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##238#240")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##238#240"))}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{3, Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{3, Float64}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{3, Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Symbol, Float32, Tuple{Symbol, Float64}, Bool, Bool}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Float32, Tuple{Symbol, Float64}, Bool, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{Float32}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Float64, GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}, Float32, Float32, Float32, AbstractPlotting.ProjectionEnum, AbstractPlotting.Mouse.Button, AbstractPlotting.Mouse.Button, Nothing}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Float64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Float64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Float32}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.ProjectionEnum}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.alignment2num)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.isfinite), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Colon, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Base.Colon}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Colon}, Type{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Reactive.value)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.to_value)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(typeof)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{}, Tuple{}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.node), Tuple{}, Tuple{}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{}}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Broadcast.Style{Tuple}, typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{}}}}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#74")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##current_default_theme#72")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.current_default_theme)})
precompile(Tuple{typeof(Base.append_any), AbstractPlotting.Attributes})
precompile(Tuple{Type{AbstractPlotting.Attributes}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}})
precompile(Tuple{typeof(AbstractPlotting.node_pairs), Tuple{Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}}})
precompile(Tuple{Type{Base.Dict{Symbol, Reactive.Signal{T} where T}}, Base.Generator{Tuple{Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}}, typeof(AbstractPlotting.node_pairs)}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Reactive.Signal{Any}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.IRect), Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String}, String})
precompile(Tuple{getfield(Reactive, Symbol("##foldp#45")), Type{GeometryTypes.HyperRectangle{2, Int64}}, String, typeof(Reactive.foldp), getfield(AbstractPlotting, Symbol("##75#76")), GeometryTypes.HyperRectangle{2, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Int64}}, GeometryTypes.HyperRectangle{2, Int64}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_foldp), getfield(AbstractPlotting, Symbol("##75#76")), GeometryTypes.HyperRectangle{2, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##178#179")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##178#179")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##27#29"))})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{3, Float32}, Type{GeometryTypes.Vec{3, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##317#320")), Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, Tuple{Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##317#320")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String}, String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##319#322")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##319#322")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.similar), Array{WeakRef, 1}, Type{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, 1}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Base.Generator{Array{WeakRef, 1}, getfield(AbstractPlotting, Symbol("##48#50"))}, Int64})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##47#49")), Array{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##319#322")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}, Array{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, 1}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Bool, Bool, Bool}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Int64})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{Reactive.Signal{Any}}, typeof(Base.identity), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Core.MethodTable, Symbol})
precompile(Tuple{Type{Symbol}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Scene}, Symbol, AbstractPlotting.Scene, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Int64, Int64, Int64, Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :visible, :linewidth, :light, :transformation, :model, :alpha), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Int64, Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :visible, :linewidth, :light, :transformation, :model, :alpha), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Int64, Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Float64}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Int64, Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Int64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Int64, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Array{GeometryTypes.Vec{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, AbstractPlotting.Automatic, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Float64, Symbol})
precompile(Tuple{Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :strokecolor, :strokewidth, :glowcolor, :glowwidth, :rotations, :colormap, :colorrange, :marker_offset, :fxaa, :transform_marker), T} where T<:Tuple}, Tuple{UnionAll, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, AbstractPlotting.Billboard, Reactive.Signal{Any}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Bool, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:marker, :markersize, :strokecolor, :strokewidth, :glowcolor, :glowwidth, :rotations, :colormap, :colorrange, :marker_offset, :fxaa, :transform_marker), Tuple{UnionAll, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, AbstractPlotting.Billboard, Reactive.Signal{Any}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Bool, Bool}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:marker, :markersize, :strokecolor, :strokewidth, :glowcolor, :glowwidth, :rotations, :colormap, :colorrange, :marker_offset, :fxaa, :transform_marker), Tuple{UnionAll, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, AbstractPlotting.Billboard, Reactive.Signal{Any}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Bool, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :marker, :markersize, :strokecolor, :strokewidth, :glowcolor, :glowwidth, :rotations, :colormap, :colorrange, :marker_offset, :fxaa, :transform_marker), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, UnionAll, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, AbstractPlotting.Billboard, Reactive.Signal{Any}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Bool, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, UnionAll, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, AbstractPlotting.Billboard, Reactive.Signal{Any}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Bool, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{UnionAll}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.Billboard}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Type{GeometryTypes.HyperSphere{2, T} where T}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Type{GeometryTypes.HyperSphere{2, T} where T}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Type{GeometryTypes.HyperSphere{2, T} where T}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##Signal#6")), String, Type{Reactive.Signal{T} where T}, Type{Any}, Type{GeometryTypes.HyperSphere{2, T} where T}, Tuple{}})
precompile(Tuple{Type{Reactive.Signal{Any}}, Type{GeometryTypes.HyperSphere{2, T} where T}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, AbstractPlotting.Billboard, Symbol})
precompile(Tuple{Type{Reactive.Signal{Any}}, Bool, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(AbstractPlotting.merge_attributes!), AbstractPlotting.Attributes, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Any}})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:typ,), Tuple{DataType}}, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float64, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Float64, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Any}, Symbol})
precompile(Tuple{typeof(Base.identity), Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{3, Float32}, 1}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Array{GeometryTypes.Vec{3, Float32}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Symbol})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Symbol, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Symbol, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Bool})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Bool, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Bool, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), AbstractPlotting.Automatic})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Automatic, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, AbstractPlotting.Automatic, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.identity), AbstractPlotting.Billboard})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Billboard, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, AbstractPlotting.Billboard, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Type{GeometryTypes.HyperSphere{2, T} where T}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Type{GeometryTypes.HyperSphere{2, T} where T}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Type{GeometryTypes.HyperSphere{2, T} where T}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##Signal#6")), String, Type{Reactive.Signal{T} where T}, Type{Any}, Type{GeometryTypes.HyperSphere{2, T} where T}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{Reactive.Signal{Any}}, Type{GeometryTypes.HyperSphere{2, T} where T}, Tuple{Reactive.Signal{Any}}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Int64, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.:(==)), AbstractPlotting.Automatic, AbstractPlotting.Automatic})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##325#328")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##325#328")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}, Array{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, 1}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##141#147")){AbstractPlotting.Transformation}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.isequal), Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.extrema_nan), Array{Float64, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Float64, Float64}, Type{Tuple{Float64, Float64}}, String, typeof(Base.map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##133#135")), Float64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, GeometryTypes.Vec{3, Float32}, Symbol})
precompile(Tuple{typeof(Base.identity), GeometryTypes.Vec{3, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{3, Float32}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, GeometryTypes.Vec{3, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.value), AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.:(==)), GeometryTypes.HyperRectangle{3, Float32}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{1, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#287")), Tuple{Int64}, Type{GeometryTypes.Vec{1, Float32}}, Type{typeof(StaticArrays._zeros)}, Type{StaticArrays.Size{(1,)}}, Type{Type{GeometryTypes.Vec{1, Float32}}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{1, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##288#289")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##288#289"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#329")), Tuple{Int64}, Tuple{Int64}, Type{typeof(StaticArrays._vcat)}, Type{StaticArrays.Size{(2,)}}, Type{StaticArrays.Size{(1,)}}, Type{GeometryTypes.Point{2, Float32}}, Type{GeometryTypes.Vec{1, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{Type{StaticArrays.Size{(2,)}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(2,)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(1,)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##330#333")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##330#333"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##331#334")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##331#334"))}})
precompile(Tuple{typeof(Base.vcat), Array{Expr, 1}, Array{Expr, 1}})
precompile(Tuple{typeof(GeometryTypes.widths), GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{typeof(Base.minimum), GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(-)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(+)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.similar), Array{WeakRef, 1}, Type{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Base.Generator{Array{WeakRef, 1}, getfield(AbstractPlotting, Symbol("##48#50"))}, Int64})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##47#49")), Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Any}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Float64}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Bool}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Float64, Float64}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Char, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{String, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Bool, Bool, Bool}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Float64, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Nothing}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Char, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{String, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Bool, Bool, Bool}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Any}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Bool}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Any}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float64}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Bool}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Float64, Float64}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Char, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{String, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Bool, Bool, Bool}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Tuple{Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Any}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Float64, Float64}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Bool, Bool, Bool}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Any}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Float64, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Float64, Float64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Nothing}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, GeometryTypes.HyperRectangle{2, Int64}, GeometryTypes.HyperRectangle{3, Float32}, Bool})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String}, String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), Nothing, Type{Nothing}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.similar), Array{WeakRef, 1}, Type{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Reactive.Signal{GeometryTypes.Vec{2, Float32}}, 1}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Base.Generator{Array{WeakRef, 1}, getfield(AbstractPlotting, Symbol("##48#50"))}, Int64})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Type{Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base.similar), Array{Reactive.Signal{GeometryTypes.Vec{2, Float32}}, 1}, Type{Reactive.Signal{T} where T}})
precompile(Tuple{Type{Array{Reactive.Signal{T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Reactive.Signal{T} where T, 1}, Int64, Array{Reactive.Signal{GeometryTypes.Vec{2, Float32}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Reactive.Signal{T} where T, 1}, Reactive.Signal{Nothing}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Reactive.Signal{T} where T, 1}, Base.Generator{Array{WeakRef, 1}, getfield(AbstractPlotting, Symbol("##48#50"))}, Int64, Int64})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##47#49")), Array{Reactive.Signal{T} where T, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}}, Array{Reactive.Signal{T} where T, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Reactive.Signal{T} where T, 1}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##319#322")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##325#328")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{Type{Base.Val{5}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.axis2d!), AbstractPlotting.Scene, AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Type{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Float64, Float64}}, Type{Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any}}, Type{Tuple{Nothing, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Float64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{Tuple{Bool, Bool}, Tuple{Bool, Bool}}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{Tuple{Bool, Bool}, Tuple{Bool, Bool}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Symbol}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Tuple{Bool, Bool}, Tuple{Bool, Bool}}}})
precompile(Tuple{typeof(AbstractPlotting.dim2), String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, String}, Type{Tuple{String, String}}, String, typeof(Base.map), typeof(AbstractPlotting.dim2), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{String, String}}, Tuple{String, String}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.dim2), Reactive.Signal{Tuple{String, String}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:labels, :ranges, :formatter, :gap, :title_gap, :linewidth, :linecolor, :linestyle, :textcolor, :textsize, :rotation, :align, :font), T} where T<:Tuple}, Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Int64, Int64, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:labels, :ranges, :formatter, :gap, :title_gap, :linewidth, :linecolor, :linestyle, :textcolor, :textsize, :rotation, :align, :font), Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Int64, Int64, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Int64, Int64, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{AbstractPlotting.Automatic}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{AbstractPlotting.Automatic}, Type{AbstractPlotting.Automatic}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{AbstractPlotting.Automatic}, Type{typeof(AbstractPlotting.Formatters.plain)}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Int64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Nothing, Nothing}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, typeof(AbstractPlotting.Formatters.plain), Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Reactive.Signal{Tuple{String, String}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:typ, :name), Tuple{DataType, String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Any}, Tuple{String, String}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, String}, Type{Any}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{String, String}, Tuple{Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Any}, Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{Type{Reactive.Signal{Any}}, Symbol, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Nothing, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Tuple{Bool, Bool}, Tuple{Bool, Bool}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:axisnames, :textcolor, :textsize, :rotation, :align, :font), T} where T<:Tuple}, Tuple{Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:axisnames, :textcolor, :textsize, :rotation, :align, :font), Tuple{Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{String, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{String, String}}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any}}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any}}, Type{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any}}, Type{Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any}}, Type{Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Symbol, Tuple{String, String}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{String, String}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_value), AbstractPlotting.Automatic})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##380#382")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(AbstractPlotting.default_ticks), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Nothing})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Nothing, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.max), Float64, Float32})
precompile(Tuple{typeof(Base.min), Float64, Float32})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, String, typeof(Base.map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##381#383")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.default_labels)}, Int64})
precompile(Tuple{typeof(AbstractPlotting.to_value), AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.default_labels), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.default_labels), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.Formatters.plain)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.Formatters.plain), Array{Float64, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{String, 1}, Array{String, 1}}, Type{Tuple{Array{String, 1}, Array{String, 1}}}, String, typeof(Base.map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{Type{Ref{T} where T}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.getindex)}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Val{6}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Val{10}}})
precompile(Tuple{typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{getfield(FreeTypeAbstraction, Symbol("##findfont#12")), Bool, Bool, String, typeof(FreeTypeAbstraction.findfont), String})
precompile(Tuple{getfield(Base, Symbol("##replace#327")), Int64, typeof(Base.replace), String, Base.Pair{Base.Fix2{typeof(Base.isequal), Char}, String}})
precompile(Tuple{typeof(Base.vect), Ptr{FreeType.FT_FaceRec}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##TextBuffer#361")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{ColorTypes.RGBA{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{Float32, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{GeometryTypes.Vec{2, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Bool, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Attributes, Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{String, 1}, Type{Array{String, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{String, 1}}, Array{String, 1}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:strokecolor, :strokewidth, :font, :align, :rotation, :textsize, :position), T} where T<:Tuple}, Tuple{Tuple{Symbol, Float64}, Int64, Reactive.Signal{Any}, Tuple{Symbol, Symbol}, Float64, Int64, GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:strokecolor, :strokewidth, :font, :align, :rotation, :textsize, :position), Tuple{Tuple{Symbol, Float64}, Int64, Reactive.Signal{Any}, Tuple{Symbol, Symbol}, Float64, Int64, GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:strokecolor, :strokewidth, :font, :align, :rotation, :textsize, :position), Tuple{Tuple{Symbol, Float64}, Int64, Reactive.Signal{Any}, Tuple{Symbol, Symbol}, Float64, Int64, GeometryTypes.Point{2, Float32}}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :strokecolor, :strokewidth, :font, :align, :rotation, :textsize, :position), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Tuple{Symbol, Float64}, Int64, Reactive.Signal{Any}, Tuple{Symbol, Symbol}, Float64, Int64, GeometryTypes.Point{2, Float32}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Tuple{Symbol, Float64}, Int64, Reactive.Signal{Any}, Tuple{Symbol, Symbol}, Float64, Int64, GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Symbol, Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, GeometryTypes.Point{2, Float32}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.identity), Tuple{Symbol, Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Symbol, Float64}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Symbol, Float64}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), GeometryTypes.Point{2, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{Float32, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Bool}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), Array{GeometryTypes.Point{2, Float32}, 1}, typeof(Base.eltype)})
precompile(Tuple{typeof(Base.:(|>)), Type{GeometryTypes.Point{2, Float32}}, typeof(Base.length)})
precompile(Tuple{typeof(Base.length), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##275#283")){Int64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(Base.length), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(AbstractPlotting, Symbol("##33#37")), String})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Serialization.deserialize_cycle), Serialization.Serializer{Base.IOStream}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{UInt128}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{UInt128}})
precompile(Tuple{Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{GeometryTypes.Vec{4, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Vec{4, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Packing.RectanglePacker{Int64}}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Packing.BinaryNode{Packing.RectanglePacker{Int64}}}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{GeometryTypes.SimpleRectangle{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Packing.RectanglePacker{Int64}, Symbol})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{Any, Int64}}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Char}})
precompile(Tuple{Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Ptr{FreeType.FT_FaceRec}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{Char, Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Char, Array{Ptr{FreeType.FT_FaceRec}, 1}}, Tuple{Char, Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Vec{2, Float32}, 1}, Symbol})
precompile(Tuple{Type{Array{FreeTypeAbstraction.FontExtent{Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{FreeTypeAbstraction.FontExtent{Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{FreeTypeAbstraction.FontExtent{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Vararg{Int64, N}} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Float16, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Float16, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float16, 2}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##34#38")){Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.copy), Array{GeometryTypes.Vec{4, Float32}, 1}})
precompile(Tuple{typeof(Base.copy), Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Base.copy), Array{FreeTypeAbstraction.FontExtent{Float64}, 1}})
precompile(Tuple{Type{AbstractPlotting.TextureAtlas}, Packing.RectanglePacker{Int64}, Base.Dict{Any, Int64}, Int64, Array{Float16, 2}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{FreeTypeAbstraction.FontExtent{Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{AbstractPlotting.TextureAtlas}, AbstractPlotting.TextureAtlas})
precompile(Tuple{typeof(Base.getindex), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.broadcast_foreach), getfield(AbstractPlotting, Symbol("##276#284")){StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{Type{Base.Val{7}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.bs_length)}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{Float32, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.any), getfield(AbstractPlotting, Symbol("##19#20")){Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._any), getfield(AbstractPlotting, Symbol("##19#20")){Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.bs_getindex)}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{GeometryTypes.Point{2, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{ColorTypes.RGBA{Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{GeometryTypes.Vec{2, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##276#284")){StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, String, GeometryTypes.Point{2, Float32}, ColorTypes.RGBA{Float32}, Float32, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(+)), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{typeof(Base.append_any), GeometryTypes.Vec{3, Float32}, Tuple{Float32}})
precompile(Tuple{typeof(Base.iterate), GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.iterate), GeometryTypes.Vec{3, Float32}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.iterate), Tuple{Float32}})
precompile(Tuple{typeof(Base.iterate), Tuple{Float32}, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{4, Float32}}, Float32, Float32, Float32, Float32})
precompile(Tuple{typeof(Base.:(*)), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{(4,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#402")), Tuple{Int64, Int64}, Tuple{Int64}, Type{Float32}, Type{Float32}, Type{typeof(StaticArrays._mul)}, Type{StaticArrays.Size{(4, 4)}}, Type{StaticArrays.Size{(4,)}}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##403#407")){Tuple{Int64, Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##403#407")){Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(AbstractPlotting.to_ndim), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Vec{4, Float32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), FreeTypeAbstraction.FontExtent{Float64}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{Type{FreeTypeAbstraction.FontExtent{T} where T}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}, StaticArrays.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{Type{GeometryTypes.Vec{2, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Base.append_any), GeometryTypes.Vec{2, Float32}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.push!), Array{GeometryTypes.Vec{4, Float32}, 1}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Type{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##277#285")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##278#286")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##278#286")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##278#286")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##279#287")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##279#287")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##279#287")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##280#288")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##280#288")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##280#288")), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##281#289")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##281#289")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##281#289")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##282#290")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{String}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##282#290")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{String}, String, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##282#290")), Reactive.Signal{String}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.text!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes, Reactive.Signal{String}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{String}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{String}, String, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{String}, Reactive.Signal{String}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, String})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}, String})
precompile(Tuple{typeof(AbstractPlotting.plottype), String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String}, Type{Tuple{String}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{String}}, Tuple{String}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{String}}, Reactive.Signal{String}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{String}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{String}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{String}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{String}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{String}, String, Tuple{Reactive.Signal{Tuple{String}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{String}, Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.:(==)), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Automatic})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{String}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(AbstractPlotting.LinesegmentBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#106")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :raw), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Bool}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:linewidth, :colormap, :colorrange, :linestyle, :fxaa), T} where T<:Tuple}, Tuple{Float64, Reactive.Signal{Any}, AbstractPlotting.Automatic, Nothing, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:linewidth, :colormap, :colorrange, :linestyle, :fxaa), Tuple{Float64, Reactive.Signal{Any}, AbstractPlotting.Automatic, Nothing, Bool}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:linewidth, :colormap, :colorrange, :linestyle, :fxaa), Tuple{Float64, Reactive.Signal{Any}, AbstractPlotting.Automatic, Nothing, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :linestyle, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Nothing, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Nothing, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Float64}})
precompile(Tuple{typeof(Base.identity), Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Nothing, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol, Symbol})
precompile(Tuple{typeof(AbstractPlotting.map_once), typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Float64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.Iterators.zip)}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#63")), Int64, Int64, Int64, Type{Type{StaticArrays.SArray{Tuple{16, 1}, T, 2, L} where L where T}}, Type{Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{16, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{16, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{16, 1}}})
precompile(Tuple{typeof(Base.supertype), Type{ColorTypes.Colorant{T, N} where N where T}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.HSLA{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.HSL{T}, T, 4} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.parameter_upper_bound), Type{ColorTypes.TransparentColor{ColorTypes.HSL{T}, T, 4} where T<:AbstractFloat}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float32}, Float32, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.TransparentColor{ColorTypes.RGB{Float32}, Float32, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{Float32, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.HSL{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float32, 3}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float32}, Float32, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.HSLA{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.HSL{Float32}, Float32, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.TransparentColor{ColorTypes.HSL{Float32}, Float32, 4}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.HSLA{Float32}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.HSL{Float32}, Float32, 4}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.minimum)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.min), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.max), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Float32}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float32}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{GeometryTypes.Point{2, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{ColorTypes.RGBA{Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{GeometryTypes.Vec{2, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Tuple{Int64, Int64}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Tuple{Int64, Int64}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Int64, Int64}, Float32}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Float64, Float32}})
precompile(Tuple{typeof(Base.vect), GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), Tuple{Symbol, Float64}, Float64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(ColorTypes.color), ColorTypes.RGBA{Float32}})
precompile(Tuple{Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGB{Float32}, Float64})
precompile(Tuple{typeof(Base.append!), Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.append!), Array{ColorTypes.RGBA{Float32}, 1}, Base.Iterators.Take{Base.Iterators.Repeated{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.append!), Array{Float32, 1}, Base.Iterators.Take{Base.Iterators.Repeated{Float32}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Float32, Float64}})
precompile(Tuple{typeof(AbstractPlotting.draw_ticks), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Int64, Tuple{Float64, Float64}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Float32, Float32}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Float32, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Float32}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{AbstractFloat}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:rotation, :textsize, :align, :color, :font), Tuple{Float64, Float32, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:rotation, :textsize, :align, :color, :font), Tuple{Float64, Float32, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float32, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float32}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Key{:color}}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:color}})
precompile(Tuple{Type{AbstractPlotting.Key{:rotation}}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Float64, AbstractPlotting.Key{:rotation}})
precompile(Tuple{typeof(Base.append!), Array{AbstractPlotting.Quaternion{Float32}, 1}, Base.Iterators.Take{Base.Iterators.Repeated{AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{Type{AbstractPlotting.Key{:textsize}}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Float32, AbstractPlotting.Key{:textsize}})
precompile(Tuple{Type{AbstractPlotting.Key{:font}}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, String, AbstractPlotting.Key{:font}})
precompile(Tuple{typeof(Base.append!), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Base.Iterators.Take{Base.Iterators.Repeated{Array{Ptr{FreeType.FT_FaceRec}, 1}}}})
precompile(Tuple{Type{AbstractPlotting.Key{:align}}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Tuple{Symbol, Symbol}, AbstractPlotting.Key{:align}})
precompile(Tuple{typeof(Base.append!), Array{GeometryTypes.Vec{2, Float32}, 1}, Base.Iterators.Take{Base.Iterators.Repeated{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Int64}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(Base.:(==)), GeometryTypes.Point{2, Float32}, GeometryTypes.Vec{2, Float64}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:linewidth, :color), Tuple{Float64, Symbol}}, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), Symbol, Float64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{GeometryTypes.Point{2, Float32}, 1}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.draw_titles), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Float32, Float32}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Symbol, AbstractPlotting.Key{:color}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, ColorTypes.RGBA{Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float32, Float64}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{String, 1}}, Array{String, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), Nothing, Type{Nothing}, String, typeof(AbstractPlotting.map_once), typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.similar), Array{WeakRef, 1}, Type{Reactive.Signal{Nothing}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Reactive.Signal{Nothing}, 1}, Reactive.Signal{Nothing}, Base.Generator{Array{WeakRef, 1}, getfield(AbstractPlotting, Symbol("##48#50"))}, Int64})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##47#49")), Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}}, Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{String, 1}}, Array{String, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{String, 1}}, Array{String, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{String, String}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Float32, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{String}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{String}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{String}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{String}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{String}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{String}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, String}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Any}}, Tuple{Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}}, Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{String, 1}}}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{String}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String}}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{Reactive.Signal{Tuple{String}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{String, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##278#286")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##279#287")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##280#288")), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##281#289")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{String}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{String}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##282#290")), Reactive.Signal{String}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{String}, Tuple{Reactive.Signal{String}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{String}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{String}}, Tuple{Reactive.Signal{String}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{String}}, Tuple{String}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{String}, Tuple{Reactive.Signal{Tuple{String}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Float32, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{String}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Bool}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Nothing}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, String}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Base.:(==)), AbstractPlotting.EmptyCamera, AbstractPlotting.EmptyCamera})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##cam2d!#180")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.cam2d!), AbstractPlotting.Scene})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:typ, :name), Tuple{DataType, String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Any}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{2, Float32}, Type{Any}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Float32, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, AbstractPlotting.Mouse.Button, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}, Symbol})
precompile(Tuple{typeof(Base.identity), Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Float32})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Float32, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), AbstractPlotting.Mouse.Button})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Mouse.Button, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, AbstractPlotting.Mouse.Button, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{2, Float32}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##21#22")){AbstractPlotting.Camera2D, AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:typ, :name), Tuple{DataType, String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Float32}, Float32})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){Float32}, Reactive.Signal{Float32}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:typ, :name), T} where T<:Tuple}, Tuple{Union, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:typ, :name), Tuple{Union, String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Union{Union{Nothing, AbstractPlotting.Keyboard.Button}, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Union{Union{Nothing, AbstractPlotting.Keyboard.Button}, AbstractPlotting.Mouse.Button}}, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Union{Union{Nothing, AbstractPlotting.Keyboard.Button}, AbstractPlotting.Mouse.Button}}, Nothing, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){Union{Union{Nothing, AbstractPlotting.Keyboard.Button}, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Union{Union{Nothing, AbstractPlotting.Keyboard.Button}, AbstractPlotting.Mouse.Button}}, AbstractPlotting.Mouse.Button})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Union{Union{Nothing, AbstractPlotting.Keyboard.Button}, AbstractPlotting.Mouse.Button}}, AbstractPlotting.Mouse.Button, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Float32}, Float64})
precompile(Tuple{Type{AbstractPlotting.Camera2D}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, AbstractPlotting.Camera, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Reactive.Signal{Nothing}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, AbstractPlotting.Camera, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{Tuple{Float64, Float64}}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, Reactive.Signal{Nothing}, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, AbstractPlotting.Camera, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{(2,)}}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{DataType, DataType, DataType}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType, DataType}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##218#221")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{Float64}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}, Int64, Int64})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#21")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), GeometryTypes.Vec{2, Int64}, GeometryTypes.Vec{2, Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(AbstractPlotting.selection_rect!), AbstractPlotting.Scene, AbstractPlotting.Camera2D, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#77")), AbstractPlotting.Events, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, AbstractPlotting.Camera, Base.RefValue{Any}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Array{AbstractPlotting.AbstractScreen, 1}, Type{AbstractPlotting.Scene}, AbstractPlotting.Scene})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:linestyle, :linewidth, :color, :visible, :raw), Tuple{Symbol, Float32, Tuple{Symbol, Float64}, Bool, Bool}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Float32, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Tuple{Symbol, Float64}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Symbol}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Symbol, Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Float32}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Bool}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.isfinite), GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.union), GeometryTypes.HyperRectangle{3, Float32}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), GeometryTypes.Vec{3, Float32}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float64}}}})
precompile(Tuple{typeof(Base.:(*)), Int64, GeometryTypes.Vec{3, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float64}}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.Vec{3, Float64}, GeometryTypes.Vec{3, Float64}})
precompile(Tuple{typeof(AbstractPlotting.update_cam!), AbstractPlotting.Scene, AbstractPlotting.EmptyCamera, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, AbstractPlotting.Mouse.DragEnum, Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s16#9")), Type{GeometryTypes.Vec{S, T} where T where S}, Type{Type{GeometryTypes.Vec{S, T} where T where S}}, Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(GeometryTypes.size_or), Type{GeometryTypes.Vec{S, T} where T where S}, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.length), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.abs), StaticArrays.Size{(2,)}, Tuple{StaticArrays.Size{(2,)}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Bool}, Bool})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Bool}, Bool, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{2, Float32}, Type{GeometryTypes.HyperRectangle{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Bool}, Bool, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Bool}, Bool, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Float32}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Scene}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Camera2D}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Symbol}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Symbol, Float64}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Scene}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Camera2D}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Symbol}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Symbol, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Any}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Scene}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Camera2D}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Symbol}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Symbol, Float64}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.cameracontrols!), AbstractPlotting.Scene, AbstractPlotting.Camera2D})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, AbstractPlotting.Camera2D})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{String}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{2, Float32}, 1}, AbstractPlotting.Key{:textsize}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, AbstractPlotting.Key{:font}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Vec{2, Float32}, AbstractPlotting.Key{:align}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{AbstractPlotting.Quaternion{Float32}, 1}, AbstractPlotting.Key{:rotation}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.to_rotation)}, Int64})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.any), getfield(AbstractPlotting, Symbol("##19#20")){Int64}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._any), getfield(AbstractPlotting, Symbol("##19#20")){Int64}, Tuple{Int64, Int64, Int64, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Array{GeometryTypes.Point{2, Float32}, 1}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float32}, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), GeometryTypes.Vec{3, Float32}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{GeometryTypes.Vec{3, Float32}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Vec{3, Float32}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#21")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), GeometryTypes.Vec{2, Float64}, GeometryTypes.Vec{2, Float64}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, typeof(Reactive.print_error)})

precompile(Tuple{getfield(Makie, Symbol("##Screen#61")), Tuple{Int64, Int64}, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.Screen}})
precompile(Tuple{typeof(Base.vect), Tuple{UInt32, Int64}, Tuple{UInt32, Int64}, Tuple{UInt32, Int64}, Tuple{UInt32, Int64}, Tuple{UInt32, Int64}, Tuple{UInt32, Int64}, Tuple{UInt32, Int64}, Tuple{UInt32, Int64}})
precompile(Tuple{typeof(Base.append_any), Tuple{NamedTuple{(:name, :resolution, :windowhints, :visible), Tuple{String, Tuple{Int64, Int64}, Array{Tuple{UInt32, Int64}, 1}, Bool}}, DataType}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), Tuple{NamedTuple{(:name, :resolution, :windowhints, :visible), Tuple{String, Tuple{Int64, Int64}, Array{Tuple{UInt32, Int64}, 1}, Bool}}, DataType}})
precompile(Tuple{typeof(Base.iterate), Tuple{NamedTuple{(:name, :resolution, :windowhints, :visible), Tuple{String, Tuple{Int64, Int64}, Array{Tuple{UInt32, Int64}, 1}, Bool}}, DataType}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :resolution, :windowhints, :visible), Tuple{String, Tuple{Int64, Int64}, Array{Tuple{UInt32, Int64}, 1}, Bool}}, Type{GLFW.Window}})
precompile(Tuple{getfield(GLFW, Symbol("##Window#7")), String, Tuple{Int64, Int64}, Bool, Int64, Int64, Array{Tuple{UInt32, Int64}, 1}, Array{Tuple{UInt32, Integer}, 1}, Bool, Bool, Bool, Nothing, GLFW.Window, Type{GLFW.Window}})
precompile(Tuple{typeof(GLFW.WindowHint), UInt32, Int64})
precompile(Tuple{typeof(GLFW.WindowHint), UInt32, Int32})
precompile(Tuple{typeof(GLFW.WindowHint), UInt32, UInt32})
precompile(Tuple{typeof(Makie.GLAbstraction.switch_context!), GLFW.Window})
precompile(Tuple{typeof(Base.:(==)), GLFW.Window, Symbol})
precompile(Tuple{typeof(Base.push!), Array{GLFW.Window, 1}, GLFW.Window})
precompile(Tuple{typeof(Base.getproperty), ModernGL.GLFunc, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ModernGL.GLFunc, Symbol, Ptr{Nothing}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol, Symbol}, NamedTuple{(:minfilter, :x_repeat), Tuple{Symbol, Symbol}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##TextureParameters#43")), Symbol, Symbol, Symbol, Symbol, Symbol, Float32, Type{Makie.GLAbstraction.TextureParameters{NDim} where NDim}, Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.TextureParameters{NDim} where NDim}, Symbol, Symbol, Tuple{Symbol, Symbol}, Float32, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Symbol, UInt32}}, Tuple{Symbol, Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, UInt32}, 1}, Tuple{Symbol, UInt32}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{2}}}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Tuple{Symbol, UInt32}, 1}, Type{Tuple{Symbol, Any}}})
precompile(Tuple{Type{Array{Tuple{Symbol, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Symbol, Any}, 1}, Int64, Array{Tuple{Symbol, UInt32}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Any}, 1}, Tuple{Symbol, Tuple{UInt32, UInt32}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, Any}, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{2}}}, Int64, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Tuple{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, UInt32, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{UInt32, UInt32}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple{UInt32, UInt32}, Int64})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol, Symbol}, NamedTuple{(:minfilter, :x_repeat), Tuple{Symbol, Symbol}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{GeometryTypes.Vec{2, UInt16}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol, Symbol}, NamedTuple{(:minfilter, :x_repeat), Tuple{Symbol, Symbol}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float32}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{String, String}, String, String})
precompile(Tuple{getfield(Base, Symbol("##parse#338")), Nothing, typeof(Base.parse), Type{Int64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String}, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.get_template!), String, Base.Dict{String, String}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.shadertype), String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Union{Array{Symbol, 1}, Symbol}}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Union{Array{Symbol, 1}, Symbol}}, String})
precompile(Tuple{typeof(Base.getindex), Tuple{Tuple{}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(FileIO.hasmagic), Tuple{}})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:GLSLShader}}}, String})
precompile(Tuple{typeof(Base.setindex!), Array{Array{String, 1}, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.mustache2replacement), String, Base.Dict{String, String}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(Makie.GLAbstraction, Symbol("##75#80")){Base.Dict{Symbol, Any}, Tuple{String, String}}, Base.Dict{Any, Makie.GLAbstraction.GLProgram}, Tuple{Tuple{String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{String, 1}, Array{String, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Zip2{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.get_shader!), String, Base.Dict{String, String}, Base.Dict{String, String}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Array{Makie.GLAbstraction.Shader, 1}, Makie.GLAbstraction.Shader, Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.compile_program), Array{Makie.GLAbstraction.Shader, 1}, Array{Tuple{Int64, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("##replace#327")), Int64, typeof(Base.replace), String, Base.Pair{Base.Regex, String}})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Int64}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Int64})
precompile(Tuple{typeof(Base.finalizer), typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLVertexArray{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), typeof(Makie.rcpframe), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.rcpframe), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Float32}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float64, Float64}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Scene}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Camera2D}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Symbol}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Symbol, Float64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Int64, Int64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Int64, Int64}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{String, String}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, String}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, String}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Base.Pair{Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Base.isbits), Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.isequal), Base.Dict{String, String}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.getproperty), Makie.Screen, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Task}, Task})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Makie.Screen}, Makie.Screen})
precompile(Tuple{typeof(Base.append_any), Tuple{Makie.Screen}, GeometryTypes.Vec{2, Int64}})
precompile(Tuple{typeof(Base.iterate), Tuple{Makie.Screen}})
precompile(Tuple{typeof(Base.iterate), Tuple{Makie.Screen}, Int64})
precompile(Tuple{typeof(Base.iterate), GeometryTypes.Vec{2, Int64}})
precompile(Tuple{typeof(Base.iterate), GeometryTypes.Vec{2, Int64}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.resize!), Makie.Screen, Int64, Int64})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, GeometryTypes.HyperRectangle{2, Int64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.getproperty), Makie.MonitorProperties, Symbol})
precompile(Tuple{typeof(Base.minimum), GeometryTypes.Vec{2, Float64}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Float64}, Float64})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Float64}, Float64, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Tuple{Float64, Float64}, Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Reactive.Signal{Nothing}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, GeometryTypes.HyperRectangle{2, Int64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, GeometryTypes.HyperRectangle{2, Int64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Int64, Int64}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Int64, Int64}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Float64}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Char, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##46#47")){getfield(AbstractPlotting, Symbol("##75#76")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##178#179")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float64}, Float64, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float64}, Float64, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}}})
precompile(Tuple{getfield(Makie, Symbol("##62#63"))})
precompile(Tuple{getfield(Makie, Symbol("##renderloop#69")), Float64, getfield(Makie, Symbol("##70#72")), typeof(Makie.renderloop), Makie.Screen})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{Char, 1}}, Array{Char, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Symbol, Symbol, Float32}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Symbol, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{Float16}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{Float16}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLAbstraction, Symbol("##10#11"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:alpha}}})
precompile(Tuple{Type{AbstractPlotting.Key{:text}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float64}, Float64, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Float64}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float64}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Char, 1}}, Array{Char, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Char, 1}}, Array{Char, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(==)), GLFW.Window, GLFW.Window})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Tuple{Int64, Int64}}, Tuple{Int64, Int64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.vect), UInt32, UInt32})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.PostprocessPrerender}, Makie.GLAbstraction.GLVertexArray{Int64}})
precompile(Tuple{typeof(Reactive.value), Bool})
precompile(Tuple{Type{Bool}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{Int32, Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(Makie, Symbol("##45#48")){Makie.GLAbstraction.RenderObject{Makie.PostprocessPrerender}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{Int32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##s147#83")), Type{GeometryTypes.Vec{2, Float32}}, Type{typeof(Makie.GLAbstraction.gluniform)}, Type{Int32}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction._size), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.uniformfunc), Type{Float32}, Tuple{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.opengl_postfix), Type{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction._ndims), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.ndims), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##46#49")){Makie.GLAbstraction.RenderObject{Makie.PostprocessPrerender}}})
precompile(Tuple{getfield(Makie, Symbol("##47#50")){Makie.GLAbstraction.RenderObject{Makie.PostprocessPrerender}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Reactive.Signal{Float64}}}, AbstractPlotting.Attributes, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Symbol, Float64}})
precompile(Tuple{Type{AbstractPlotting.Key{:strokecolor}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Float64}, AbstractPlotting.Key{:strokecolor}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{Float32}, Type{ColorTypes.RGBA{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Tuple{Int64, Int64}}, Tuple{Int64, Int64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Tuple{Int64, Int64}}, Tuple{Int64, Int64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.rcpframe), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{ColorTypes.RGBA{Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Base, Symbol("##Timer#437#438")), Float64, Type{Base.Timer}, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{Type{Array{Base.Pair{Symbol, B} where B, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}}, Int64, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Key{:position}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{2, Float32}, 1}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Bool})
precompile(Tuple{Type{AbstractPlotting.Key{:visible}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Bool}, Bool, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Bool}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Bool}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, AbstractPlotting.Key{:font}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Tuple{Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Vec{2, Float32}, AbstractPlotting.Key{:align}, AbstractPlotting.Key{:text}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{2, Float32}, 1}, AbstractPlotting.Key{:textsize}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Int64})
precompile(Tuple{Type{AbstractPlotting.Key{:strokewidth}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:strokewidth}, AbstractPlotting.Key{:text}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Key{:light}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, Array{GeometryTypes.Vec{3, Float32}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{AbstractPlotting.Quaternion{Float32}, 1}, AbstractPlotting.Key{:rotation}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{Type{AbstractPlotting.Key{:model}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{AbstractPlotting.Key{:color}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{AbstractPlotting.Key{:color}}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{Type{AbstractPlotting.Key{:linewidth}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:text}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Array{Base.Pair{Symbol, B} where B, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Bool}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Float32}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Symbol}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Any}})
precompile(Tuple{typeof(Base.depwarn), String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.length), Array{Ptr{Nothing}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Ptr{Nothing}, 1}, Int64})
precompile(Tuple{typeof(Base.deleteat!), Array{Ptr{Nothing}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.StackTraces.StackFrame, Symbol})
precompile(Tuple{typeof(Base.getproperty), Core.MethodInstance, Symbol})
precompile(Tuple{typeof(Base.getproperty), Method, Symbol})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.getproperty), Core.CodeInfo, Symbol})
precompile(Tuple{typeof(Base.:(==)), Int32, Int64})
precompile(Tuple{typeof(Base.getproperty), Core.LineInfoNode, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Tuple{Symbol, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:caller, :maxlog), T} where T<:Tuple}, Tuple{Base.StackTraces.StackFrame, Int64}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Tuple{Symbol, Symbol}}, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Int64, Base.Iterators.Pairs{Symbol, Base.StackTraces.StackFrame, Tuple{Symbol}, NamedTuple{(:caller,), Tuple{Base.StackTraces.StackFrame}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Tuple{Symbol, Symbol}}, String, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Tuple{Symbol, Symbol}}, String, Int64})
precompile(Tuple{typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Makie.to_gl_text), String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.any), getfield(AbstractPlotting, Symbol("##19#20")){Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._any), getfield(AbstractPlotting, Symbol("##19#20")){Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64}}})
precompile(Tuple{getfield(Makie, Symbol("##105#106")){String, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.TextureAtlas, Int64, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, GeometryTypes.Point{2, Float32}, GeometryTypes.Vec{2, Float32}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.push!), Array{GeometryTypes.Point{2, Float32}, 1}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, String, typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{String}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.getindex), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:minfilter, :magfilter, :anisotropic), Tuple{Symbol, Symbol, Float32}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float16}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("#kw##visualize")), NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Type{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Makie.GLAbstraction.Texture{Float16, 2}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("##2#3")), Base.Val{4}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##103#105"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLVisualize.primitive_scale)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLVisualize.primitive_uv_offset_width)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLAbstraction.update!)}, Int64})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##visualize#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{Type{Makie.GLAbstraction.Style{:default}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{Float16, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.default), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##91#92"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLVisualize.vec2quaternion)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##91#92")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##91#92")), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int32}, Int32, Tuple{Reactive.Signal{Makie.GLVisualize.Shape}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Int32}, Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Int32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Makie.GLAbstraction.Texture{Float16, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Makie.GLAbstraction.Texture{Float16, 2}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), typeof(Base.length), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int64}, Int64, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.length), Reactive.Signal{Int64}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Int64}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, typeof(Makie.GLVisualize.to_index_buffer), Symbol})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Makie.GLVisualize.position_calc), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Nothing, Nothing, Nothing, Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##115#116")), Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{Int64}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Int64}, String})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{Base.Dict{String, String}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:view,), Tuple{Base.Dict{String, String}}}, Type{Makie.GLVisualize.GLVisualizeShader}, String, String, String, String, String})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##GLVisualizeShader#21#23")), Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLVisualize.GLVisualizeShader}, String, String, String, String, String})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, String}, Tuple{Int64, String}})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##22#24")), Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLVisualize.GLVisualizeShader, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.intensity_convert), Nothing, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Vec{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Int32, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.assemble_shader), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(GeometryTypes.eltype_or), Type{GeometryTypes.HyperRectangle{3, T} where T}, Type{Float32}})
precompile(Tuple{typeof(GeometryTypes.centered), Type{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Makie.GLVisualize.assemble_robj), Base.Dict{Symbol, Any}, Makie.GLVisualize.GLVisualizeShader, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, UInt32, Nothing, Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Int64}, Reactive.Signal{Int64}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLAbstraction.gl_convert)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int32}, Int32, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Int32}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Float32}, Reactive.Signal{Float32}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{String}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{String}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{String}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{String}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float32, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Int64}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{Float32}, Type{ColorTypes.RGBA{Float32}}, String, typeof(Base.map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Int32})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Int32})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Float32})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Float32})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), UInt32})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), UInt32})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(4, 4)}}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Bool})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, UInt8, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Int32}, Reactive.Signal{Int32}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String, String}, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(4,)}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{Float16, 2}})
precompile(Tuple{typeof(Base.get!), getfield(Makie.GLAbstraction, Symbol("##75#80")){Base.Dict{Symbol, Any}, Tuple{String, String, String, String, String}}, Base.Dict{Any, Makie.GLAbstraction.GLProgram}, Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base._ntuple), getfield(Makie.GLAbstraction, Symbol("##84#85")){UInt32}, Int32})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Makie.GLAbstraction, Symbol("##84#85")){UInt32}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Makie.GLAbstraction, Symbol("##84#85")){UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple, 1}, Tuple{Int32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple, 1}, Tuple{Int32, Int64}, Int64})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(ModernGL.glVertexAttribPointer), Int32, Int64, UInt32, UInt32, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}, String})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}, String})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}, String})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}, String})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Int64}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Makie.GLAbstraction.StandardPostrender})
precompile(Tuple{Type{Makie.GLAbstraction.Context{Unit} where Unit}, Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Makie.GLAbstraction.const_lift), getfield(Makie.GLAbstraction, Symbol("##10#11")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##10#11")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##10#11")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, GeometryTypes.HyperRectangle{3, Float32}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(4,)}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(*)), StaticArrays.Size{(4,)}, Tuple{StaticArrays.Size{(4,)}, StaticArrays.Size{(4,)}}}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.min), StaticArrays.Size{(4,)}, Tuple{StaticArrays.Size{(4,)}, StaticArrays.Size{(4,)}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.max), StaticArrays.Size{(4,)}, Tuple{StaticArrays.Size{(4,)}, StaticArrays.Size{(4,)}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##10#11")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##10#11")), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.transformation), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Base.:(*)), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.:(*)), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(Base.map), typeof(Base.:(*)), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.:(*)), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Makie.GLAbstraction.Composable{unit} where unit, 1}, Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Base.getindex), Array{Makie.GLAbstraction.Composable{unit} where unit, 1}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Symbol})
precompile(Tuple{typeof(Base.push!), Makie.Screen, AbstractPlotting.Scene, Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Base.hash), AbstractPlotting.Scene, UInt64})
precompile(Tuple{typeof(AbstractPlotting.to_color), ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{UInt8, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{Bool}, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Tuple{Int64, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{Bool}, Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.convert), Type{Makie.GLAbstraction.RenderObject{Pre} where Pre}, Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{Float32, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Key{:linesegments}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.append_any), GeometryTypes.Vec{2, Int64}, GeometryTypes.Vec{2, Int64}})
precompile(Tuple{typeof(ModernGL.glViewport), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Bool})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._size), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._ndims), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Makie.GLAbstraction._size), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Makie.GLAbstraction.uniformfunc), Type{Float32}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction._ndims), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.ndims), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.sizeof), Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, UInt16})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Float16, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Float32})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, UInt8})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{Int32}})
precompile(Tuple{Makie.GLAbstraction.StandardPostrender})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}, UInt32})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}}, AbstractPlotting.Attributes, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{Type{AbstractPlotting.Key{:linestyle}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Nothing, AbstractPlotting.Key{:linestyle}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Nothing}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Key{:colormap}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Base, Symbol("#kw##parse")), NamedTuple{(:base,), Tuple{Int64}}, typeof(Base.parse), Type{Int64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.vect), ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.resample), Array{ColorTypes.RGBA{Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.TransparentColor{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{Float64, 4}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.interpolated_getindex)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float32, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{Float32, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float32, 1}, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 1}, Type{Array{Float32, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 1}}, Array{Float32, 1}, Tuple{Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{Type{AbstractPlotting.Key{:fxaa}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Nothing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Float32, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Makie.GLAbstraction.Style{:linesegment}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Makie.GLAbstraction.Style{:linesegment}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLVisualize.Shape, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Float64}, Reactive.Signal{Float64}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{3, Float32}, 1}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, String, typeof(Base.map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, Array{GeometryTypes.Vec{3, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float32, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{Float32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLVisualize.Shape})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.glsl_variable_access), String, Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{Float32}, String})
precompile(Tuple{typeof(Makie.GLAbstraction.const_lift), getfield(Makie.GLAbstraction, Symbol("##10#11")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.:(!=)), AbstractPlotting.Scene, Nothing})
precompile(Tuple{typeof(Base.isequal), AbstractPlotting.Scene, AbstractPlotting.Scene})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{()}, StaticArrays.Size{()}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{()}, StaticArrays.Size{()}}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{DataType, DataType, DataType, DataType}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType, DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType, DataType, DataType}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##218#221")), Tuple{DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Tuple{DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/)), StaticArrays.Size{(4,)}, Tuple{StaticArrays.Size{(4,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.pixel2world)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:scatter}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, AbstractPlotting.Key{:strokecolor}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{Type{AbstractPlotting.Key{:glowwidth}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:glowwidth}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{Type{AbstractPlotting.Key{:marker_offset}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Vec{2, Float32}, AbstractPlotting.Key{:marker_offset}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{AbstractPlotting.Key{:markersize}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Billboard})
precompile(Tuple{Type{AbstractPlotting.Key{:rotations}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), AbstractPlotting.Billboard, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Quaternion{Float32}, Type{AbstractPlotting.Quaternion{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{AbstractPlotting.Quaternion{Float32}}, AbstractPlotting.Quaternion{Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:strokewidth}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Float64, Float64}})
precompile(Tuple{Type{AbstractPlotting.Key{:colorrange}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Type{GeometryTypes.HyperSphere{2, T} where T}})
precompile(Tuple{Type{AbstractPlotting.Key{:marker}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Type{GeometryTypes.HyperSphere{2, T} where T}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(AbstractPlotting.to_spritemarker), Type{GeometryTypes.HyperSphere{2, T} where T}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{2, Float32}, Type{GeometryTypes.HyperSphere{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{2, Float32}}, GeometryTypes.HyperSphere{2, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 1}, Type{Array{Float64, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 1}}, Array{Float64, 1}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{Type{AbstractPlotting.Key{:glowcolor}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, AbstractPlotting.Key{:glowcolor}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{Type{AbstractPlotting.Key{:transform_marker}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:transform_marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.HyperSphere{2, Float32}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{2, Float32}, Type{GeometryTypes.HyperSphere{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{2, Float32}}, GeometryTypes.HyperSphere{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.pixel2world), Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Makie.pixel2world), AbstractPlotting.Scene, Float32})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), typeof(Makie.pixel2world), Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.pixel2world), Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Makie, Symbol("##98#100")), AbstractPlotting.Billboard})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##95#96")), Array{Float64, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 1}, Type{Array{Float32, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##95#96")), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 1}}, Array{Float32, 1}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##95#96")), Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}, Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int32}, Int32, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Int32}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize.intensity_convert), Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Bool}, Reactive.Signal{Bool}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Bool}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), UInt8, Type{UInt8}, String, typeof(Base.map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{UInt8}, UInt8, Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{UInt8}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{UInt8}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGBA{Float32}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, UInt32}, 1}, Tuple{Symbol, UInt32}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Any}, 1}, Tuple{Symbol, Tuple{UInt32}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, Any}, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{UInt32}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple{UInt32}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Bool}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Tuple{Symbol, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Float32}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Symbol, Float64}})
precompile(Tuple{Type{AbstractPlotting.Key{:lines}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Float64}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{Float32}, Type{ColorTypes.RGBA{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}}, AbstractPlotting.Attributes, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{UInt8}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._size), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._ndims), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.ndims), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{Float32, Float32, Float32, Float32}}})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:linestyle}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(+)), Float64}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 1}, Type{Array{Float64, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 1}}, Array{Float64, 1}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Bool}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Bool}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Bool, Type{Bool}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Bool}, Bool, Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Bool}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float32}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float32})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float32, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Makie.GLAbstraction.Style{:lines}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Makie.GLAbstraction.Style{:lines}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##53#57")){GeometryTypes.Point{2, Float32}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##54#58"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##55#59"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLVisualize.sumlengths)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Point{2, Bool}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.last)}, Int64})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##53#57")){GeometryTypes.Point{2, Float32}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Int32}, Type{GeometryTypes.Vec{2, Int32}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Int32}}, GeometryTypes.Vec{2, Int32}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{GeometryTypes.Vec{2, Int32}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}}, Type{GeometryTypes.Vec{2, Int32}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.Vec{2, Int32}}, GeometryTypes.Vec{2, Int32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Int32}, Type{GeometryTypes.Vec{2, Int32}}, String, typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Int32}}, GeometryTypes.Vec{2, Int32}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.convert), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{Float32}, Reactive.Signal{Float32}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{Float32}})
precompile(Tuple{Type{Reactive.Signal{Type{Float32}}}, Type{Float32}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float32})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.convert), Reactive.Signal{Float32}, Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 1}, Type{Array{Float32, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 1}}, Array{Float32, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Makie.GLVisualize.ticks), Array{Float64, 1}, Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x_repeat,), Tuple{Symbol}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Array{Float16, 1}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:x_repeat,), Tuple{Symbol}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float16}, Tuple{Int64}})
precompile(Tuple{Type{Makie.GLAbstraction.TextureParameters{NDim} where NDim}, Symbol, Symbol, Tuple{Symbol}, Float32, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{Float16, 1}, Symbol})
precompile(Tuple{typeof(Base.last), Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.last), Array{Float32, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), typeof(Base.last), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.last), Reactive.Signal{Float32}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLAbstraction.Texture{Float16, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Makie.GLAbstraction.Texture{Float16, 1}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{Float16, 1}})
precompile(Tuple{getfield(FileIO, Symbol("##load#13")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), String})
precompile(Tuple{typeof(Base.getindex), Tuple{Tuple{UInt8, UInt8, UInt8}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(FileIO.hasmagic), Tuple{UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8}})
precompile(Tuple{Type{FileIO.Stream{FileIO.DataFormat{:JPEG}, Base.IOStream}}, Base.IOStream, String})
precompile(Tuple{typeof(FileIO.file!), FileIO.Stream{FileIO.DataFormat{:JPEG}, Base.IOStream}})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:JPEG}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:JPEG}}})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Module}, Base.PkgId})
precompile(Tuple{typeof(Base.methods), typeof(ImageMagick.load)})
precompile(Tuple{typeof(Base.methods), typeof(ImageMagick.load), Type{Tuple}})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{FileIO.DataFormat{:JPEG}}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), StaticArrays.Dynamic})
precompile(Tuple{getfield(ImageMagick, Symbol("##load_#26")), Type{Array{T, N} where N where T}, String, Nothing, Bool, typeof(ImageMagick.load_), String})
precompile(Tuple{Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(ImageCore.samesize), Type{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.sizeof), Type{UInt8}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("##32#33")){FixedPointNumbers.Normed{UInt8, 8}}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{getfield(ImageMagick, Symbol("##exportimagepixels!#17")), Int64, Int64, typeof(ImageMagick.exportimagepixels!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("##32#33")){FixedPointNumbers.Normed{UInt8, 8}}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(ImageMagick.pd), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Int64}, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Int64}}, Int64})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{Int64}, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{Int64}, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.cat_similar), Int64, Type{Int64}, Tuple{Int64}})
precompile(Tuple{Type{Array{Int64, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.cat_indices), Int64, Int64})
precompile(Tuple{typeof(Base.cat_size), Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.cat_indices), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})

precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{getfield(ImageFiltering.KernelFactors, Symbol("##IIRGaussian#23")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ImageFiltering.KernelFactors.IIRGaussian), Array{Int64, 1}})
precompile(Tuple{typeof(ImageFiltering.KernelFactors.IIRGaussian), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.promote_tuple_eltype), Type{Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 3}}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{2}})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{3, 3}, Float64, 2, 9}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 3}}})
precompile(Tuple{Type{StaticArrays.Size{(3, 3)}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(3, 3)}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64, Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##213#214"))}, Int64})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Int64, Int64}}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.similar), Array{Tuple{Int64, Int64}, 1}, Type{Tuple{Vararg{Int64, N} where N}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{Int64, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(/)), StaticArrays.Size{(3, 3)}, Tuple{StaticArrays.Size{(3, 3)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{Type{Array{Expr, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##216#219"))}, Int64})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64, Int64})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3, 3)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3, 3)}})
precompile(Tuple{getfield(ImageFiltering.KernelFactors, Symbol("##IIRGaussian#22")), Bool, typeof(ImageFiltering.KernelFactors.IIRGaussian), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Float64}})
precompile(Tuple{getfield(ImageFiltering.KernelFactors, Symbol("##IIRGaussian#17")), Bool, typeof(ImageFiltering.KernelFactors.IIRGaussian), Type{Float64}, Int64})
precompile(Tuple{typeof(ImageFiltering.filter_type), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}})
precompile(Tuple{typeof(ImageFiltering.imfilter), Type{ColorTypes.RGB{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NA{0}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float64, 3}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{Float64, 3}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(ImageFiltering, Symbol("##23#24"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{}, Tuple{}, Tuple{}}, Int64})
precompile(Tuple{getfield(Base, Symbol("##s565#389")), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{Float64}}, Int64, Type{typeof(Base.copyto!)}, Type{Array{ColorTypes.RGB{Float64}, 2}}, Type{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Type{OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}}, Type{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), QuoteNode, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), QuoteNode})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Expr})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Int64}, Int64})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{3}, ColorTypes.RGB{Float64}, 1, 3}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(+)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{3}, Float64, 1, 3}}})
precompile(Tuple{typeof(Main.maxabsfinite), Array{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Main.sad), Array{ColorTypes.RGB{Float64}, 2}, Array{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.length), Array{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.:(<)), Float64, Float64})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})

precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##tutorial_markersize#369, Symbol("##1#2")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##tutorial_markersize#369, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{NamedTuple{(:markersize,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.scatter), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.scatter), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##133#135")), Array{Float64, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{ColorTypes.RGBA{Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Int64}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLVisualize.Shape}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Int32}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{UInt8}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.UnitRange{Int64}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLVisualize.Shape}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Int32}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{UInt8}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Int32}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{UInt8}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Bool}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}, Tuple{Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{String}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLVisualize.Shape}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int32}}, Tuple{Reactive.Signal{Makie.GLVisualize.Shape}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int32}}, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 1}}}, Tuple{Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 1}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int32}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{UInt8}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{UInt8}}, Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{Reactive.Signal{Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Bool}}, Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Int32}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Int32}}}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.UnitRange{Int64}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.UnitRange{Int64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{2, Float32}, 1}, AbstractPlotting.Key{:marker_offset}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.to_2d_scale)}, Int64})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{Type{Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{FixedPointNumbers.Normed{UInt8, 8}, 1}}})
precompile(Tuple{typeof(ImageCore.samesize), Type{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 2, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), MappedArrays.MappedArray{UInt8, 2, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 2, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("##32#33")){FixedPointNumbers.Normed{UInt8, 8}}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{getfield(ImageMagick, Symbol("##exportimagepixels!#17")), Int64, Int64, typeof(ImageMagick.exportimagepixels!), MappedArrays.MappedArray{UInt8, 2, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 2, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("##32#33")){FixedPointNumbers.Normed{UInt8, 8}}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(ImageMagick.pd), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})

precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Gray{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float32, 1}}})
precompile(Tuple{typeof(ImageMagick.free), ImageMagick.MagickWand})
precompile(Tuple{typeof(ImageFiltering.filter_type), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}})
precompile(Tuple{typeof(ImageFiltering.imfilter), Type{ColorTypes.Gray{Float64}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NA{0}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Gray{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float64, 1}}})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{3}, ColorTypes.Gray{Float64}, 1, 3}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.is_context_active), GLFW.Window})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{Float16, 1}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{UInt8}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{typeof(Main.maxabsfinite), Array{ColorTypes.Gray{Float64}, 2}})
precompile(Tuple{typeof(Main.sad), Array{ColorTypes.RGB{Float64}, 2}, Array{ColorTypes.Gray{Float64}, 2}})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(##tutorial_simple_line#370.f), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.sin)}, Int64})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.lines), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.lines), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Makie, Symbol("#callback#44")), Array{Float16, 2}, GeometryTypes.SimpleRectangle{Int64}})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.Texture{Float16, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.context_alive), GLFW.Window})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.Texture{Float16, 2}, Array{Float16, 2}, GeometryTypes.SimpleRectangle{Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{Float32}, Type{ColorTypes.RGBA{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Nothing, AbstractPlotting.Key{:linestyle}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._size), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.opengl_postfix), Type{Int32}})
precompile(Tuple{typeof(Makie.GLAbstraction._ndims), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.ndims), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.sizeof), Type{Int32}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{Int32, Int32}}})
precompile(Tuple{typeof(##tutorial_adding_to_a_scene#371.f1), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(##tutorial_adding_to_a_scene#371.f2), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.exp)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.cos)}, Int64})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{Type{NamedTuple{(:color, :markersize), T} where T<:Tuple}, Tuple{Symbol, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:color, :markersize), Tuple{Symbol, Float64}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :markersize), Tuple{Symbol, Float64}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :markersize), Tuple{Symbol, Float64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :markersize), Tuple{Symbol, Float64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Float64, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Float64}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, AbstractPlotting.Attributes, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, AbstractPlotting.Attributes, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, AbstractPlotting.Attributes, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Float64}}, Base.Colon})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}})
precompile(Tuple{Type{Base.Val{30}}})
precompile(Tuple{typeof(Base.first), Array{Reactive.Signal{T} where T, 1}})
precompile(Tuple{typeof(Base.all), getfield(AbstractPlotting, Symbol("##53#56")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._all), getfield(AbstractPlotting, Symbol("##53#56")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Nothing}}, Type{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base.similar), Array{Reactive.Signal{Nothing}, 1}, Type{Reactive.Signal{T} where T}})
precompile(Tuple{typeof(Base.copyto!), Array{Reactive.Signal{T} where T, 1}, Int64, Array{Reactive.Signal{Nothing}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Reactive.Signal{T} where T, 1}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Int64})
precompile(Tuple{typeof(Base.in), Reactive.Signal{Nothing}, Array{Reactive.Signal{T} where T, 1}})
precompile(Tuple{typeof(Base.in), Reactive.Signal{Nothing}, Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Base.:(==)), AbstractPlotting.Camera2D, AbstractPlotting.EmptyCamera})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.merge!), AbstractPlotting.Attributes, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:color, :marker, :markersize), T} where T<:Tuple}, Tuple{Symbol, Symbol, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:color, :marker, :markersize), Tuple{Symbol, Symbol, Float64}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Symbol, Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :marker, :markersize), Tuple{Symbol, Symbol, Float64}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :marker, :markersize), Tuple{Symbol, Symbol, Float64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :marker, :markersize), Tuple{Symbol, Symbol, Float64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Float64}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Char, Type{Char}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Char}, Char, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}, Reactive.Signal{Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Char}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Char}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Char}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Char})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Char, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Char, Type{Char}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Char}, Char, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}, Reactive.Signal{Char}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{Char}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Char}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int32}, Int32, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Int32}, Reactive.Signal{Char}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize.primitive_uv_offset_width), Char})
precompile(Tuple{getfield(Makie, Symbol("#callback#44")), Array{Float16, 2}, GeometryTypes.SimpleRectangle{Int64}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.Texture{Float16, 2}, Array{Float16, 2}, GeometryTypes.SimpleRectangle{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{Char}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{Char}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{String, String}, Array{Array{String, 1}, 1}}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}, Int64})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Int64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(AbstractPlotting.FRect), Int64, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :limits), T} where T<:Tuple}, Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.lines), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.lines), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.HyperRectangle{2, Float32}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.HyperRectangle{2, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.append_any), GeometryTypes.Vec{2, Float32}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.iterate), GeometryTypes.Vec{2, Float32}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.iterate), Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Tuple{Int64}, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Float32, Float32, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Tuple{Float32, Float32, Int64}})
precompile(Tuple{typeof(Base.iterate), Tuple{Float64}})
precompile(Tuple{typeof(Base.iterate), Tuple{Float64}, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Tuple{Float32, Float32, Float64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Char}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Char}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Char}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Char}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Char}}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Char}}, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int32}}, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(##tutorial_basic_theming#373.f), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Scene, Type{AbstractPlotting.Axis}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{String, String}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Tuple{String, String}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Float64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}})
precompile(Tuple{typeof(AbstractPlotting.draw_titles), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Float32, Float32}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Tuple{Symbol, Float64}, AbstractPlotting.Key{:color}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float32, Float64}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{String, String}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{String, String}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(AbstractPlotting.heatmap), Array{Float64, 2}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.heatmap)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.plot), UnionAll}, Int64})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plottype), IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), IntervalSets.ClosedInterval{Float64}, Type{IntervalSets.ClosedInterval{Float64}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{IntervalSets.ClosedInterval{Float64}}, IntervalSets.ClosedInterval{Float64}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 2}, Type{Array{Float64, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 2}}, Array{Float64, 2}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:colormap, :colorrange, :linewidth, :levels, :fxaa, :interpolate), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Int64, Bool, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:colormap, :colorrange, :linewidth, :levels, :fxaa, :interpolate), Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Int64, Bool, Bool}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:colormap, :colorrange, :linewidth, :levels, :fxaa, :interpolate), Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Int64, Bool, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :levels, :fxaa, :interpolate), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Bool, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Bool, Bool}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.isequal), Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.extrema_nan), Array{Float64, 2}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Float64, Float64}, Type{Tuple{Float64, Float64}}, String, typeof(Base.map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.extrema_nan)}, Int64})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Float64, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 2}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Float64, Float64}}}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Float64, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:heatmap}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{Type{AbstractPlotting.Key{:interpolate}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:interpolate}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 2}, Type{Array{Float64, 2}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 2}}, Array{Float64, 2}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Int64})
precompile(Tuple{Type{AbstractPlotting.Key{:levels}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:levels}, AbstractPlotting.Key{:heatmap}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int64}, Int64, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Int64}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##114#118")), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Makie, Symbol("##114#118")), Array{Float64, 2}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Makie.GLVisualize.Intensity{Float32}, 2}, Type{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, String, typeof(Base.map), getfield(Makie, Symbol("##114#118")), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Array{Makie.GLVisualize.Intensity{Float32}, 2}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##114#118")), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:minfilter,), Tuple{Symbol}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Array{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{Makie.GLVisualize.Intensity{Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{1}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(1,)}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{Makie.GLVisualize.Intensity{Float32}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:minfilter,), Tuple{Symbol}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Makie.GLVisualize.Intensity{Float32}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(Makie, Symbol("##116#120")){Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}}, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{getfield(Makie, Symbol("##116#120")){Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}}, Array{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), Nothing, Type{Nothing}, String, typeof(AbstractPlotting.map_once), getfield(Makie, Symbol("##116#120")){Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}}, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(Makie, Symbol("##116#120")){Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}}, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Tuple{}, Reactive.Signal{Nothing}}, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(Makie, Symbol("##116#120")){Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}}, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Tuple{}, Reactive.Signal{Nothing}}}, Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float64, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLVisualize.extrema2f0)}, Int64})
precompile(Tuple{typeof(Base.sizeof), Type{Makie.GLVisualize.Intensity{Float32}}})
precompile(Tuple{typeof(Base.getindex), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}, Int64})
precompile(Tuple{typeof(Base.minimum), IntervalSets.ClosedInterval{Float64}})
precompile(Tuple{typeof(Base.maximum), IntervalSets.ClosedInterval{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{Type{GeometryTypes.SimpleRectangle{Float32}}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##118#119")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Symbol, Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Nothing, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Nothing}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}}})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##116#117")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s24#79")), Int64, Type{Int64}, Type{typeof(Base.convert)}, Type{Type{GeometryTypes.Face{4, Int64}}}, Type{GeometryTypes.Face{4, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##80#89")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##80#89"))}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Face{4, Int64}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s52#140")), Int64, Type{GeometryTypes.OffsetInteger{-1, UInt32}}, Type{Int64}, Type{typeof(GeometryTypes.decompose)}, Type{Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Type{GeometryTypes.Face{4, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.TextureCoordinate{2, Float32}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.TextureCoordinate{2, Float32}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.fieldnames), Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Array{Nothing, 1}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{Float32}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##22#24")), Tuple{String, String, String}})
precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Nothing, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{2, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Nothing, 1}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##114#115")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{2, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{2, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{Nothing, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.indexbuffer), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Symbol})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Any}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}, Base.Generator{Base.Dict{Symbol, Any}, getfield(Makie.GLAbstraction, Symbol("##50#54"))}, Int64})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String}, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{typeof(Base.get!), getfield(Makie.GLAbstraction, Symbol("##75#80")){Base.Dict{Symbol, Any}, Tuple{String, String, String}}, Base.Dict{Any, Makie.GLAbstraction.GLProgram}, Tuple{Tuple{String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}, String})
precompile(Tuple{typeof(Base.:(==)), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, UInt32})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(Base.vcat), Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{Symbol, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments")), NamedTuple{(:color, :linewidth), Tuple{Symbol, Int64}}, typeof(AbstractPlotting.linesegments), Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments#105")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Symbol, Int64}}}, typeof(AbstractPlotting.linesegments), Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Int64, Symbol})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(Base.sizeof), Type{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Int64}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Int64}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Int64}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float32}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.glsl_variable_access), String, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.randn), Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Random.MersenneTwister, DataType}, Int64})
precompile(Tuple{typeof(Base.sort), Array{Float64, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sort#8")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.sort), Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.barplot), Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.barplot)}, Int64})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), ArgType} where ArgType}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}, Type{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.UnitRange{Int64}, Type{Base.UnitRange{Int64}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Tuple{Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 1}, Type{Array{Float64, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 1}}, Array{Float64, 1}, Tuple{Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:fillto, :color, :colormap, :colorrange, :marker, :width), T} where T<:Tuple}, Tuple{Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, UnionAll, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:fillto, :color, :colormap, :colorrange, :marker, :width), Tuple{Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, UnionAll, Nothing}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, UnionAll, Nothing}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{UnionAll}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##315#316")), Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##315#316")), Base.UnitRange{Int64}, Array{Float64, 1}, Float64, Nothing})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##315#316")), Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##315#316")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), typeof(Base.first), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.first), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.first), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.first), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.last), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), typeof(Base.last), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.last), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.getindex), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}})
precompile(Tuple{Type{NamedTuple{(:marker, :marker_offset, :markersize, :color, :colormap, :colorrange, :transform_marker), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :marker_offset, :markersize, :color, :colormap, :colorrange, :transform_marker), Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :marker_offset, :markersize, :color, :colormap, :colorrange, :transform_marker), Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.:(==)), GeometryTypes.Vec{2, Float32}, AbstractPlotting.Automatic})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Array{Float32, 1}, Array{Float32, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.first), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Int64, Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Float32, Float32, Int64}, Tuple{Float32, Float32, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float32, Float32, Int64}, Tuple{Float32, Float32, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float32, Float32, Int64}, Tuple{Float32, Float32, Int64}}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Float32, Float32, Int64}, Tuple{Float32, Float32, Int64}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.UnitRange{Int64}}}, Tuple{Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{2, Float32}, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(AbstractPlotting.to_spritemarker), Type{GeometryTypes.HyperRectangle{N, T} where T where N}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Bool}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.HyperRectangle{2, Float32}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int32}, Int32, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Int32}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int32}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base.map), getfield(##test_heatmap___image_overlap#377, Symbol("##1#2")), Array{Float64, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##test_heatmap___image_overlap#377, Symbol("##1#2")), Array{Float64, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 2}, Base.Generator{Array{Float64, 2}, getfield(##test_heatmap___image_overlap#377, Symbol("##1#2"))}})
precompile(Tuple{typeof(AbstractPlotting.image!), Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.image!)}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##image!#82")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.image!), Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), IntervalSets.ClosedInterval{Float64}, Type{IntervalSets.ClosedInterval{Float64}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{IntervalSets.ClosedInterval{Float64}}, IntervalSets.ClosedInterval{Float64}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 2}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:colormap, :colorrange, :fxaa), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Automatic, Bool}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:colormap, :colorrange, :fxaa), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Automatic, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Automatic, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Automatic, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Array{ColorTypes.RGBA{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.identity), Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Base.Colon})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.pop!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.vec2color)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{Type{AbstractPlotting.Key{:image}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:image}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 2}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}}, AbstractPlotting.Attributes, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Float64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:image}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.to_color)}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:image}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Makie.to_range), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Makie.to_range), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Makie.to_range), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.to_range)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##62#65"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##63#66"))}, Int64})
precompile(Tuple{typeof(Base.get), getfield(Makie.GLVisualize, Symbol("##61#64")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, String}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##63#66")), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##63#66")), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.SimpleRectangle{Float32}, Type{GeometryTypes.SimpleRectangle{Float32}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##63#66")), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.SimpleRectangle{Float32}}, GeometryTypes.SimpleRectangle{Float32}, Tuple{Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##63#66")), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}, Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, String, typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), String})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, Nothing})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.escape_string), String, Tuple{Char}})
precompile(Tuple{Type{AbstractPlotting.Scene}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Float64})
precompile(Tuple{getfield(##interaction#378, Symbol("##1#2")), Float64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##interaction#378.f)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{Float64, Float64}, 1}, Type{Array{Tuple{Float64, Float64}, 1}}, String, typeof(Base.map), getfield(##interaction#378, Symbol("##1#2")), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{Float64, Float64}, 1}}, Array{Tuple{Float64, Float64}, 1}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##interaction#378, Symbol("##1#2")), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{Float64, Float64}, 1}, Type{Array{Tuple{Float64, Float64}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{Float64, Float64}, 1}}, Array{Tuple{Float64, Float64}, 1}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.lastindex), AbstractPlotting.Scene})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Scene, Int64})
precompile(Tuple{getfield(##interaction#378, Symbol("##3#4")), Float64})
precompile(Tuple{typeof(Base.map), getfield(##interaction#378, Symbol("##5#7")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(##interaction#378, Symbol("##5#7")), Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##interaction#378, Symbol("##6#8"))}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Type{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, String, typeof(Base.map), getfield(##interaction#378, Symbol("##5#7")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##interaction#378, Symbol("##5#7")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Scene, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Type{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Base.Colon})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Makie.record), getfield(##interaction#378, Symbol("##9#10")), AbstractPlotting.Scene, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Float64}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.glsl_variable_access), String, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.arg_gen), Int64, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.isiterable), Type{Int64}})
precompile(Tuple{typeof(Base.has_non_default_iterate), Type{Int64}})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}, Int64})
precompile(Tuple{getfield(Base, Symbol("##open#508")), Bool, Bool, typeof(Base.open), Base.Cmd, Base.DevNullStream})
precompile(Tuple{typeof(Base._spawn), Base.Cmd, Tuple{Base.Pipe, Base.DevNullStream, Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.Pipe, Base.DevNullStream, Base.TTY}})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Process, Int64})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Int64, Base.Iterators.Pairs{Symbol, Base.StackTraces.StackFrame, Tuple{Symbol}, NamedTuple{(:caller,), Tuple{Base.StackTraces.StackFrame}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame})
precompile(Tuple{typeof(Base.with_output_color), getfield(Base.StackTraces, Symbol("##10#11")){Base.StackTraces.StackFrame, String}, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), getfield(Base.StackTraces, Symbol("##10#11")){Base.StackTraces.StackFrame, String}, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(Base.StackTraces, Symbol("##10#11")){Base.StackTraces.StackFrame, String}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Base.Process}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Process, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Float64}, Float64})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##interaction#378, Symbol("##1#2")), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##interaction#378, Symbol("##3#4")), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##interaction#378, Symbol("##5#7")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLVisualize.Shape}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Int32}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLVisualize.Shape}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLVisualize.Shape}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float32, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float32}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.length), Reactive.Signal{Int64}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{UInt8}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{UInt8}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Bool}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{Int32}, Tuple{Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Float32}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Type{Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{UInt8}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Type{Float32}}})
precompile(Tuple{typeof(Base.write), Base.Pipe, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.wait), Base.Process})
precompile(Tuple{getfield(Base, Symbol("##run#509")), Bool, typeof(Base.run), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.Libc.RawFD, Base.Libc.RawFD, Base.Libc.RawFD}})

precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##barplot")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.barplot), Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:marker, :marker_offset, :markersize, :color, :colormap, :colorrange, :transform_marker), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :marker_offset, :markersize, :color, :colormap, :colorrange, :transform_marker), Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :marker_offset, :markersize, :color, :colormap, :colorrange, :transform_marker), Tuple{Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.barplot)(), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.isequal), Base.Dict{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), typeof(Base.:(^)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{typeof(Base.:(^))}})
precompile(Tuple{typeof(Base.Broadcast.result_style), Base.Broadcast.DefaultArrayStyle{0}, Base.Broadcast.DefaultArrayStyle{1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.literal_pow), Base.RefValue{typeof(Base.:(^))}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.RefValue{Base.Val{2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Val{2}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(^))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.literal_pow)}, Int64})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}})
precompile(Tuple{typeof(Base.adjoint), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), typeof(Base.:(^)), LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.Val{2}})
precompile(Tuple{typeof(Base.Broadcast.result_style), Base.Broadcast.DefaultArrayStyle{0}, Base.Broadcast.DefaultArrayStyle{2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{2}, typeof(Base.literal_pow), Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.exp), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}}}}})
precompile(Tuple{Type{NamedTuple{(:levels, :linewidth), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour")), NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(Makie, Symbol("##contour#1")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 2}, Type{Array{Float64, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 2}}, Array{Float64, 2}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:light, :alpha, :visible, :transformation, :linewidth, :model), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}})
precompile(Tuple{Type{NamedTuple{(:color, :colorrange, :levels, :linewidth, :fillrange), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Float64, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:color, :colorrange, :levels, :linewidth, :fillrange), Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Float64, Bool}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:color, :colorrange, :levels, :linewidth, :fillrange), Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Float64, Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:light, :alpha, :visible, :transformation, :linewidth, :model, :color, :colorrange, :levels, :fillrange), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Bool}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{T} where T, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{DataType, DataType, DataType}, Int64})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.append_any), Float64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Float64}, Type{Float64}})
precompile(Tuple{typeof(Base.vect), UInt8, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}})
precompile(Tuple{typeof(Makie.contourlines), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Contour.ContourCollection{Contour.ContourLevel{Float64}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, String, typeof(Base.map), getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.first), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.first), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.first), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.first), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.last), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), typeof(Base.last), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.last), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Type{Reactive.Signal{Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Symbol, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.first), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Float64, Float64, Int64}, Tuple{Float64, Float64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64, Int64}, Tuple{Float64, Float64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64, Int64}, Tuple{Float64, Float64, Int64}}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Float64, Float64, Int64}, Tuple{Float64, Float64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(ImageFiltering.imgradients), Array{Float64, 2}, typeof(ImageFiltering.KernelFactors.ando3)})
precompile(Tuple{typeof(ImageFiltering._imgradients), Tuple{}, Array{Float64, 2}, typeof(ImageFiltering.KernelFactors.ando3), Tuple{Bool, Bool}, String})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.IteratorsMD.CartesianIndex{0}, Int64}, Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Char}})
precompile(Tuple{getfield(ImageFiltering, Symbol("##65#threadsfor_fun#29")){ComputationalResources.CPU1{ImageFiltering.Algorithm.FIRTiled{2}}, Array{Float64, 2}, OffsetArrays.OffsetArray{Float64, 2, Array{Float64, 2}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}, ImageFiltering.NoPad{ImageFiltering.Pad{0}}, Array{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, 1}, Array{Array{Float64, 2}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 2}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:arrowsize,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##arrows!")), NamedTuple{(:arrowsize,), Tuple{Float64}}, typeof(AbstractPlotting.arrows!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##arrows!#230")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:arrowsize,), Tuple{Float64}}}, typeof(AbstractPlotting.arrows!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{AbstractPlotting.Automatic, Nothing, Symbol, Int64, Float64, Nothing, GeometryTypes.Vec{3, Float32}, Bool, Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{AbstractPlotting.Automatic}, Type{Nothing}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{AbstractPlotting.Automatic, Nothing}}, Type{Symbol}})
precompile(Tuple{typeof(Base.get!), AbstractPlotting.Attributes, Symbol, Reactive.Signal{Any}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##233#237")){2, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##233#237")){2, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Float32})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(2,)}, StaticArrays.Size{()}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Type{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##233#237")){2, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##233#237")){2, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth, :linestyle), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:color, :linewidth, :linestyle), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Reactive.Signal{Any}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Type{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##235#239")), Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##235#239")), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##235#239")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##236#240")){2}, AbstractPlotting.Automatic})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Char, Type{Char}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##236#240")){2}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Char}, Char, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##236#240")){2}, Reactive.Signal{Char}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :color, :rotations), T} where T<:Tuple}, Tuple{Reactive.Signal{Char}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :markersize, :color, :rotations), Tuple{Reactive.Signal{Char}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Char}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Char}}, Type{Reactive.Signal{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :color, :rotations), Tuple{Reactive.Signal{Char}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Char}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Char}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Char}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Char}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Char}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Char}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Char}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Char}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{2, Float32}, 1}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#357")), Tuple{Int64}, Type{typeof(StaticArrays._vecdot)}, Type{StaticArrays.Size{(3,)}}, Type{GeometryTypes.Vec{3, Float32}}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.abs), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}}}, Int64})
precompile(Tuple{Type{AbstractPlotting.Quaternion{T} where T}, Float32, Float32, Float32, Float32})
precompile(Tuple{typeof(LinearAlgebra.normalize), AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.to_rotation), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractPlotting.Quaternion{Float32}, 1}, AbstractPlotting.Quaternion{Float32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{AbstractPlotting.Quaternion{Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.to_rotation), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##98#100")), Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Bool, Type{Bool}, String, typeof(Base.map), getfield(Makie, Symbol("##98#100")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Bool}, Bool, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##98#100")), Reactive.Signal{Bool}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.logo)})
precompile(Tuple{typeof(Base.getindex), Tuple{Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}, String}, Int64})
precompile(Tuple{typeof(FileIO.hasmagic), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{Type{FileIO.Stream{FileIO.DataFormat{:PNG}, Base.IOStream}}, Base.IOStream, String})
precompile(Tuple{typeof(FileIO.file!), FileIO.Stream{FileIO.DataFormat{:PNG}, Base.IOStream}})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(ImageCore.samesize), Type{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("##32#33")){FixedPointNumbers.Normed{UInt8, 8}}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{getfield(ImageMagick, Symbol("##exportimagepixels!#17")), Int64, Int64, typeof(ImageMagick.exportimagepixels!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("##32#33")){FixedPointNumbers.Normed{UInt8, 8}}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(ImageMagick.pd), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{NamedTuple{(:scale_plot,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##image")), NamedTuple{(:scale_plot,), Tuple{Bool}}, typeof(AbstractPlotting.image), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:scale_plot,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), IntervalSets.ClosedInterval{Float64}, Type{IntervalSets.ClosedInterval{Float64}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{IntervalSets.ClosedInterval{Float64}}, IntervalSets.ClosedInterval{Float64}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Bool}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Reactive.Signal{Nothing}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Reactive.Signal{Nothing}}}, Array{Reactive.Signal{T} where T, 1}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Bool}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Bool}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##image")), NamedTuple{(:scale_plot,), Tuple{Bool}}, typeof(AbstractPlotting.image), Array{Float64, 2}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Base.Colon})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:scale_plot,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.vbox), AbstractPlotting.Scene, AbstractPlotting.Scene})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.vbox)}, Int64})
precompile(Tuple{typeof(Base.vect), AbstractPlotting.Scene, AbstractPlotting.Scene})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##vbox#347")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.vbox), Array{AbstractPlotting.Scene, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Scene, Type{AbstractPlotting.Scene}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##348#351")){Int64, Int64, AbstractPlotting.Scene}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{AbstractPlotting.Scene}, AbstractPlotting.Scene, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##348#351")){Int64, Int64, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{AbstractPlotting.Scene}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##349#352")){AbstractPlotting.Scene, AbstractPlotting.Scene}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Float64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Scene}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Bool}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Bool})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Bool}, Bool})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Base.Set{AbstractPlotting.Mouse.Button}, typeof(Reactive.print_error)})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Base.Set{AbstractPlotting.Mouse.Button}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Base.Set{AbstractPlotting.Mouse.Button}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}, Base.Colon})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Mouse.DragEnum, typeof(Reactive.print_error)})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Mouse.DragEnum, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Mouse.DragEnum, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Base.Set{AbstractPlotting.Keyboard.Button}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Base.Set{AbstractPlotting.Keyboard.Button}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Base.Set{AbstractPlotting.Keyboard.Button}, typeof(Reactive.print_error)})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Base.Set{AbstractPlotting.Keyboard.Button}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Base.Set{AbstractPlotting.Keyboard.Button}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Array{Char, 1}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Array{Char, 1}}, Array{Char, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Array{Char, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Char, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Char, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Char, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##foreach#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.foreach), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Array{String, 1}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Array{String, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{String, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{String, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Array{Char, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Array{String, 1}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##348#351")){Int64, Int64, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Scene}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Bool}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Array{Char, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:image}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 2}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 2}}}}, AbstractPlotting.Attributes, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{Float64, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Float64})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 2}}}, 1}, Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 2}}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.vec2color), Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.vec2color), Array{Float64, 2}, Array{ColorTypes.RGBA{Float32}, 1}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 2}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, String, typeof(Base.map), typeof(Makie.vec2color), Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.vec2color), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Float64, Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :strokecolor, :strokewidth), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly")), NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}, typeof(AbstractPlotting.poly), Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Float64, 1}}, Type{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(AbstractPlotting, Symbol("##246#247"))}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##poly#215")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}}, typeof(AbstractPlotting.poly), Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), getfield(AbstractPlotting, Symbol("##166#168")){Array{Float64, 2}}, Base.UnitRange{Int64}, Base.Val{2}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), getfield(AbstractPlotting, Symbol("##160#162")){Array{Int64, 2}}, Base.UnitRange{Int64}, Base.Val{3}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Val{3}}, Int64})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Point{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Array{Nothing, 1}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s52#122")), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Type{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64})
precompile(Tuple{typeof(GeometryTypes.isvoid), Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isvoid), Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isvoid), Type{Array{GeometryTypes.Normal{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isvoid), Type{Array{Nothing, 1}}})
precompile(Tuple{Type{Array{Nothing, 1}}})
precompile(Tuple{Type{Nothing}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s52#103")), Int64, Type{typeof(Base.getindex)}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(LinearAlgebra.normalize)}, Int64})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(GeometryTypes.normals), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Type{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Normal{3, Float32}}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(LinearAlgebra.normalize), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{GeometryTypes.Point{3, Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Normal{3, Float32}}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(LinearAlgebra.normalize), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}})
precompile(Tuple{typeof(AbstractPlotting.plottype), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:color, :visible, :strokecolor, :colormap, :colorrange, :strokewidth, :linestyle), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :visible, :strokecolor, :colormap, :colorrange, :strokewidth, :linestyle), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Nothing}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Nothing}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{Type{Reactive.Signal{Any}}, ColorTypes.RGBA{Float32}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{Type{NamedTuple{(:color, :colormap, :colorrange, :shading, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh!")), NamedTuple{(:color, :colormap, :colorrange, :shading, :visible), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Reactive.Signal{Any}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{Float64, 1}}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh!#111")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :colormap, :colorrange, :shading, :visible), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:fxaa, :interpolate, :shading, :colormap, :colorrange), T} where T<:Tuple}, Tuple{Bool, Bool, Bool, Reactive.Signal{Any}, AbstractPlotting.Automatic}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:fxaa, :interpolate, :shading, :colormap, :colorrange), Tuple{Bool, Bool, Bool, Reactive.Signal{Any}, AbstractPlotting.Automatic}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:fxaa, :interpolate, :shading, :colormap, :colorrange), Tuple{Bool, Bool, Bool, Reactive.Signal{Any}, AbstractPlotting.Automatic}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :fxaa, :interpolate, :shading, :colormap, :colorrange), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Bool, Bool, Reactive.Signal{Any}, AbstractPlotting.Automatic}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Bool, Bool, Reactive.Signal{Any}, AbstractPlotting.Automatic}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Bool}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:color, :linestyle, :linewidth, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##wireframe!")), NamedTuple{(:color, :linestyle, :linewidth, :visible), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.wireframe!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Tuple{Symbol, Float64}}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##248#249")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s52#141")), Int64, Type{GeometryTypes.OffsetInteger{-1, UInt32}}, Type{GeometryTypes.OffsetInteger{-1, UInt32}}, Type{typeof(GeometryTypes.decompose)}, Type{Type{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base.view), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##248#249")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##248#249")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Type{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Int64, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Int64, 2}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Int64, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:mesh}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:interpolate}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Bool}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{Type{AbstractPlotting.Key{:shading}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:shading}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, Array{ColorTypes.RGBA{Float32}, 1}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##128#129")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}, Array{Nothing, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##22#24")), Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{String, String, String, String}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{ColorTypes.RGBA{Float32}, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Point{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Normal{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Array{ColorTypes.RGBA{Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{ColorTypes.RGBA{Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{3, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{3, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Normal{3, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Normal{3, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}, Symbol})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Int64, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String}, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(Makie.GLAbstraction, Symbol("##75#80")){Base.Dict{Symbol, Any}, Tuple{String, String, String, String}}, Base.Dict{Any, Makie.GLAbstraction.GLProgram}, Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}, String})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Float64}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.parent), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.parent), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Type{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, String, typeof(Base.map), typeof(Makie.index1D), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.index1D), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Makie.GLAbstraction.Style{:linesegment}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}, Symbol})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base.:(==)), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, UInt32})
precompile(Tuple{Type{NamedTuple{(:color, :shading), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color, :shading), Tuple{Array{Float64, 1}, Bool}}, typeof(AbstractPlotting.mesh), Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Float64, 1}}, Type{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :shading), Tuple{Array{Float64, 1}, Bool}}}, typeof(AbstractPlotting.mesh), Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color, :shading), Tuple{Array{Float64, 1}, Bool}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :shading), Tuple{Array{Float64, 1}, Bool}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :shading), Tuple{Array{Float64, 1}, Bool}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :shading), Tuple{Array{Float64, 1}, Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Int64, 2}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{Tuple{Symbol, Float64}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##wireframe!")), NamedTuple{(:color, :linewidth), Tuple{Tuple{Symbol, Float64}, Int64}}, typeof(AbstractPlotting.wireframe!), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Symbol, Float64}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Symbol, Float64}}, Type{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##wireframe!#243")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Tuple{Symbol, Float64}, Int64}}}, typeof(AbstractPlotting.wireframe!), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{NamedTuple{(:color, :shading), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color, :shading), Tuple{Array{Symbol, 1}, Bool}}, typeof(AbstractPlotting.mesh), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Symbol, 1}}, Type{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :shading), Tuple{Array{Symbol, 1}, Bool}}}, typeof(AbstractPlotting.mesh), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{GeometryTypes.OffsetInteger{-1, UInt32}, GeometryTypes.OffsetInteger{-1, UInt32}, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{Symbol, 1}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Symbol, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Symbol, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Symbol, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Symbol, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Symbol, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.convert_attribute), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{AbstractPlotting.Key{:color}}}}, Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float32}, 1}, ColorTypes.RGBA{Float32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{ColorTypes.RGBA{Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.convert_attribute), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{AbstractPlotting.Key{:color}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{Type{NamedTuple{(:interpolate,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##heatmap")), NamedTuple{(:interpolate,), Tuple{Bool}}, typeof(AbstractPlotting.heatmap), Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:interpolate,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 2}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(AbstractPlotting.campixel), AbstractPlotting.Scene})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Reactive.Signal{T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##199#200")){AbstractPlotting.Scene}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(GeometryTypes.widths), AbstractPlotting.Scene})
precompile(Tuple{Type{GeometryTypes.Vec{S, T} where T where S}, Float64, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{S, T} where T where S}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), GeometryTypes.Vec{2, Int64}, GeometryTypes.Vec{2, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{2, Int64}, GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{GeometryTypes.Vec{2, Int64}, GeometryTypes.Vec{2, Float64}}}})
precompile(Tuple{Type{NamedTuple{(:position, :align, :raw), T} where T<:Tuple}, Tuple{GeometryTypes.Vec{2, Float64}, Tuple{Symbol, Symbol}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:position, :align, :raw), Tuple{GeometryTypes.Vec{2, Float64}, Tuple{Symbol, Symbol}, Bool}}, typeof(AbstractPlotting.text!), AbstractPlotting.Scene, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{GeometryTypes.Vec{2, Float64}, Tuple{Symbol, Symbol}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{GeometryTypes.Vec{2, Float64}}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##60#61")), AbstractPlotting.Scene})
precompile(Tuple{typeof(Base.close), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Float64}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Bool}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Tuple{Float64, Float64}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Array{Char, 1}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Array{String, 1}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Bool})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.close), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Bool})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Tuple{Bool, Bool, Bool}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Bool})
precompile(Tuple{typeof(Base.close), Reactive.Signal{Any}, Bool})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.close), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Bool})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.Vec{2, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Tuple{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.Vec{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.identity), String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, String, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Symbol, Symbol}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{String}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:textsize}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), String, AbstractPlotting.Key{:font}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Symbol}, AbstractPlotting.Key{:align}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:rotation}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, GeometryTypes.Vec{2, Float64}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32}, Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, GeometryTypes.Vec{2, Float64}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(AbstractPlotting.calc_position), GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, AbstractPlotting.TextureAtlas, Char, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(AbstractPlotting.to_ndim), Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Point{2, Float32}, Float64})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Vec{2, Float64}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Symbol, Symbol}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Vec{2, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Symbol, Symbol}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float64}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Symbol, Symbol}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Char, Array{Ptr{FreeType.FT_FaceRec}, 1}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{2, Float64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Symbol, Symbol}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Bool}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{GeometryTypes.Vec{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Tuple{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, GeometryTypes.Vec{2, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Vec{2, Float64}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{GeometryTypes.Point{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, String})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), String, AbstractPlotting.Key{:font}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Ptr{FreeType.FT_FaceRec}, 1}, Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Symbol}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Symbol}, AbstractPlotting.Key{:align}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:textsize}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:rotation}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Quaternion{Float64}, Type{AbstractPlotting.Quaternion{Float64}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{AbstractPlotting.Quaternion{Float64}}, AbstractPlotting.Quaternion{Float64}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Makie.to_gl_text), String, GeometryTypes.Point{2, Float32}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.glyph_uv_width!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.glyph_scale!)}, Int64})
precompile(Tuple{typeof(AbstractPlotting.to_ndim), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Vec{4, Float32}, Float32})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{AbstractPlotting.TextureAtlas}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, String, typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}, Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.getindex), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float64}, 1}, Type{Array{GeometryTypes.Vec{2, Float64}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float64}, 1}}, Array{GeometryTypes.Vec{2, Float64}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{Type{NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("#kw##visualize")), NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{ColorTypes.RGBA{Float32}}}, Type{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{ColorTypes.RGBA{Float32}}}, Type{Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##visualize#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}, Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Vec{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Float32}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Float32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.map)}, Int64})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##gl_convert#95")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}}, Type{GeometryTypes.Vec{2, Float32}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.Vec{2, Float32}}, Array{GeometryTypes.Vec{2, Float64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{GeometryTypes.Vec{2, Float32}}, Array{GeometryTypes.Vec{2, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{GeometryTypes.Vec{2, Float64}, 1}, Base.Generator{Array{GeometryTypes.Vec{2, Float64}, 1}, Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.map), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:color, :strokecolor, :strokewidth), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Symbol, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly")), NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Symbol, 1}, Symbol, Int64}}, typeof(AbstractPlotting.poly), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Symbol, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Symbol, 1}}, Type{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##poly#215")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :strokecolor, :strokewidth), Tuple{Array{Symbol, 1}, Symbol, Int64}}}, typeof(AbstractPlotting.poly), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##220#222")), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{Type{IterTools.Partition{Array{GeometryTypes.Point{2, Float32}, 1}, 2}}, Array{GeometryTypes.Point{2, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), IterTools.Partition{Array{GeometryTypes.Point{2, Float32}, 1}, 2}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{IterTools.Partition{Array{GeometryTypes.Point{2, Float32}, 1}, 2}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{IterTools.Partition{Array{GeometryTypes.Point{2, Float32}, 1}, 2}}, Tuple{Int64, Tuple{Int64, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(GeometryTypes.polygon2faces), Array{GeometryTypes.Point{2, Float32}, 1}, Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base.getindex), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#21")), Int64, Float32, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Base.Broadcast.Extruded{Array{Array{GeometryTypes.Point{2, Float32}, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Base.Broadcast.Extruded{Array{Array{GeometryTypes.Point{2, Float32}, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, 1}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s16#83")), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Type{Int64}, Tuple{Int64}, Type{typeof(StaticArrays.similar_type)}, Type{Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Type{Type{Int64}}, Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{typeof(Base.merge), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.getindex), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##110#112")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Nothing, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Nothing, 1}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##111#113")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(!=)), Array{Nothing, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##220#222")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##220#222")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{NamedTuple{(:color, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{Symbol, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh!")), NamedTuple{(:color, :visible), Tuple{Reactive.Signal{Array{Symbol, 1}}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{Symbol, 1}}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{Symbol, 1}}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh!#111")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :visible), Tuple{Reactive.Signal{Array{Symbol, 1}}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##221#223")), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{NamedTuple{(:visible, :color, :linestyle, :linewidth), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:visible, :color, :linestyle, :linewidth), Tuple{Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{Reactive.Signal{Symbol}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:visible, :color, :linestyle, :linewidth), Tuple{Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Int64}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Point{2, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Point{2, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Symbol, Symbol}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{String}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Symbol, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}, String})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._size), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction._ndims), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.ndims), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.rand), Type{ColorTypes.RGBA{Float32}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:show_axis,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##image")), NamedTuple{(:show_axis,), Tuple{Bool}}, typeof(AbstractPlotting.image), Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:show_axis,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.IRect), Int64, Int64, Int64, Int64})
precompile(Tuple{Type{AbstractPlotting.Scene}, AbstractPlotting.Scene, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:markersize,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:markersize,), Tuple{Int64}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Int64}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize,), Tuple{Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##133#135")), Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#74")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##current_default_theme#72")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}}, typeof(AbstractPlotting.current_default_theme)})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Int64})
precompile(Tuple{Type{GeometryTypes.HyperSphere{2, T} where T}, GeometryTypes.Point{2, Float32}, Float32})
precompile(Tuple{Type{GeometryTypes.HyperSphere{N, T} where T where N}, GeometryTypes.Point{2, Float32}, Float32})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Float32, Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Float32, Float32}, Int64})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Float32, Float32})
precompile(Tuple{typeof(Base.:(+)), GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(Base.similar), Base.StepRangeLen{Float32, Float64, Float64}, Type{GeometryTypes.Point{2, Float32}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{GeometryTypes.Point{2, Float32}, 1}, GeometryTypes.Point{2, Float32}, Base.Generator{Base.StepRangeLen{Float32, Float64, Float64}, getfield(GeometryTypes, Symbol("##155#156")){DataType, GeometryTypes.HyperSphere{2, Float32}, Float32}}, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :strokewidth, :strokecolor), T} where T<:Tuple}, Tuple{Symbol, Int64, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly!")), NamedTuple{(:color, :strokewidth, :strokecolor), Tuple{Symbol, Int64, Symbol}}, typeof(AbstractPlotting.poly!), AbstractPlotting.Scene, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64, Symbol}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{Type{GeometryTypes.Simplex{2, T} where T}, Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(GeometryTypes.intersects), GeometryTypes.Simplex{2, GeometryTypes.Point{2, Float32}}, GeometryTypes.Simplex{2, GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{2, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{2, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{2, 2}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{2, 2}}})
precompile(Tuple{Type{StaticArrays.Size{(2, 2)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(2, 2)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(2, 2)}})
precompile(Tuple{Type{NamedTuple{(:color, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh!")), NamedTuple{(:color, :visible), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Symbol}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh!#111")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :visible), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.vect), GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly!")), NamedTuple{(:color, :strokewidth, :strokecolor), Tuple{Symbol, Int64, Symbol}}, typeof(AbstractPlotting.poly!), AbstractPlotting.Scene, Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.HyperSphere{2, Float32}, 1}, Type{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Array{GeometryTypes.HyperSphere{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##224#226")), Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s18#27")), Type{GeometryTypes.Point{S, T} where T where S}, Type{Type{GeometryTypes.Point{S, T} where T where S}}, Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(GeometryTypes.size_or), Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##224#226")), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##224#226")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##225#227")), Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(GeometryTypes.widths)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), T} where T<:Tuple}, Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{DataType}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{DataType}, Type{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Reactive.Signal{Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}}, Type{GeometryTypes.HyperSphere{2, Float32}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.Vec{2, Float32}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##polygons#390, Symbol("##1#2")), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{Int64, Int64}, getfield(##polygons#390, Symbol("##1#2"))}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly!")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.poly!), AbstractPlotting.Scene, Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{GeometryTypes.HyperSphere{2, Float32}, 1}})
precompile(Tuple{typeof(Base.identity), ColorTypes.RGBA{Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), T} where T<:Tuple}, Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##polygons#390, Symbol("##3#4")), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{Int64, Int64}, getfield(##polygons#390, Symbol("##3#4"))}})
precompile(Tuple{Type{NamedTuple{(:strokewidth, :strokecolor), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly!")), NamedTuple{(:strokewidth, :strokecolor), Tuple{Int64, Symbol}}, typeof(AbstractPlotting.poly!), AbstractPlotting.Scene, Array{GeometryTypes.SimpleRectangle{Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Symbol}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.SimpleRectangle{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{GeometryTypes.SimpleRectangle{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.SimpleRectangle{Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Type{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.SimpleRectangle{Float32}, 1}, Type{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Array{GeometryTypes.SimpleRectangle{Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, Base.Colon})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##224#226")), Array{GeometryTypes.SimpleRectangle{Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##224#226")), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##224#226")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##225#227")), Array{GeometryTypes.SimpleRectangle{Float32}, 1}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), T} where T<:Tuple}, Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{DataType}, Type{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}}, Type{GeometryTypes.SimpleRectangle{Float32}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##polygons#390, Symbol("##5#6")), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{Int64, Int64}, getfield(##polygons#390, Symbol("##5#6"))}})
precompile(Tuple{Type{NamedTuple{(:linewidth, :color), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:linewidth, :color), Tuple{Int64, Symbol}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Scene, Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, ColorTypes.RGBA{Float32}, Nothing, Nothing})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}, Base.Colon})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Symbol}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:strokecolor}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:strokewidth}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.to_spritemarker), Type{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{2, Float32}, Type{GeometryTypes.HyperSphere{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{2, Float32}}, GeometryTypes.HyperSphere{2, Float32}, Tuple{Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:strokecolor}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{2, Float32}, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.to_spritemarker), Type{GeometryTypes.SimpleRectangle{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{2, Float32}, Type{GeometryTypes.HyperRectangle{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), getfield(##contour_function#391, Symbol("##1#2")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##contour_function#391, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##contour_function#391, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##contour_function#391, Symbol("##1#2"))}, Int64})
precompile(Tuple{Type{NamedTuple{(:levels, :color, :linewidth), T} where T<:Tuple}, Tuple{Int64, Symbol, Int64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour")), NamedTuple{(:levels, :color, :linewidth), Tuple{Int64, Symbol, Int64}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol, Int64}}})
precompile(Tuple{getfield(Makie, Symbol("##contour#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:levels, :color, :linewidth), Tuple{Int64, Symbol, Int64}}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:levels, :color, :linewidth), Tuple{Int64, Symbol, Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:levels, :color, :linewidth), Tuple{Int64, Symbol, Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:levels, :color, :linewidth), Tuple{Int64, Symbol, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:levels, :color, :linewidth), Tuple{Int64, Symbol, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}, Tuple{Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Float64})
precompile(Tuple{Type{NamedTuple{(:levels,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour")), NamedTuple{(:levels,), Tuple{Int64}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(Makie, Symbol("##contour#1")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:levels,), Tuple{Int64}}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:levels,), Tuple{Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:levels,), Tuple{Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:levels,), Tuple{Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:levels,), Tuple{Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Type{Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.escape_string), String, Tuple{Char}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##animated_scatter#394, Symbol("##1#2")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##animated_scatter#394, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 2}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Base.Colon, Int64})
precompile(Tuple{typeof(AbstractPlotting.FRect), Float64, Float64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:markersize, :limits), T} where T<:Tuple}, Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize, :limits), Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :limits), Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize, :limits), Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :limits), Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize, :limits), Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :limits), Tuple{Int64, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.HyperRectangle{2, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Makie.record), getfield(##animated_scatter#394, Symbol("##3#4")), AbstractPlotting.Scene, String, Array{Array{Float64, 2}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{Float64, 1}}, Array{Float64, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float64, 1}}, Array{Float64, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float64, 1}}, Array{Float64, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Symbol}}, Base.Colon})
precompile(Tuple{Type{NamedTuple{(:position, :align, :textsize, :font), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text")), NamedTuple{(:position, :align, :textsize, :font), Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String}}, typeof(AbstractPlotting.text), String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Int64, Int64}}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any}}, Type{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##text#125")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:position, :align, :textsize, :font), Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String}}}, typeof(AbstractPlotting.text), String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, String, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{String}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.text_limits), Tuple{Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Tuple{Int64, Int64}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Tuple{Int64, Int64}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{String}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Int64, Int64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Int64, Int64}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{GeometryTypes.Point{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{String}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Ptr{FreeType.FT_FaceRec}, 1}, Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{String}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Tuple{Int64, Int64}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.push!), Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:position, :textsize, :rotation, :align), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64}, Int64, Float64, Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:position, :textsize, :rotation, :align), Tuple{Tuple{Float64, Float64}, Int64, Float64, Tuple{Symbol, Symbol}}}, typeof(AbstractPlotting.text!), AbstractPlotting.Scene, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64}, Int64, Float64, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Float64, Float64}}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.text_limits), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Point{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Tuple{Float64, Float64}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Tuple{Float64, Float64}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:markersize,), Tuple{Int64}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{GeometryTypes.Point{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Quaternion{Float64}, Type{AbstractPlotting.Quaternion{Float64}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{AbstractPlotting.Quaternion{Float64}}, AbstractPlotting.Quaternion{Float64}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.is_context_active), GLFW.Window})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##647#648")){String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##643#644")){String}, String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##645#646")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##651#652")){String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, String, String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, String, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##649#650")){String, Base.UUID, String}, String})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.PkgId, Base.PkgId})
precompile(Tuple{typeof(RDatasets.dataset), String, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Char, Char, String, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Char}})
precompile(Tuple{typeof(Base.typejoin), Type{Union{}}, Type{Char}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Char}, Type{Char}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Char}, Type{String}})
precompile(Tuple{typeof(Base.getproperty), Core.TypeName, Symbol})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Compiler.vect), Int64})
precompile(Tuple{Type{Core.Compiler.BasicBlock}, Core.Compiler.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Dates, Symbol("##s564#35")), Type{Dates.Date}, Type{typeof(Dates.tryparsenext_internal)}, Type{Type{Dates.Date}}, Type{String}, Type{Int64}, Type{Int64}, Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}, Type{Bool}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Dates.genvar), Type{Dates.Year}})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Array{Symbol, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Tuple{DataType, DataType, DataType}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("##36#37")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("##36#37"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("##36#37"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Dates, Symbol("##s565#32")), Type{typeof(Dates.tryparsenext_core)}, Type{String}, Type{Int64}, Type{Int64}, Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}, Type{Bool}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{LineNumberNode}, Int64})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type{T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type{T} where T, 1}, getfield(Dates, Symbol("##33#34"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Symbol, Symbol, Symbol})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:append,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reference,), Tuple{Array{UInt8, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#13")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), String})
precompile(Tuple{typeof(Base.getindex), Tuple{typeof(FileIO.detect_rdata), Array{String, 1}}, Int64})
precompile(Tuple{typeof(FileIO.hasmagic), typeof(FileIO.detect_rdata)})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:RData}}}, String})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:RData}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:RData}}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, Type{T} where T}, Type{Dates.TimeZone}, Char})
precompile(Tuple{Type{Dates.DatePart{Char(0x7a000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.ssszzz"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(RData.fileio_load), FileIO.File{FileIO.DataFormat{:RData}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{UInt8, Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Nullables._unsafe_get_eltype)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(DataFrames.identifier)}, Int64})
precompile(Tuple{getfield(RData, Symbol("##fileio_load#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RData.fileio_load), FileIO.File{FileIO.DataFormat{:RData}}})
precompile(Tuple{getfield(CodecZlib, Symbol("##GzipDecompressorStream#8")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, S} where S<:IO}, Base.IOStream})
precompile(Tuple{getfield(TranscodingStreams, Symbol("##TranscodingStream#2")), Int64, Bool, Bool, Type{TranscodingStreams.TranscodingStream{C, S} where S<:IO where C<:TranscodingStreams.Codec}, CodecZlib.GzipDecompressor, Base.IOStream})
precompile(Tuple{getfield(RData, Symbol("##fileio_load#5")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RData.fileio_load), FileIO.Stream{FileIO.DataFormat{:RData}, TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}})
precompile(Tuple{getfield(Base, Symbol("##readline#272")), Nothing, Bool, typeof(Base.readline), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}})
precompile(Tuple{getfield(TranscodingStreams, Symbol("##readuntil#5")), Bool, typeof(Base.readuntil), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, UInt8})
precompile(Tuple{getfield(RData, Symbol("##RDAContext#4")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{RData.RDAContext{T} where T<:RData.RDAIO}, RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}})
precompile(Tuple{typeof(Base.:(==)), UInt32, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Bool})
precompile(Tuple{typeof(RData.readuint32), RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}})
precompile(Tuple{typeof(RData.readitem), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}})
precompile(Tuple{typeof(RData.readsymbol), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{typeof(RData.readlist), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{getfield(Core.Compiler, Symbol("##172#173")), UInt8})
precompile(Tuple{typeof(RData.readnumeric), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{typeof(Base.setindex!), Array{RData.RSEXPREC{S} where S, 1}, RData.RVector{Float64, 0x0e}, Int64})
precompile(Tuple{typeof(RData.readinteger), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{typeof(RData.readpairlist), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{typeof(RData.readstring), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{Type{RData.RNullableVector{String, 0x10}}, Array{String, 1}, Base.BitArray{1}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.push!), RData.RPairList, RData.RNullableVector{String, 0x10}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, RData.RPairList})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, RData.RNullableVector{String, 0x10}, String})
precompile(Tuple{typeof(Base.setindex!), Array{RData.RSEXPREC{S} where S, 1}, RData.RVector{Int32, 0x0d}, Int64})
precompile(Tuple{typeof(Base.push!), RData.RPairList, RData.RVector{Int32, 0x0d}, String})
precompile(Tuple{typeof(RData.readref), RData.RDAContext{RData.XDRIO{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}}}, UInt32})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, RData.RVector{Int32, 0x0d}, String})
precompile(Tuple{typeof(Base.getproperty), RData.RNullableVector{String, 0x10}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), Array{String, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(RData.jlvec), RData.RVector{Float64, 0x0e}, Bool})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.isnan)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(RData.rdays2date)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(TimeZones, Symbol("##16#17"))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(TimeZones, Symbol("##14#15"))}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(RData.na2zero), Type{UInt8}, Array{Int32, 1}})
precompile(Tuple{typeof(Base.any), typeof(Base.iszero), Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#553")), Base.Colon, typeof(Base.any), typeof(Base.iszero), Array{UInt8, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.iszero), Array{UInt8, 1}, Base.Colon})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{String, UInt8, V} where V}, Array{String, 1}, Bool})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Symbol, Symbol, Expr})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{String, 1, R, V, C, U} where U where C where V where R<:Integer}, Array{UInt8, 1}, CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.identifier), Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(DataFrames.identifier), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(DataFrames.identifier), Tuple{Array{String, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:makeunique,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#53")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique#1")), Bool, typeof(DataFrames.make_unique), Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##45#47")), Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("##45#47"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##45#47")), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, DataFrames.DataFrame, String})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#74")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##current_default_theme#72")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.current_default_theme)})
precompile(Tuple{Type{AbstractPlotting.Attributes}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}})
precompile(Tuple{Type{Base.Dict{Symbol, Reactive.Signal{T} where T}}, Base.Generator{Tuple{Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}, Base.Pair{Symbol, Reactive.Signal{T} where T}}, typeof(AbstractPlotting.node_pairs)}})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(Base.getproperty), Base.Condition, Symbol})
precompile(Tuple{getfield(Makie, Symbol("#windowsize#76")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{Float64}}, GLFW.Window, Int32, Int32})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{getfield(Makie, Symbol("#hasfocuscb#83")){Reactive.Signal{Bool}}, GLFW.Window, Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Bool}, Bool, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Point{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Bool}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Float64}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{String}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{String, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLVisualize.Shape}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Point{2, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Symbol, Symbol}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Quaternion{Float64}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{UInt8}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Bool, Bool, Bool}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##319#322")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##319#322")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Bool, Bool, Bool}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.eltype)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.eltype), Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Symbol, 1}, 1}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.length), Int64}, Int64})
precompile(Tuple{typeof(Base.unique), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, typeof(Base.isless), typeof(Base.identity), Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Int64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Core.MethodTable, Symbol})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Scene}, Symbol, AbstractPlotting.Scene, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :visible, :linewidth, :light, :transformation, :model, :alpha), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Int64, Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Float64}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :marker, :markersize, :strokecolor, :strokewidth, :glowcolor, :glowwidth, :rotations, :colormap, :colorrange, :marker_offset, :fxaa, :transform_marker), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, UnionAll, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Float64, AbstractPlotting.Billboard, Reactive.Signal{Any}, AbstractPlotting.Automatic, AbstractPlotting.Automatic, Bool, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(AbstractPlotting.merge_attributes!), AbstractPlotting.Attributes, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##325#328")), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##141#147")){AbstractPlotting.Transformation}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.HyperRectangle{2, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Float32, Float32, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Any}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, GeometryTypes.HyperRectangle{2, Int64}, GeometryTypes.HyperRectangle{3, Float32}, Bool})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), Nothing, Type{Nothing}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.getproperty), Core.TypeName, Symbol})
precompile(Tuple{typeof(Base.pushfirst!), Array{Any, 1}, TypeVar})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.axis2d!), AbstractPlotting.Scene, AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:labels, :ranges, :formatter, :gap, :title_gap, :linewidth, :linecolor, :linestyle, :textcolor, :textsize, :rotation, :align, :font), Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Int64, Int64, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:axisnames, :textcolor, :textsize, :rotation, :align, :font), Tuple{Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String}}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Symbol, Tuple{String, String}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##380#382")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(AbstractPlotting.default_ticks), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##381#383")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##TextBuffer#361")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Attributes, Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :strokecolor, :strokewidth, :font, :align, :rotation, :textsize, :position), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Tuple{Symbol, Float64}, Int64, Reactive.Signal{Any}, Tuple{Symbol, Symbol}, Float64, Int64, GeometryTypes.Point{2, Float32}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##275#283")){Int64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##276#284")){StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, String, GeometryTypes.Point{2, Float32}, ColorTypes.RGBA{Float32}, Float32, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.text!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes, Reactive.Signal{String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, String})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.LinesegmentBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#106")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :raw), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Bool}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :linestyle, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Nothing, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol, Symbol})
precompile(Tuple{typeof(AbstractPlotting.map_once), typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Float64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), Tuple{Symbol, Float64}, Float64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.draw_ticks), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Int64, Tuple{Float64, Float64}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Float32, Float32}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:rotation, :textsize, :align, :color, :font), Tuple{Float64, Float32, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:rotation, :textsize, :align, :color, :font), Tuple{Float64, Float32, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, String, AbstractPlotting.Key{:font}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:linewidth, :color), Tuple{Float64, Symbol}}, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), Symbol, Float64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.draw_titles), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Float32, Float32}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Symbol, AbstractPlotting.Key{:color}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float32, Float64}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), Nothing, Type{Nothing}, String, typeof(AbstractPlotting.map_once), typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{String, 1}}, Array{String, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{String}}, Tuple{Reactive.Signal{String}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Nothing}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, String}}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##cam2d!#180")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.cam2d!), AbstractPlotting.Scene})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##187#188")){AbstractPlotting.Events}, AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{Tuple{Float64, Float64}}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Camera2D}, Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.selection_rect!), AbstractPlotting.Scene, AbstractPlotting.Camera2D, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#77")), AbstractPlotting.Events, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, AbstractPlotting.Camera, Base.RefValue{Any}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Array{AbstractPlotting.AbstractScreen, 1}, Type{AbstractPlotting.Scene}, AbstractPlotting.Scene})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:linestyle, :linewidth, :color, :visible, :raw), Tuple{Symbol, Float32, Tuple{Symbol, Float64}, Bool, Bool}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##193#194")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.HyperRectangle{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.RefValue{Bool}}, AbstractPlotting.Mouse.DragEnum, Tuple{AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Bool}, Bool})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Array{GeometryTypes.Point{2, Float32}, 1}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float32}, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, AbstractPlotting.Attributes, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base.all), getfield(AbstractPlotting, Symbol("##53#56")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._all), getfield(AbstractPlotting, Symbol("##53#56")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{String, String}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{String, String}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, GeometryTypes.HyperRectangle{2, Int64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##185#186")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float64}, Float64, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}}}})
precompile(Tuple{getfield(Makie, Symbol("#callback#44")), Array{Float16, 2}, GeometryTypes.SimpleRectangle{Int64}})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.Texture{Float16, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.switch_context!), GLFW.Window})
precompile(Tuple{Type{GeometryTypes.Vec{2, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##189#190")){AbstractPlotting.Scene, AbstractPlotting.Camera2D, AbstractPlotting.Events}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Char, 1}}, Array{Char, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{FileIO.DataFormat{:JPEG}}})
precompile(Tuple{getfield(ImageMagick, Symbol("##load_#26")), Type{Array{T, N} where N where T}, String, Nothing, Bool, typeof(ImageMagick.load_), String})
precompile(Tuple{typeof(ImageMagick.pd), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##647#648")){String, String}, String})
precompile(Tuple{typeof(Base.rand), Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:algorithm,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume")), NamedTuple{(:algorithm,), Tuple{Symbol}}, typeof(AbstractPlotting.volume), Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:algorithm,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 3}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.plottype), IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Tuple{Symbol, Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), IntervalSets.ClosedInterval{Float64}, Type{IntervalSets.ClosedInterval{Float64}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{IntervalSets.ClosedInterval{Float64}}, IntervalSets.ClosedInterval{Float64}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 3}, Type{Array{Float64, 3}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 3}}, Array{Float64, 3}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 3}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:fxaa, :algorithm, :absorption, :isovalue, :isorange, :colormap, :colorrange), T} where T<:Tuple}, Tuple{Bool, Symbol, Float32, Float32, Float32, Reactive.Signal{Any}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:fxaa, :algorithm, :absorption, :isovalue, :isorange, :colormap, :colorrange), Tuple{Bool, Symbol, Float32, Float32, Float32, Reactive.Signal{Any}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:fxaa, :algorithm, :absorption, :isovalue, :isorange, :colormap, :colorrange), Tuple{Bool, Symbol, Float32, Float32, Float32, Reactive.Signal{Any}, Tuple{Int64, Int64}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :fxaa, :algorithm, :absorption, :isovalue, :isorange, :colormap, :colorrange), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Symbol, Float32, Float32, Float32, Reactive.Signal{Any}, Tuple{Int64, Int64}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Symbol, Float32, Float32, Float32, Reactive.Signal{Any}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.identity), Tuple{Int64, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Int64, Int64}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Int64, Int64}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Float64, 3}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 3}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Float64, 3}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 3}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##294#298")), GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(tuple)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##294#298")), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##294#298")), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.axis3d!), AbstractPlotting.Scene, AbstractPlotting.Attributes, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), ArgType} where ArgType}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Type{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64, Int64}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}}, Type{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any, Any}}, Type{Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, GeometryTypes.Vec{3, Float32}, AbstractPlotting.Attributes, AbstractPlotting.Attributes, AbstractPlotting.Attributes}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Bool, Bool, Bool}}, Type{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Bool, Bool, Bool}}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.dim3), String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, String, String}, Type{Tuple{String, String, String}}, String, typeof(Base.map), typeof(AbstractPlotting.dim3), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{String, String, String}}, Tuple{String, String, String}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.dim3), Reactive.Signal{Tuple{String, String, String}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:axisnames, :textcolor, :rotation, :textsize, :align, :font, :gap), T} where T<:Tuple}, Tuple{Tuple{String, String, String}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Float64, Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String, String}}, Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:axisnames, :textcolor, :rotation, :textsize, :align, :font, :gap), Tuple{Tuple{String, String, String}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Float64, Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String, String}}, Int64}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{String, String, String}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Float64, Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Reactive.Signal{Tuple{String, String, String}}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{String, String, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{String, String, String}}, Type{Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any, Any}}, Type{Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any, Any}}, Type{Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any, Any}}, Type{Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Any, Any, Any}}, Type{Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{String, String, String}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Float64, Float64, Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Reactive.Signal{Tuple{String, String, String}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:typ, :name), Tuple{DataType, String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){Any}, Tuple{String, String, String}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, String, String}, Type{Any}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{String, String, String}, Tuple{Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){Any}, Reactive.Signal{Any}, Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{Type{NamedTuple{(:labels, :ranges, :formatter, :textcolor, :rotation, :textsize, :align, :gap, :font), T} where T<:Tuple}, Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Int64, Int64, Int64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Int64, Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:labels, :ranges, :formatter, :textcolor, :rotation, :textsize, :align, :gap, :font), Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Int64, Int64, Int64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Int64, Reactive.Signal{Tuple{String, String, String}}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{AbstractPlotting.Automatic, AbstractPlotting.Automatic, typeof(AbstractPlotting.Formatters.plain), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Int64, Int64, Int64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Int64, Reactive.Signal{Tuple{String, String, String}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Int64, Int64, Int64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Bool, Bool, Bool}, Symbol})
precompile(Tuple{typeof(Base.identity), Tuple{Bool, Bool, Bool}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Bool, Bool, Bool}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Bool, Bool, Bool}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##380#382")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(AbstractPlotting.default_ticks), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, String, typeof(Base.map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##381#383")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.default_labels), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.default_labels), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.default_labels), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Base.RefValue{typeof(AbstractPlotting.Formatters.plain)}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Type{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, String, typeof(Base.map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{3, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##TextBuffer#361")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{3, T} where T}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Attributes, Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{String, 1}, Type{Array{String, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{String, 1}}, Array{String, 1}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(|>)), Array{GeometryTypes.Point{3, Float32}, 1}, typeof(Base.eltype)})
precompile(Tuple{typeof(Base.length), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.length), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{GeometryTypes.Point{3, Float32}, 1}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##276#284")){StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, String, GeometryTypes.Point{3, Float32}, ColorTypes.RGBA{Float32}, Float32, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{typeof(AbstractPlotting.to_ndim), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Vec{4, Float32}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Type{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##277#285")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##278#286")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##278#286")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##278#286")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##279#287")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##279#287")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##279#287")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##280#288")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##280#288")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##280#288")), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##281#289")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##281#289")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##281#289")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##282#290")), Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{String}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##282#290")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{String}, String, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##282#290")), Reactive.Signal{String}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.text!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes, Reactive.Signal{String}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{String}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(AbstractPlotting.LinesegmentBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{GeometryTypes.Point{3, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#106")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :raw), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Bool}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Reactive.value), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Symbol, Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Symbol, Symbol, Symbol}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Symbol, Symbol, Symbol}}}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{AbstractPlotting.Attributes, AbstractPlotting.Attributes, AbstractPlotting.Attributes}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{AbstractPlotting.Attributes, AbstractPlotting.Attributes, AbstractPlotting.Attributes}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), AbstractPlotting.Attributes, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), AbstractPlotting.Attributes, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), AbstractPlotting.Attributes, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Symbol, Symbol, Symbol}}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol, Symbol})
precompile(Tuple{typeof(AbstractPlotting.map_once), typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{String, String, String}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{Float64, Float64, Float64}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String, String}, Int64, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64, Int64}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Int64, Int64, Int64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String, String}, Int64})
precompile(Tuple{Type{Base.Val{19}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.to3tuple)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{()}, StaticArrays.Size{(3,)}}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{String, String, String}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.resize!), Array{GeometryTypes.Point{3, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Float32, Array{Float64, 1}, Float32})
precompile(Tuple{typeof(Base.promote_eltypeof), Float32, Array{Float64, 1}, Float32})
precompile(Tuple{typeof(Base.promote_eltypeof), Array{Float64, 1}, Float32})
precompile(Tuple{typeof(Base.promote_type), Type{Float32}, Type{Float64}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Float64}, Float32, Array{Float64, 1}, Float32})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{Float64}, Float32, Array{Float64, 1}, Float32})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{Float64}, Float32, Array{Float64, 1}, Float32})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Float32, Array{Float64, 1}, Float32}})
precompile(Tuple{typeof(Base.cat_similar), Float32, Type{Float64}, Tuple{Int64}})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Float32, Array{Float64, 1}, Float32})
precompile(Tuple{typeof(Base.cat_indices), Float32, Int64})
precompile(Tuple{typeof(Base.cat_size), Float32, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float32})
precompile(Tuple{typeof(Base.cat_indices), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, String, Array{String, 1}, String})
precompile(Tuple{typeof(Base.promote_eltypeof), String, Array{String, 1}, String})
precompile(Tuple{typeof(Base.promote_eltypeof), Array{String, 1}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{String}, String, Array{String, 1}, String})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{String}, String, Array{String, 1}, String})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{String}, String, Array{String, 1}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{String, Array{String, 1}, String}})
precompile(Tuple{typeof(Base.cat_similar), String, Type{String}, Tuple{Int64}})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, String, Array{String, 1}, String})
precompile(Tuple{typeof(Base.cat_indices), String, Int64})
precompile(Tuple{typeof(Base.cat_size), String, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, String})
precompile(Tuple{typeof(Base.cat_indices), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Float32, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.:(*)), Float32, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float32, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Float32, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Float32, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.:(*)), Float32, Tuple{Float64, Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float32, Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Float32, Tuple{Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Base.vect), GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{ColorTypes.RGB{Float64}, Float32}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGB{Float64}, Float32}}, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), ColorTypes.RGB{Float64}, Float32, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.append!), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{Type{Float32}, Float32})
precompile(Tuple{typeof(Base.:(*)), Float32, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}}, GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}}, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{Type{NamedTuple{(:color, :rotation, :textsize, :align, :font), T} where T<:Tuple}, Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float64}, Float32, Tuple{Symbol, Symbol}, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:color, :rotation, :textsize, :align, :font), Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float64}, Float32, Tuple{Symbol, Symbol}, String}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float64}, Float32, Tuple{Symbol, Symbol}, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{ColorTypes.RGBA{Float32}}, Type{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :rotation, :textsize, :align, :font), Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float64}, Float32, Tuple{Symbol, Symbol}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, AbstractPlotting.Quaternion{Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Key{:rotation}})
precompile(Tuple{typeof(AbstractPlotting.to_font), String})
precompile(Tuple{typeof(AbstractPlotting.text_bb), String, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(AbstractPlotting.labelposition), Array{Array{Float64, 1}, 1}, Int64, GeometryTypes.Vec{3, Float32}, Float32, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), GeometryTypes.Point{3, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.getproperty), ModernGL.GLFunc, Symbol})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(UnicodeFun.to_latex), String})
precompile(Tuple{Type{NamedTuple{(:textsize, :color, :rotation, :align, :font), T} where T<:Tuple}, Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, ColorTypes.RGB{Float64}, AbstractPlotting.Key{:color}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Float64, AbstractPlotting.Key{:textsize}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{ColorTypes.RGBA{Float32}, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGBA{Float32}, Int64}}, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), ColorTypes.RGBA{Float32}, Int64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{Type{NamedTuple{(:color, :rotation, :textsize, :align, :font), T} where T<:Tuple}, Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float32}, Float32, Tuple{Symbol, Symbol}, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:color, :rotation, :textsize, :align, :font), Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float32}, Float32, Tuple{Symbol, Symbol}, String}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float32}, Float32, Tuple{Symbol, Symbol}, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{ColorTypes.RGBA{Float32}}, Type{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :rotation, :textsize, :align, :font), Tuple{ColorTypes.RGBA{Float32}, AbstractPlotting.Quaternion{Float32}, Float32, Tuple{Symbol, Symbol}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, AbstractPlotting.Quaternion{Float32}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Key{:rotation}})
precompile(Tuple{typeof(Base.append!), Array{AbstractPlotting.Quaternion{Float32}, 1}, Base.Iterators.Take{Base.Iterators.Repeated{AbstractPlotting.Quaternion{Float32}}}})
precompile(Tuple{Type{NamedTuple{(:textsize, :color, :rotation, :align, :font), T} where T<:Tuple}, Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float64, ColorTypes.RGB{Float64}, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), Nothing, Type{Nothing}, String, typeof(AbstractPlotting.map_once), typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}}, Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{String, String, String}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, String, String}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Any}}, Tuple{Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{String, 1}}}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{String, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##277#285")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##278#286")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##279#287")), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##280#288")), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##281#289")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##282#290")), Reactive.Signal{String}, Tuple{Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, String, String}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{String, String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##cam3d!#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.cam3d!), AbstractPlotting.Scene})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, AbstractPlotting.ProjectionEnum, Symbol})
precompile(Tuple{typeof(Base.identity), AbstractPlotting.ProjectionEnum})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.ProjectionEnum, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, AbstractPlotting.ProjectionEnum, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##21#22")){AbstractPlotting.Camera3D, AbstractPlotting.Attributes}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.signal_convert), Type{Reactive.Signal{AbstractPlotting.ProjectionEnum}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##45#46")){AbstractPlotting.ProjectionEnum}, AbstractPlotting.ProjectionEnum})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{AbstractPlotting.ProjectionEnum}, AbstractPlotting.ProjectionEnum, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##45#46")){AbstractPlotting.ProjectionEnum}, Reactive.Signal{AbstractPlotting.ProjectionEnum}, Reactive.Signal{Any}})
precompile(Tuple{Type{AbstractPlotting.Camera3D}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.ProjectionEnum}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.getproperty), AbstractPlotting.Camera3D, Symbol})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##209#211")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Base.RefValue{GeometryTypes.Vec{2, Float32}}}, AbstractPlotting.Camera, Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##209#211")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Base.RefValue{GeometryTypes.Vec{2, Float32}}}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##210#212")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##213#214")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Base.RefValue{GeometryTypes.Vec{2, Float32}}}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(AbstractPlotting.cameracontrols!), AbstractPlotting.Scene, AbstractPlotting.Camera3D})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, AbstractPlotting.Camera3D})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##206#208")){AbstractPlotting.Scene, AbstractPlotting.Camera3D}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{String, String, String}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, String, String}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{String, String, String}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.ProjectionEnum}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.ProjectionEnum}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.ProjectionEnum}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Array{GeometryTypes.Point{3, Float32}, 1}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float32}, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Float32}, Float32, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.ProjectionEnum}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.ProjectionEnum}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.ProjectionEnum}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.ProjectionEnum}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.ProjectionEnum}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float32}, Float32, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float32}, Float32, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##206#208")){AbstractPlotting.Scene, AbstractPlotting.Camera3D}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##210#212")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{3, Float32}, 1}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Makie.to_gl_text), String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_length), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.bs_getindex), Array{GeometryTypes.Point{3, Float32}, 1}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##105#106")){String, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.TextureAtlas, Int64, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, GeometryTypes.Point{3, Float32}, GeometryTypes.Vec{2, Float32}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.to_ndim), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Vec{4, Float32}, Int64})
precompile(Tuple{typeof(Base.push!), Array{GeometryTypes.Point{3, Float32}, 1}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, String, typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.getindex), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("#kw##visualize")), NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), typeof(Base.length), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int64}, Int64, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.length), Reactive.Signal{Int64}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize.position_calc), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}}})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Makie.GLVisualize.intensity_convert), Nothing, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), typeof(Base.length), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float32, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Float32, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Makie.GLVisualize.assetpath)}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Dict{String, String}, Array{Tuple{Int64, String}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Dict{String, String}}, Type{Array{Tuple{Int64, String}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:volume}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Float32})
precompile(Tuple{Type{AbstractPlotting.Key{:absorption}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float32, AbstractPlotting.Key{:absorption}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{Float32}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:volume}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:volume}})
precompile(Tuple{Type{AbstractPlotting.Key{:isovalue}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float32, AbstractPlotting.Key{:isovalue}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{Type{AbstractPlotting.Key{:algorithm}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:algorithm}, AbstractPlotting.Key{:volume}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int32}, Int32, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Int32}, Reactive.Signal{Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Int32}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:volume}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Int64, Int64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:volume}})
precompile(Tuple{Type{AbstractPlotting.Key{:isorange}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float32, AbstractPlotting.Key{:isorange}, AbstractPlotting.Key{:volume}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Int32}})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.isequal), Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##140#142")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{getfield(Makie, Symbol("##140#142")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.minimum), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.minimum), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.minimum), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.maximum), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.maximum), Tuple{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Float64, Int64, Int64, Int64, Int64, Float64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(Base.map), getfield(Makie, Symbol("##140#142")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##140#142")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{Float64, 3}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.inv)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Float64, 3}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.vect), GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##118#119")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.TextureCoordinate{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.TextureCoordinate{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.similar), Array{GeometryTypes.Quad{Float32}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, Base.Generator{Array{GeometryTypes.Quad{Float32}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.merge), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, 1}}})
precompile(Tuple{typeof(Base.merge), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.getindex), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##110#112")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##111#113")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.copy), Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}})
precompile(Tuple{typeof(Base.values), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.Iterators.zip), Base.ValueIterator{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Base.ValueIterator{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.append!), Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Base.ValueIterator{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Symbol, Any}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(GeometryTypes.vertices), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map!), getfield(GeometryTypes, Symbol("##138#139")){GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{3, Float32}, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.makesignal), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base.inv), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLVisualize.VolumePrerender, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.assemble_robj), Base.Dict{Symbol, Any}, Makie.GLVisualize.GLVisualizeShader, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, UInt32, Makie.GLVisualize.VolumePrerender, getfield(Makie.GLVisualize, Symbol("##75#76"))})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLVisualize.VolumePrerender})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##gl_convert#95")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), Type{Float32}, Array{Float64, 3}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Float32}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 3}, Base.Generator{Array{Float64, 3}, Type{Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 3}, Type{Array{Float32, 3}}, String, typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 3}}, Array{Float32, 3}, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.map), Reactive.Signal{Array{Float32, 3}}, Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float32}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, UInt32}, 1}, Tuple{Symbol, UInt32}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{3}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Any}, 1}, Tuple{Symbol, Tuple{UInt32, UInt32, UInt32}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, Any}, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{3}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{UInt32, UInt32, UInt32}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple{UInt32, UInt32, UInt32}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.Texture{Float32, 3}, Array{Float32, 3}})
precompile(Tuple{typeof(Makie.GLAbstraction.gpu_setindex!), Makie.GLAbstraction.Texture{Float32, 3}, Array{Float32, 3}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.texsubimage), Makie.GLAbstraction.Texture{Float32, 3}, Array{Float32, 3}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float32, 3}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Type{Float32}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float32, 3}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Type{Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float64, 3}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float64, 3}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{Float32, 3}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), getfield(Makie.GLVisualize, Symbol("##75#76"))})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.TextureCoordinate{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{Float32, 3}})
precompile(Tuple{typeof(Base.length), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}, String})
precompile(Tuple{Type{Makie.GLAbstraction.Context{Unit} where Unit}, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}})
precompile(Tuple{typeof(Makie.GLAbstraction.transformation), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Makie.GLAbstraction.Composable{unit} where unit, 1}, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}, Symbol})
precompile(Tuple{typeof(Base.push!), Makie.Screen, AbstractPlotting.Scene, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}})
precompile(Tuple{typeof(Base.convert), Type{Makie.GLAbstraction.RenderObject{Pre} where Pre}, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){Makie.GLVisualize.VolumePrerender}}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Float32, 3}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##38#40")){getfield(Makie.GLVisualize, Symbol("##75#76")), Makie.GLAbstraction.StandardPostrender}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#74")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##current_default_theme#72")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}}, typeof(AbstractPlotting.current_default_theme)})
precompile(Tuple{typeof(Makie.GLVisualize.assetpath), String})
precompile(Tuple{typeof(FileIO.load), String, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#13")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), String, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Tuple{}, String}, Int64})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:OBJ}}}, String})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:OBJ}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:OBJ}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##643#644")){String}, String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##645#646")){String}, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##651#652")){String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##649#650")){String, Base.UUID, String}, String})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.methods), typeof(MeshIO.load)})
precompile(Tuple{typeof(Base.methods), typeof(MeshIO.load), Type{Tuple}})
precompile(Tuple{typeof(MeshIO.load), FileIO.File{FileIO.DataFormat{:OBJ}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.parse), DataType}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.split)}, Int64})
precompile(Tuple{typeof(Base.open), getfield(MeshIO, Symbol("##5#6")){DataType}, FileIO.File{FileIO.DataFormat{:OBJ}}})
precompile(Tuple{getfield(Base, Symbol("##open#298")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(MeshIO, Symbol("##5#6")){DataType}, FileIO.File{FileIO.DataFormat{:OBJ}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, String}, Int64, Int64})
precompile(Tuple{typeof(FileIO.skipmagic), Base.IOStream, Tuple{}})
precompile(Tuple{typeof(MeshIO.load), FileIO.Stream{FileIO.DataFormat{:OBJ}, Base.IOStream}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s24#43")), Int64, Type{Float32}, Type{typeof(Base.convert)}, Type{Type{GeometryTypes.Normal{3, Float32}}}, Type{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##44#53")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##44#53"))}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s24#61")), Int64, Type{Float32}, Type{typeof(Base.convert)}, Type{Type{GeometryTypes.TextureCoordinate{2, Float32}}}, Type{GeometryTypes.TextureCoordinate{2, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##62#71")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##62#71"))}})
precompile(Tuple{typeof(Base.findnext), typeof(Base.Unicode.isspace), Base.SubString{String}, Int64})
precompile(Tuple{Type{GeometryTypes.Face{3, UInt32}}, Array{UInt32, 1}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Face{3, UInt32}})
precompile(Tuple{typeof(Base.append!), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Tuple{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##123#124")){Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(GeometryTypes.isvoid), Type{Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize.loadasset), String})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.GLVisualize.loadasset)}, Int64})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##loadasset#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.GLVisualize.loadasset), String})
precompile(Tuple{getfield(FileIO, Symbol("##load#13")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), String})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:TGA}}}, String})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:TGA}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:TGA}}})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{FileIO.DataFormat{:TGA}}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.mesh), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :fxaa, :interpolate, :shading, :colormap, :colorrange), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Bool, Bool, Bool, Reactive.Signal{Any}, AbstractPlotting.Automatic}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Float32, 3}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Float32, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{String}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int32}}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 3}}}, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}, Reactive.Signal{Array{Float32, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##cam3d!#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.cam3d!), AbstractPlotting.Scene})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 2}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Array{ColorTypes.RGBA{Float32}, 2}, Nothing, Nothing})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Array{ColorTypes.RGBA{Float32}, 2}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}, Base.Colon})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.TextureCoordinate{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.TextureCoordinate{2, Float32}, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:OBJ}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:OBJ}}})
precompile(Tuple{typeof(MeshIO.load), FileIO.File{FileIO.DataFormat{:OBJ}}})
precompile(Tuple{typeof(MeshIO.load), FileIO.Stream{FileIO.DataFormat{:OBJ}, Base.IOStream}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.mesh), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.mesh)}, Int64})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, ColorTypes.RGBA{Float32}, Nothing, Nothing})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}, Base.Colon})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(ImageMagick.pd), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color,), Tuple{Array{Symbol, 1}}}, typeof(AbstractPlotting.mesh), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh#110")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Symbol, 1}}}}, typeof(AbstractPlotting.mesh), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{Symbol, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Symbol, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Array{Symbol, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Symbol, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, UInt32, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Type{Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, UInt32, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, UInt32, Array{UInt32, 1}}, Symbol})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Base.ReinterpretArray{GeometryTypes.Point{3, Float32}, 1, GeometryTypes.Point{3, Float32}, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, UInt32, Array{UInt32, 1}}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Int64, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Int64, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Int64, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.wireframe), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.wireframe)}, Int64})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{Type{GeometryTypes.Point{3, Float32}}, Int64})
precompile(Tuple{Type{GeometryTypes.HyperSphere{3, T} where T}, GeometryTypes.Point{3, Float32}, Float32})
precompile(Tuple{Type{GeometryTypes.HyperSphere{N, T} where T where N}, GeometryTypes.Point{3, Float32}, Float32})
precompile(Tuple{typeof(AbstractPlotting.wireframe), GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.plottype), GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HyperSphere{3, Float32}}, Type{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{GeometryTypes.HyperSphere{3, Float32}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{3, Float32}, Type{GeometryTypes.HyperSphere{3, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##248#249")), GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##248#249")), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##248#249")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}, AbstractPlotting.Attributes, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.Iterators.product), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.axes), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.similar), Type{Array{Float32, N} where N}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float32, 2}})
precompile(Tuple{typeof(Base.first), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(##wireframe_of_a_surface#405.xy_data), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float32, 2}, Float64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.wireframe), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##wireframe#241")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.wireframe), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 2}, Type{Array{Float32, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 2}}, Array{Float32, 2}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##246#247")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##246#247")), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##246#247")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, AbstractPlotting.Attributes, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Float32, 2}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 2}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 2}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Float32, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float32, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float32, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(##surface_1#406.xy_data), Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:colormap,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##surface")), NamedTuple{(:colormap,), Tuple{Symbol}}, typeof(AbstractPlotting.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface#95")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:colormap,), Tuple{Symbol}}}, typeof(AbstractPlotting.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:colormap,), Tuple{Symbol}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:colormap,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:colormap,), Tuple{Symbol}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:colormap,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:colormap, :colorrange, :fxaa), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:colormap, :colorrange, :fxaa), Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:colormap, :colorrange, :fxaa), Tuple{Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{AbstractPlotting.Automatic}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(AbstractPlotting.extrema_nan), Array{Float32, 2}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Float32, Float32}, Type{Tuple{Float32, Float32}}, String, typeof(Base.map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Float32, Float32}}, Tuple{Float32, Float32}, Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Tuple{Float32, Float32}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Reactive.Signal{Tuple{Float32, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.first), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float32, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float32, Float32}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Float64, Float64, Float32}, Tuple{Float64, Float64, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64, Float32}, Tuple{Float64, Float64, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64, Float32}, Tuple{Float64, Float64, Float32}}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Float64, Float64, Float32}, Tuple{Float64, Float64, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Float32, Float32}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Float32, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Float32, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float32, 2}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Tuple{Float32, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Key{:surface}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Float64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:surface}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ColorBrewer, Symbol("##1#2")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(ColorBrewer, Symbol("##1#2"))}})
precompile(Tuple{getfield(ColorBrewer, Symbol("##1#2")), String})
precompile(Tuple{typeof(Colors.parse_rgb), Base.SubString{String}})
precompile(Tuple{typeof(Base._array_for), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Base.Generator{Array{Any, 1}, getfield(ColorBrewer, Symbol("##1#2"))}, Int64})
precompile(Tuple{typeof(AbstractPlotting.resample), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:surface}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float32, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float32, Float32}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:surface}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base._all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Makie.to_range), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Makie.to_range), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Makie.to_range), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}}}})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Reactive.Signal{Array{Float32, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{Float32, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.StepRangeLen{Float32, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.vec)}, Int64})
precompile(Tuple{typeof(Reactive.value), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{Type{Makie.GLVisualize.Grid{N, T} where T<:(Base.AbstractRange{T} where T) where N}, Array{Float32, 2}, Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##113#114"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Float32, 2}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Makie.GLVisualize.surface), Reactive.Signal{Array{Float32, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##118#119")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{4, Float32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int64}, Int64, Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Int64}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Makie.GLVisualize.position_calc), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{Float32, 2}}, Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{UnionAll, Int64}, Int64})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:view,), Tuple{Base.Dict{String, String}}}, Type{Makie.GLVisualize.GLVisualizeShader}, String, String, String, String})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert_struct), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Float32}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Float32}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Float32}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{2, Float32}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{2, Int32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float32}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{Float32, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{2, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{Makie.GLAbstraction.StandardPostrenderInstanced{T} where T}, Reactive.Signal{Int32}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, UInt32})
precompile(Tuple{typeof(Base.setproperty!), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Symbol, Makie.GLAbstraction.StandardPostrenderInstanced{Reactive.Signal{Int32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, GeometryTypes.Vec{2, Int32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Float32, 2}})
precompile(Tuple{Makie.GLAbstraction.StandardPostrenderInstanced{Reactive.Signal{Int32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.renderinstanced), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Int32, UInt32})
precompile(Tuple{typeof(##surface_with_image#407.surf_func), Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##surface_with_image#407, Symbol("##1#2")){Int64}, Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##surface_with_image#407, Symbol("##1#2")){Int64}}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##surface")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}, typeof(AbstractPlotting.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface#95")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}}, typeof(AbstractPlotting.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{Float32}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:stop,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop,), Tuple{Float64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.sin), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.sin), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##meshscatter_function#409, Symbol("##1#2")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##meshscatter_function#409, Symbol("##1#2"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##meshscatter_function#409, Symbol("##3#4")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##meshscatter_function#409, Symbol("##3#4"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#296")), Tuple{Int64}, Type{GeometryTypes.Point{3, Float32}}, Type{typeof(StaticArrays._rand)}, Type{Random.MersenneTwister}, Type{StaticArrays.Size{(3,)}}, Type{Type{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##297#298")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##297#298"))}})
precompile(Tuple{Type{NamedTuple{(:color, :markersize), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter")), NamedTuple{(:color, :markersize), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, typeof(AbstractPlotting.meshscatter), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{ColorTypes.RGBA{Float32}, 1}}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter#120")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :markersize), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, typeof(AbstractPlotting.meshscatter), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{GeometryTypes.Point{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :rotations, :colormap, :colorrange, :fxaa), T} where T<:Tuple}, Tuple{GeometryTypes.HyperSphere{3, Float32}, Float64, AbstractPlotting.Quaternion{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:marker, :markersize, :rotations, :colormap, :colorrange, :fxaa), Tuple{GeometryTypes.HyperSphere{3, Float32}, Float64, AbstractPlotting.Quaternion{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:marker, :markersize, :rotations, :colormap, :colorrange, :fxaa), Tuple{GeometryTypes.HyperSphere{3, Float32}, Float64, AbstractPlotting.Quaternion{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :marker, :markersize, :rotations, :colormap, :colorrange, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, GeometryTypes.HyperSphere{3, Float32}, Float64, AbstractPlotting.Quaternion{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, GeometryTypes.HyperSphere{3, Float32}, Float64, AbstractPlotting.Quaternion{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Any}}, Type{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, GeometryTypes.HyperSphere{3, Float32}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, AbstractPlotting.Quaternion{Float32}, Symbol})
precompile(Tuple{typeof(Base.identity), AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, AbstractPlotting.Quaternion{Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{3, Float32}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, GeometryTypes.HyperSphere{3, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:meshscatter}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{3, Float32}, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(AbstractPlotting.to_3d_scale)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{3, Float32}, 1}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, Array{GeometryTypes.Vec{3, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.HyperSphere{3, Float32}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{3, Float32}, Type{GeometryTypes.HyperSphere{3, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{3, Float32}, Type{GeometryTypes.HyperSphere{3, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##118#119")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Normal{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.Normal{3, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Normal{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{Type{NamedTuple{(:markersize,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize,), Tuple{Float64}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Float64}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize,), Tuple{Float64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Float64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize,), Tuple{Float64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Float64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(AbstractPlotting.to_colormap), Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ColorBrewer, Symbol("##1#2")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(ColorBrewer, Symbol("##1#2"))}})
precompile(Tuple{getfield(ColorBrewer, Symbol("##1#2")), String})
precompile(Tuple{typeof(Colors.parse_rgb), Base.SubString{String}})
precompile(Tuple{typeof(Base._array_for), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Base.Generator{Array{Any, 1}, getfield(ColorBrewer, Symbol("##1#2"))}, Int64})
precompile(Tuple{typeof(AbstractPlotting.resample), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:markersize, :color), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Float64, 1}}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.hashindex), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.hashindex), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.Libc.time)})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Float64, Float64, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Tuple{Float64, Float64, Int64}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Int64, Int64, Int64})
precompile(Tuple{getfield(##record_video#412, Symbol("##1#2")), Float64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##record_video#412.f)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{Float64, Float64, Float64}, 1}, Type{Array{Tuple{Float64, Float64, Float64}, 1}}, String, typeof(Base.map), getfield(##record_video#412, Symbol("##1#2")), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{Float64, Float64, Float64}, 1}}, Array{Tuple{Float64, Float64, Float64}, 1}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##record_video#412, Symbol("##1#2")), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter!")), NamedTuple{(:markersize,), Tuple{Float64}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Scene, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:markersize,), Tuple{Float64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{Float64, Float64, Float64}, 1}, Type{Array{Tuple{Float64, Float64, Float64}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{Float64, Float64, Float64}, 1}}, Array{Tuple{Float64, Float64, Float64}, 1}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{getfield(##record_video#412, Symbol("##3#4")), Float64})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##294#298")), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.default_ticks), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Nothing}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.default_labels), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Tuple{Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}})
precompile(Tuple{Type{Base.Val{24}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Nothing}}, Type{Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Reactive.Signal{T} where T, 1}, Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), AbstractPlotting.Camera3D, AbstractPlotting.EmptyCamera})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(##record_video#412, Symbol("##5#7")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(##record_video#412, Symbol("##5#7")), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##record_video#412, Symbol("##6#8"))}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Type{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, String, typeof(Base.map), getfield(##record_video#412, Symbol("##5#7")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##record_video#412, Symbol("##5#7")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{Type{NamedTuple{(:linestyle, :limits), T} where T<:Tuple}, Tuple{Symbol, GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:linestyle, :limits), Tuple{Symbol, GeometryTypes.HyperRectangle{3, Float32}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Scene, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.HyperRectangle{3, Float32}, Symbol})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Type{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.sizeof), Type{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.HyperRectangle{3, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##map_once#57")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(AbstractPlotting.map_once), getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Makie.record), getfield(##record_video#412, Symbol("##9#10")), AbstractPlotting.Scene, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.resize!), Makie.Screen, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Makie.MonitorProperties, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Float64}, Float64})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##430#431")){Base.RefValue{Bool}, Base.RefValue{AbstractPlotting.Mouse.Button}, Base.RefValue{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Events}, Tuple{Float64, Float64}, Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Symbol})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Float64}, AbstractPlotting.Key{:strokecolor}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{3, Float32}, 1}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Array{Base.Pair{Symbol, B} where B, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Symbol}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Any}})
precompile(Tuple{typeof(Base.depwarn), String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Nothing}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.StackTraces.StackFrame, Base.StackTraces.StackFrame})
precompile(Tuple{typeof(Base.getproperty), Base.StackTraces.StackFrame, Symbol})
precompile(Tuple{typeof(Base.getproperty), Core.MethodInstance, Symbol})
precompile(Tuple{typeof(Base.getproperty), Method, Symbol})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.getproperty), Core.CodeInfo, Symbol})
precompile(Tuple{typeof(Base.getproperty), Core.LineInfoNode, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Makie.to_gl_text), String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##105#106")){String, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.TextureAtlas, Int64, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, GeometryTypes.Point{3, Float32}, GeometryTypes.Vec{2, Float32}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.push!), Array{GeometryTypes.Point{3, Float32}, 1}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, String, typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("#kw##visualize")), NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##visualize#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), typeof(Base.length), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.length), Reactive.Signal{Int64}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize.position_calc), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Nothing, Nothing, Nothing, UnionAll}}})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Makie.GLAbstraction.GLBuffer{T} where T}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:view,), Tuple{Base.Dict{String, String}}}, Type{Makie.GLVisualize.GLVisualizeShader}, String, String, String, String, String})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##GLVisualizeShader#21#23")), Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLVisualize.GLVisualizeShader}, String, String, String, String, String})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##22#24")), Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Makie.GLVisualize.intensity_convert), Nothing, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize.assemble_shader), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.assemble_robj), Base.Dict{Symbol, Any}, Makie.GLVisualize.GLVisualizeShader, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, UInt32, Nothing, Nothing})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{Int64}, Reactive.Signal{Int64}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{String}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float32, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String, String}})
precompile(Tuple{typeof(Makie.GLAbstraction.get_template!), String, Base.Dict{String, String}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.get!), getfield(Makie.GLAbstraction, Symbol("##75#80")){Base.Dict{Symbol, Any}, Tuple{String, String, String, String, String}}, Base.Dict{Any, Makie.GLAbstraction.GLProgram}, Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}, String})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.transformation), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Symbol})
precompile(Tuple{typeof(Base.push!), Makie.Screen, AbstractPlotting.Scene, Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Base.hash), AbstractPlotting.Scene, UInt64})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float32, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Float32, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Makie.GLAbstraction.Style{:linesegment}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Makie.GLAbstraction.Style{:linesegment}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Symbol})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{Type{AbstractPlotting.Key{:meshscatter}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{3, Float32}, Type{GeometryTypes.Vec{3, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Quaternion{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.HyperSphere{3, Float32}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperSphere{3, Float32}, Type{GeometryTypes.HyperSphere{3, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperSphere{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:view,), Tuple{Base.Dict{String, String}}}, Type{Makie.GLVisualize.GLVisualizeShader}, String, String, String, String})
precompile(Tuple{typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##22#24")), Tuple{String, String, String, String}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##118#119")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Symbol, Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Normal{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Nothing, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Nothing}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, DataType}}})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##116#117")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Normal{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Normal{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##114#115")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{3, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{3, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Normal{3, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Normal{3, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.indexbuffer), Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Symbol})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Any}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}, Base.Generator{Base.Dict{Symbol, Any}, getfield(Makie.GLAbstraction, Symbol("##50#54"))}, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##72#77")), Tuple{String, String, String, String}, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.get!), getfield(Makie.GLAbstraction, Symbol("##75#80")){Base.Dict{Symbol, Any}, Tuple{String, String, String, String}}, Base.Dict{Any, Makie.GLAbstraction.GLProgram}, Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Zip2{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.get_shader!), String, Base.Dict{String, String}, Base.Dict{String, String}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.compile_program), Array{Makie.GLAbstraction.Shader, 1}, Array{Tuple{Int64, String}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.cardinality), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Base.eltype), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.julia2glenum), Type{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}, String})
precompile(Tuple{typeof(Base.:(==)), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{Type{Makie.GLAbstraction.StandardPostrenderInstanced{T} where T}, Reactive.Signal{Int32}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, UInt32})
precompile(Tuple{typeof(Base.setproperty!), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Symbol, Makie.GLAbstraction.StandardPostrenderInstanced{Reactive.Signal{Int32}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:linestyle}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x_repeat,), Tuple{Symbol}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Array{Float16, 1}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:x_repeat,), Tuple{Symbol}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float16}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, UInt32}, 1}, Tuple{Symbol, UInt32}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{1}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Tuple{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.arg_gen), Int64, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.isiterable), Type{Int64}})
precompile(Tuple{typeof(Base.has_non_default_iterate), Type{Int64}})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base._spawn), Base.Cmd, Tuple{Base.Pipe, Base.DevNullStream, Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.Pipe, Base.DevNullStream, Base.TTY}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Float16, 1}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Base.Process}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Float64}, Float64})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##record_video#412, Symbol("##1#2")), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##record_video#412, Symbol("##3#4")), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##record_video#412, Symbol("##5#7")), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.length), Reactive.Signal{Int64}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{Makie.GLAbstraction.StandardPostrenderInstanced{Reactive.Signal{Int32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.renderinstanced), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Int32, UInt32})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.PostprocessPrerender}, Makie.GLAbstraction.GLVertexArray{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Float16, 1}})
precompile(Tuple{typeof(Base.write), Base.Pipe, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(Base, Symbol("##run#509")), Bool, typeof(Base.run), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##_spawn#498")), Nothing, typeof(Base._spawn), Base.Cmd, Tuple{Base.Libc.RawFD, Base.Libc.RawFD, Base.Libc.RawFD}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##rm#9")), Bool, Bool, typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, String})
precompile(Tuple{Type{NamedTuple{(:levels, :alpha), T} where T<:Tuple}, Tuple{Int64, Float64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour!")), NamedTuple{(:levels, :alpha), Tuple{Int64, Float64}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Float64}})
precompile(Tuple{getfield(Makie, Symbol("##contour!#2")), Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :alpha), Tuple{Int64, Float64}}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:levels, :alpha), Tuple{Int64, Float64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :alpha), Tuple{Int64, Float64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{Type{Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}, typeof(##3d_contour_with_2d_contour_slices#414.test), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##3d_contour_with_2d_contour_slices#414.test)})
precompile(Tuple{typeof(##3d_contour_with_2d_contour_slices#414.test), Float64, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(##3d_contour_with_2d_contour_slices#414.test), Tuple{Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(##3d_contour_with_2d_contour_slices#414.test), Tuple{Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##3d_contour_with_2d_contour_slices#414.test)}, Int64})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Tuple{Symbol, Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 3}, Type{Array{Float64, 3}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 3}}, Array{Float64, 3}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 3}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:light, :alpha, :visible, :transformation, :linewidth, :model, :color, :colorrange, :levels, :fillrange), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.isequal), Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Makie, Symbol("##11#16")), Array{Float64, 3}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##11#16")), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##11#16")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(Makie, Symbol("##12#17")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##13#18")), Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Makie, Symbol("##13#18")), Symbol, Int64, Float64, Float64, GeometryTypes.Vec{2, Float32}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float32, Float64, Float64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##14#19")){Float64, GeometryTypes.Vec{2, Float32}, Int64, Float64, IntervalSets.ClosedInterval{Float32}}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Makie, Symbol("##14#19")){Float64, GeometryTypes.Vec{2, Float32}, Int64, Float64, IntervalSets.ClosedInterval{Float32}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Makie, Symbol("##14#19")){Float64, GeometryTypes.Vec{2, Float32}, Int64, Float64, IntervalSets.ClosedInterval{Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.interpolated_getindex), Array{ColorTypes.RGBA{Float32}, 1}, Float64})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:init,), Tuple{Bool}}, typeof(Base.reduce), getfield(Makie, Symbol("##15#20")){Float64, Float64, IntervalSets.ClosedInterval{Float32}}, Base.StepRangeLen{Float32, Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#174")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Bool}}}, typeof(Base.mapfoldl), typeof(Base.identity), getfield(Makie, Symbol("##15#20")){Float64, Float64, IntervalSets.ClosedInterval{Float32}}, Base.StepRangeLen{Float32, Float64, Float64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), getfield(Makie, Symbol("##15#20")){Float64, Float64, IntervalSets.ClosedInterval{Float32}}, NamedTuple{(:init,), Tuple{Bool}}, Base.StepRangeLen{Float32, Float64, Float64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#329")), Nothing, Int64, typeof(Base.sprint), typeof(Base.join), Tuple{String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##13#18")), Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##13#18")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{NamedTuple{(:colormap, :colorrange, :algorithm), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume!")), NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}, typeof(AbstractPlotting.volume!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Type{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##volume!#91")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}}, typeof(AbstractPlotting.volume!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 3}, Type{Array{Float64, 3}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 3}}, Array{Float64, 3}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Float64, 3}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Symbol, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.first), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.getproperty), AbstractPlotting.Scene, Symbol})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.indexed_iterate), GeometryTypes.Vec{3, Float32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), GeometryTypes.Vec{3, Float32}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Int64})
precompile(Tuple{getfield(##3d_contour_with_2d_contour_slices#414, Symbol("##1#2")), Array{Float64, 3}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Colon, Base.Colon}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 2}, Type{Array{Float64, 2}}, String, typeof(Base.map), getfield(##3d_contour_with_2d_contour_slices#414, Symbol("##1#2")), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 2}}, Array{Float64, 2}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##3d_contour_with_2d_contour_slices#414, Symbol("##1#2")), Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{NamedTuple{(:transformation, :linewidth), T} where T<:Tuple}, Tuple{Tuple{Symbol, Float32}, Int64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour!")), NamedTuple{(:transformation, :linewidth), Tuple{Tuple{Symbol, Float32}, Int64}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Symbol, Float32}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Symbol, Float32}}, Type{Int64}})
precompile(Tuple{getfield(Makie, Symbol("##contour!#2")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:transformation, :linewidth), Tuple{Tuple{Symbol, Float32}, Int64}}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:transformation, :linewidth), Tuple{Tuple{Symbol, Float32}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:transformation, :linewidth), Tuple{Tuple{Symbol, Float32}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Tuple{Symbol, Float32}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 2}, Type{Array{Float64, 2}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 2}}, Array{Float64, 2}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Symbol, Float32}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Symbol, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Symbol, Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Symbol, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Tuple{Symbol, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Float32}, AbstractPlotting.Automatic})
precompile(Tuple{typeof(AbstractPlotting.transform!), AbstractPlotting.Transformation, Tuple{Symbol, Float32}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Symbol, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{getfield(##3d_contour_with_2d_contour_slices#414, Symbol("##3#4")), Array{Float64, 3}})
precompile(Tuple{Type{NamedTuple{(:transformation,), T} where T<:Tuple}, Tuple{Tuple{Symbol, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##heatmap!")), NamedTuple{(:transformation,), Tuple{Tuple{Symbol, Float32}}}, typeof(AbstractPlotting.heatmap!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##heatmap!#86")), Base.Iterators.Pairs{Symbol, Tuple{Symbol, Float32}, Tuple{Symbol}, NamedTuple{(:transformation,), Tuple{Tuple{Symbol, Float32}}}}, typeof(AbstractPlotting.heatmap!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:transformation,), Tuple{Tuple{Symbol, Float32}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Tuple{Symbol, Float32}, Tuple{Symbol}, NamedTuple{(:transformation,), Tuple{Tuple{Symbol, Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :levels, :fxaa, :interpolate), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Float64, Reactive.Signal{Any}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Int64, Bool, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, AbstractPlotting.Quaternion{Float64}, typeof(Reactive.print_error)})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.extrema_nan), Array{Float64, 2}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, AbstractPlotting.Quaternion{Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{AbstractPlotting.Quaternion{Float32}}, AbstractPlotting.Quaternion{Float64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(##3d_contour_with_2d_contour_slices#414, Symbol("##5#6")), Array{Float64, 3}})
precompile(Tuple{Type{NamedTuple{(:fillrange, :transformation), T} where T<:Tuple}, Tuple{Bool, Tuple{Symbol, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour!")), NamedTuple{(:fillrange, :transformation), Tuple{Bool, Tuple{Symbol, Float32}}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Tuple{Symbol, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Bool}, Type{Tuple{Symbol, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##contour!#2")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:fillrange, :transformation), Tuple{Bool, Tuple{Symbol, Float32}}}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:fillrange, :transformation), Tuple{Bool, Tuple{Symbol, Float32}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:fillrange, :transformation), Tuple{Bool, Tuple{Symbol, Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Makie, Symbol("##21#23")), Float64})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Float64}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.heatmap!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Float32})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}}, Int64, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:volume}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:algorithm}, AbstractPlotting.Key{:volume}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int64}, Int64, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Reactive.Signal{Int64}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Vec{2, Float32}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Int64}})
precompile(Tuple{typeof(Makie.makieshader), String, String, String, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:view, :fragdatalocation), Tuple{Base.Dict{String, String}, Array{Tuple{Int64, String}, 1}}}, Type{Makie.GLAbstraction.LazyShader}, String, String, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Tuple{Int64, String}, 1}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##133#136")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(Makie, Symbol("##133#136")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.minimum), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.minimum), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.minimum), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.maximum), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.maximum), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(Base.map), getfield(Makie, Symbol("##133#136")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##134#137")), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Makie, Symbol("##134#137")), Array{Float64, 3}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 3}, Type{Array{Float32, 3}}, String, typeof(Base.map), getfield(Makie, Symbol("##134#137")), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 3}}, Array{Float32, 3}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##134#137")), Reactive.Signal{Array{Float32, 3}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Makie.GLAbstraction.Texture{Float32, 3}})
precompile(Tuple{typeof(AbstractPlotting.to_colormap), Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), Type{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), Type{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{Float32, 3}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Base.Pair{Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Pair{Symbol, Bool}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{Float32, 3}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Base.Pair{Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Pair{Symbol, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{Float32, 3}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Base.Pair{Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Pair{Symbol, Bool}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Base.Pair{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}}, Type{Base.Pair{Symbol, Makie.GLAbstraction.Texture{Float32, 3}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, B} where B}, Type{Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, B} where B}, Type{Base.Pair{Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, B} where B}, Type{Base.Pair{Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, B} where B}, Type{Base.Pair{Symbol, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Type{Makie.GLAbstraction.Texture{Float32, 3}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, GeometryTypes.TextureCoordinate{3, Float32}, Nothing, Nothing, Nothing}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{Float32, 3}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Base.Pair{Symbol, Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Base.Pair{Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##135#138")){GeometryTypes.HyperRectangle{3, Float32}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{3, Float32}, Type{GeometryTypes.HyperRectangle{3, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##135#138")){GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HyperRectangle{3, Float32}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{Type{Makie.GLAbstraction.RenderObject{Pre} where Pre}, Base.Dict{Symbol, Any}, Makie.GLAbstraction.LazyShader, typeof(Makie.volume_prerender), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLAbstraction.Texture{Float32, 3}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Makie.GLAbstraction.Texture{Float32, 3}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}, Symbol})
precompile(Tuple{typeof(Base.push!), Makie.Screen, AbstractPlotting.Scene, Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}})
precompile(Tuple{typeof(Base.convert), Type{Makie.GLAbstraction.RenderObject{Pre} where Pre}, Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{typeof(Makie.volume_prerender)}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Array{Float64, 2}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Int64})
precompile(Tuple{typeof(Base.minimum), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.maximum), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Bool}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Float32}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour3d")), NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}, typeof(Makie.contour3d), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))})
precompile(Tuple{getfield(Makie, Symbol("##contour3d#6")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}}, typeof(Makie.contour3d), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :linewidth), Tuple{Int64, Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{Type{Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}, getfield(##contour3d_1#415, Symbol("##1#2")), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##contour3d_1#415, Symbol("##1#2"))})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##contour3d_1#415, Symbol("##1#2"))}, Int64})
precompile(Tuple{getfield(##contour3d_1#415, Symbol("##1#2")), Float64, Float64})
precompile(Tuple{typeof(Base.similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Float64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Makie.contourlines), Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Contour.ContourCollection{Contour.ContourLevel{Float64}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, String, typeof(Base.map), getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##22#24")){AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.first), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.first), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.first), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.first), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.last), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), typeof(Base.last), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.last), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Int64}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Symbol, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 3}}}, Tuple{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Makie.GLAbstraction.Style{:lines}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(Makie.GLVisualize, Symbol("##53#57")){GeometryTypes.Point{3, Float32}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Point{3, Bool}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##53#57")){GeometryTypes.Point{3, Float32}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Int32}, Type{GeometryTypes.Vec{2, Int32}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Int32}}, GeometryTypes.Vec{2, Int32}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 1}, Type{Array{Float32, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 1}}, Array{Float32, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#@__dot__")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Base.Broadcast.__dot__), Expr})
precompile(Tuple{typeof(Base.map), typeof(Base.Broadcast.__dot__), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{2}})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Int64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.acos), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.acos), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.acos), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.acos)}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(##arrows_3d#416.SphericalToCartesian), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(LinearAlgebra.normalize), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(LinearAlgebra.normalize), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(LinearAlgebra.normalize), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(LinearAlgebra.normalize), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(LinearAlgebra.normalize), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Float32}}})
precompile(Tuple{Type{NamedTuple{(:arrowsize, :linecolor, :arrowcolor), T} where T<:Tuple}, Tuple{Float64, Symbol, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##arrows")), NamedTuple{(:arrowsize, :linecolor, :arrowcolor), Tuple{Float64, Symbol, Symbol}}, typeof(AbstractPlotting.arrows), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Symbol, Symbol}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##arrows#228")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:arrowsize, :linecolor, :arrowcolor), Tuple{Float64, Symbol, Symbol}}}, typeof(AbstractPlotting.arrows), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:arrowsize, :linecolor, :arrowcolor), Tuple{Float64, Symbol, Symbol}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:arrowsize, :linecolor, :arrowcolor), Tuple{Float64, Symbol, Symbol}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:arrowsize, :linecolor, :arrowcolor), Tuple{Float64, Symbol, Symbol}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:arrowsize, :linecolor, :arrowcolor), Tuple{Float64, Symbol, Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##233#237")){3, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##233#237")){3, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}, Float32})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{()}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Type{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##233#237")){3, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##233#237")){3, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth, :linestyle), T} where T<:Tuple}, Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:color, :linewidth, :linestyle), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#106")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Type{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.sizeof), Type{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##235#239")), Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##235#239")), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##235#239")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##236#240")){3}, AbstractPlotting.Automatic})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Pyramid{Float32}, Type{GeometryTypes.Pyramid{Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##236#240")){3}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Pyramid{Float32}}, GeometryTypes.Pyramid{Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##236#240")){3}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :color, :rotations), T} where T<:Tuple}, Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Symbol}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter!")), NamedTuple{(:marker, :markersize, :color, :rotations), Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Symbol}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Symbol}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{GeometryTypes.Pyramid{Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{GeometryTypes.Pyramid{Float32}}}, Type{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{T} where T}, Type{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter!#121")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :color, :rotations), Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Symbol}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.Pyramid{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Int32}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Pyramid{Float32}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{3, Float32}, Type{GeometryTypes.Vec{3, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{3, Float32}, 1}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.to_rotation), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{AbstractPlotting.Quaternion{Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.to_rotation), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.Pyramid{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Pyramid{Float32}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Pyramid{Float32}, Type{GeometryTypes.Pyramid{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Pyramid{Float32}}, GeometryTypes.Pyramid{Float32}, Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_internalcolorformat_sym), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.default_colorformat_sym), Type{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{GeometryTypes.OffsetInteger{-1, UInt32}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, GeometryTypes.OffsetInteger{-1, UInt32}, Array{GeometryTypes.OffsetInteger{-1, UInt32}, 1}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, GeometryTypes.OffsetInteger{-1, UInt32}, Array{GeometryTypes.OffsetInteger{-1, UInt32}, 1}}}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.Pyramid{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, GeometryTypes.OffsetInteger{-1, UInt32}, Array{GeometryTypes.OffsetInteger{-1, UInt32}, 1}}, Symbol})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Base.ReinterpretArray{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1, GeometryTypes.OffsetInteger{-1, UInt32}, Array{GeometryTypes.OffsetInteger{-1, UInt32}, 1}}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{Base.Colon, Float64, Float64})
precompile(Tuple{typeof(Base.:(/)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.vcat), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.promote_eltypeof), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Float64}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Float64}, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{Float64}, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.cat_indices), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(*)), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(/)), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##image_on_surface_sphere#417, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(##image_on_surface_sphere#417, Symbol("##1#2"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##image_on_surface_sphere#417, Symbol("##3#4")), Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(##image_on_surface_sphere#417, Symbol("##3#4"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##image_on_surface_sphere#417, Symbol("##5#6")), Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(##image_on_surface_sphere#417, Symbol("##5#6"))}})
precompile(Tuple{typeof(Base.vect), Float32, Float32})
precompile(Tuple{typeof(Base.rand), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{GeometryTypes.Point{3, Float32}}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{3, Float32}}, Tuple{Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, Type{GeometryTypes.Point{3, Float32}}, Tuple{Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.vec), Array{GeometryTypes.Point{3, Float32}, 2}})
precompile(Tuple{typeof(Makie.logo)})
precompile(Tuple{typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{typeof(ImageMagick.pd), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##surface")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.surface), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface#95")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.surface), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}, Type{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Array{Float32, 2}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 2}, Type{Array{Float32, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 2}}, Array{Float32, 2}, Tuple{Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Reactive.Signal{Tuple{Float32, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.first), Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Pyramid{Float32}}}, Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 2}}}, Tuple{Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Float64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float32, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base._all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}, Base.Colon})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize.position_calc), Nothing, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Nothing, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Nothing, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Nothing, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, UnionAll}}})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{Float32, 2}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##arrows_on_sphere#418, Symbol("##7#8")), Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(##arrows_on_sphere#418, Symbol("##7#8"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##arrows_on_sphere#418, Symbol("##9#10")), Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(##arrows_on_sphere#418, Symbol("##9#10"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##arrows_on_sphere#418, Symbol("##11#12")), Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(##arrows_on_sphere#418, Symbol("##11#12"))}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), getfield(##arrows_on_sphere#418, Symbol("##5#6")), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##arrows_on_sphere#418, Symbol("##5#6")), Tuple{Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##arrows_on_sphere#418, Symbol("##5#6")), Tuple{Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##arrows_on_sphere#418, Symbol("##5#6"))}, Int64})
precompile(Tuple{getfield(##arrows_on_sphere#418, Symbol("##3#4")), Float64, Float64, Float64})
precompile(Tuple{typeof(LinearAlgebra.dot), GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base.:(*)), GeometryTypes.Point{3, Float32}, Float32})
precompile(Tuple{typeof(Base.:(-)), GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(##arrows_on_sphere#418, Symbol("##5#6")), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{GeometryTypes.Point{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{3, Float32}, 2}, GeometryTypes.Point{3, Float32}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{3, Float32}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(##arrows_on_sphere#418, Symbol("##5#6")), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{GeometryTypes.Point{3, Float32}, 1}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.surface), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.surface)}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface#95")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.surface), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{NamedTuple{(:arrowsize, :linecolor, :linewidth), T} where T<:Tuple}, Tuple{Float64, Tuple{Symbol, Float64}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##arrows!")), NamedTuple{(:arrowsize, :linecolor, :linewidth), Tuple{Float64, Tuple{Symbol, Float64}, Int64}}, typeof(AbstractPlotting.arrows!), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Tuple{Symbol, Float64}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##arrows!#230")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:arrowsize, :linecolor, :linewidth), Tuple{Float64, Tuple{Symbol, Float64}, Int64}}}, typeof(AbstractPlotting.arrows!), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth, :linestyle), T} where T<:Tuple}, Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Int64}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:color, :linewidth, :linestyle), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Tuple{Symbol, Float64}}}, Type{Reactive.Signal{Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#106")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Int64}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :color, :rotations), T} where T<:Tuple}, Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter!")), NamedTuple{(:marker, :markersize, :color, :rotations), Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter!#121")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :color, :rotations), Tuple{Reactive.Signal{GeometryTypes.Pyramid{Float32}}, Reactive.Signal{Float64}, Reactive.Signal{Any}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.arrows)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{Base.Colon, Int64, Float64, Int64})
precompile(Tuple{typeof(AbstractPlotting.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##surface___contour3d#419.f)})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface#95")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##surface___contour3d#419.f)})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##surface___contour3d#419.f)}})
precompile(Tuple{Type{Reactive.Signal{typeof(##surface___contour3d#419.f)}}, typeof(##surface___contour3d#419.f), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##surface___contour3d#419.f)})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##surface___contour3d#419.f)}, Int64})
precompile(Tuple{typeof(##surface___contour3d#419.f), Float64, Float64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{typeof(##surface___contour3d#419.f)}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{typeof(##surface___contour3d#419.f)}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{typeof(##surface___contour3d#419.f)}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{typeof(##surface___contour3d#419.f)}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##surface___contour3d#419.f)}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{Type{Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}, getfield(##surface___contour3d#419, Symbol("##1#2")), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##surface___contour3d#419, Symbol("##1#2"))})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##surface___contour3d#419, Symbol("##1#2"))}, Int64})
precompile(Tuple{getfield(##surface___contour3d#419, Symbol("##1#2")), Float64, Float64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour3d)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{typeof(AbstractPlotting.vbox), AbstractPlotting.Scene, AbstractPlotting.Scene})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##vbox#347")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.vbox), Array{AbstractPlotting.Scene, 1}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##349#352")){AbstractPlotting.Scene, AbstractPlotting.Scene}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Float64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Bool})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Bool}, Bool})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Bool}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Base.Set{AbstractPlotting.Mouse.Button}}, Base.Set{AbstractPlotting.Mouse.Button}, typeof(Reactive.print_error), Bool})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Mouse.DragEnum})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, AbstractPlotting.Mouse.DragEnum, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##209#211")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Base.RefValue{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##213#214")){AbstractPlotting.Scene, AbstractPlotting.Camera3D, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}, Base.RefValue{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{AbstractPlotting.Mouse.DragEnum}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Base.Set{AbstractPlotting.Keyboard.Button}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Base.Set{AbstractPlotting.Keyboard.Button}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Base.Set{AbstractPlotting.Keyboard.Button}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.Set{AbstractPlotting.Keyboard.Button}}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Array{Char, 1}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Array{Char, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Char, 1}}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Array{String, 1}})
precompile(Tuple{typeof(Base.push!), Reactive.Signal{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(AbstractPlotting.campixel), AbstractPlotting.Scene})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##199#200")){AbstractPlotting.Scene}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:position, :align, :raw), Tuple{GeometryTypes.Vec{2, Float64}, Tuple{Symbol, Symbol}, Bool}}, typeof(AbstractPlotting.text!), AbstractPlotting.Scene, String})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), String, AbstractPlotting.Key{:font}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, GeometryTypes.Vec{2, Float64}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, GeometryTypes.Vec{2, Float64}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(AbstractPlotting.calc_position), GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, AbstractPlotting.TextureAtlas, Char, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##348#351")){Int64, Int64, AbstractPlotting.Scene}, Reactive.Signal{AbstractPlotting.Scene}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Bool}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Array{Char, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##350#353")){Symbol, AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Float64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base._all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{Float64, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Makie.GLVisualize.Grid{N, T} where T<:(Base.AbstractRange{T} where T) where N}, Array{Float64, 2}, Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Makie.GLVisualize.surface), Reactive.Signal{Array{Float64, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Int64}, Int64, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Int64}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float64, 2}}, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float64, 2}}, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float64, 2}}, UnionAll}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float64, 2}}, UnionAll}}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{Float64, 2}}, Int64}, Int64})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##gl_convert#95")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), Type{Float32}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Float32}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 2}, Base.Generator{Array{Float64, 2}, Type{Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 2}, Type{Array{Float32, 2}}, String, typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float32, 2}}, Array{Float32, 2}, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.map), Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{typeof(##surface___contour3d#419.f)}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, Int64}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Face{3, Int64}}})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fem_mesh_3d#420, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(##fem_mesh_3d#420, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.getindex), Array{GeometryTypes.Point{3, Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), GeometryTypes.Point{3, Float32}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Float32}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float32, 2}, Float32, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(##fem_mesh_3d#420, Symbol("##1#2"))}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.length), Array{GeometryTypes.Face{3, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fem_mesh_3d#420, Symbol("##3#4")), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(##fem_mesh_3d#420, Symbol("##3#4"))}})
precompile(Tuple{typeof(Base.getindex), Array{GeometryTypes.Face{3, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), GeometryTypes.Face{3, Int64}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(##fem_mesh_3d#420, Symbol("##3#4"))}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.mesh), Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.mesh), Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float32, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, Array{Float32, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), getfield(AbstractPlotting, Symbol("##166#168")){Array{Float32, 2}}, Base.UnitRange{Int64}, Base.Val{3}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.extrema_nan), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Int64}}, Tuple{Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float32, 2}}}, Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float32, 2}}, Reactive.Signal{Array{Int64, 2}}}, Base.Colon})
precompile(Tuple{Type{NamedTuple{(:linewidth,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:linewidth,), Tuple{Float64}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{Type{NamedTuple{(:frame,), T} where T<:Tuple}, Tuple{AbstractPlotting.Attributes}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:frame,), Tuple{AbstractPlotting.Attributes}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{Type{NamedTuple{(:axis,), T} where T<:Tuple}, Tuple{AbstractPlotting.Attributes}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##surface!")), NamedTuple{(:axis,), Tuple{AbstractPlotting.Attributes}}, typeof(AbstractPlotting.surface!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##axis___surface#421.f)})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface!#96")), Base.Iterators.Pairs{Symbol, AbstractPlotting.Attributes, Tuple{Symbol}, NamedTuple{(:axis,), Tuple{AbstractPlotting.Attributes}}}, typeof(AbstractPlotting.surface!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##axis___surface#421.f)})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:axis,), Tuple{AbstractPlotting.Attributes}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##axis___surface#421.f)})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, AbstractPlotting.Attributes, Tuple{Symbol}, NamedTuple{(:axis,), Tuple{AbstractPlotting.Attributes}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##axis___surface#421.f)})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##axis___surface#421.f)}})
precompile(Tuple{Type{Reactive.Signal{typeof(##axis___surface#421.f)}}, typeof(##axis___surface#421.f), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(##axis___surface#421.f)})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##axis___surface#421.f)}, Int64})
precompile(Tuple{typeof(##axis___surface#421.f), Float64, Float64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.isempty), AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{AbstractPlotting.Attributes}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{typeof(##axis___surface#421.f)}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{AbstractPlotting.Attributes}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{typeof(##axis___surface#421.f)}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{AbstractPlotting.Attributes}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{AbstractPlotting.Attributes}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{typeof(##axis___surface#421.f)}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{AbstractPlotting.Attributes}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{typeof(##axis___surface#421.f)}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{typeof(##axis___surface#421.f)}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{typeof(AbstractPlotting.merge_attributes!), AbstractPlotting.Attributes, AbstractPlotting.Attributes, AbstractPlotting.Attributes, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.identity), Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{String, String, String}, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{Float64, Float64, Float64}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String, String}, Int64, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Float64, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Int64, Int64, Int64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String, String}, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{ColorTypes.RGBA{Float32}, Float64}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGBA{Float32}, Float64}}, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), ColorTypes.RGBA{Float32}, Float64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Tuple{String, String, String}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{String, String, String}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Tuple{String, String, String}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis3d)(), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Int64})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Int64, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{Symbol, Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Tuple{Symbol, Symbol, Symbol}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, String})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, String, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Symbol})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Symbol, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{String, String, String}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{String, String, String}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{Bool, Bool, Bool}, Tuple{String, String, String}, Tuple{Symbol, Symbol, Symbol}, Int64, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, String, Int64, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Float64, Tuple{ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{AbstractPlotting.Quaternion{Float64}, AbstractPlotting.Quaternion{Float32}, AbstractPlotting.Quaternion{Float64}}, Tuple{Int64, Int64, Int64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String, String}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(AbstractPlotting.to3tuple), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:textsize, :color, :rotation, :align, :font), T} where T<:Tuple}, Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float32}, Type{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float64}, Tuple{Symbol, Symbol}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(FreeTypeAbstraction, Symbol("##findfont#12")), Bool, Bool, String, typeof(FreeTypeAbstraction.findfont), String})
precompile(Tuple{Type{NamedTuple{(:textsize, :color, :rotation, :align, :font), T} where T<:Tuple}, Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, String, GeometryTypes.Point{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :color, :rotation, :align, :font), Tuple{Float32, Symbol, AbstractPlotting.Quaternion{Float32}, Tuple{Symbol, Symbol}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Int64, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Int64, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Symbol, Symbol, Symbol}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Symbol, Symbol, Symbol}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, String, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, String, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Symbol, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Symbol, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.getindex), GeometryTypes.Vec{2, Int64}, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{Type{NamedTuple{(:position, :align, :textsize, :font, :raw), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64}, Tuple{Symbol, Symbol}, Int64, String, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:position, :align, :textsize, :font, :raw), Tuple{Tuple{Float64, Float64}, Tuple{Symbol, Symbol}, Int64, String, Bool}}, typeof(AbstractPlotting.text!), AbstractPlotting.Scene, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64}, Tuple{Symbol, Symbol}, Int64, String, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Float64, Float64}}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Tuple{Float64, Float64}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Tuple{Float64, Float64}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:color, :offset), T} where T<:Tuple}, Tuple{Symbol, GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :offset), Tuple{Symbol, GeometryTypes.Vec{3, Float32}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.Vec{3, Float32}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Float32, Float32})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(##axis___surface#421.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(##axis___surface#421.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.getproperty), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{Float64, 2}}, Array{Float64, 2}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float64, 2}}, Array{Float64, 2}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float64, 2}}, Array{Float64, 2}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Reactive.Signal{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Float64, Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{typeof(##axis___surface#421.f)}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.HyperSphere{3, Float32}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(##fluctuation_3d#422, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float32, 2}, Float32, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(##fluctuation_3d#422, Symbol("##1#2"))}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float32, 2}})
precompile(Tuple{typeof(Base.size), Array{Float32, 2}})
precompile(Tuple{typeof(Base.randn), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 2}, Float64})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.vcat), Array{Float32, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Base.InterpreterIP, Symbol}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Base.InterpreterIP, Symbol}, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Int64, Base.Iterators.Pairs{Symbol, Base.StackTraces.StackFrame, Tuple{Symbol}, NamedTuple{(:caller,), Tuple{Base.StackTraces.StackFrame}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Base.InterpreterIP, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.displaysize), Base.TTY})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), getfield(Base.StackTraces, Symbol("##10#11")){Base.StackTraces.StackFrame, String}, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Base.InterpreterIP, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.repl_color), String, Symbol})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#666")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.hcat), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.size), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}, Int64})
precompile(Tuple{Type{GeometryTypes.Point{3, Float32}}, Float64, Float64, Float64})
precompile(Tuple{Type{GeometryTypes.Point{3, Float32}}, Float64, Int64, Float64})
precompile(Tuple{Type{GeometryTypes.Point{3, Float32}}, Tuple{Float64, Int64, Float64}})
precompile(Tuple{Type{GeometryTypes.Cylinder{3, Float32}}, GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}, Float32})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.Cylinder{3, Float32}, Int64})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.MArray{Tuple{3}, Float32, 1, 3}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{Type{StaticArrays.Length{3}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#222")), Tuple{Int64}, Type{typeof(StaticArrays._broadcast!)}, Type{typeof(Base.:(*))}, Type{StaticArrays.Size{(3,)}}, Type{StaticArrays.MArray{Tuple{3}, Float32, 1, 3}}, Type{Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{()}}}, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##223#225")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##223#225"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("##223#225")), Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##223#225"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("##223#225"))}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{StaticArrays.MArray{Tuple{3}, Float32, 1, 3}}})
precompile(Tuple{typeof(StaticArrays.sizematch), StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(Base.getindex), Tuple{Tuple{Int64}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.length), Tuple{Tuple{Int64}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Tuple{Tuple{Int64}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{Tuple{Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.max), Int64, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##224#226")){Tuple{DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##224#226")){Tuple{DataType, DataType}}}})
precompile(Tuple{typeof(StaticArrays.sizematch), StaticArrays.Size{(3,)}, StaticArrays.Size{(3,)}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s177#336")), Tuple{Int64}, Tuple{Int64}, Type{typeof(StaticArrays._hcat)}, Type{StaticArrays.Size{(3,)}}, Type{StaticArrays.Size{(3,)}}, Type{StaticArrays.MArray{Tuple{3}, Float32, 1, 3}}, Type{StaticArrays.SArray{Tuple{3}, Float32, 1, 3}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##337#339")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##337#339"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##338#340")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##338#340"))}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3,)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(3, 2)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3, 2)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3, 2)}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 2}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3,)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{(3, 1)}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3, 1)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3, 1)}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 2}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 1}}})
precompile(Tuple{Type{StaticArrays.Size{(3, 2)}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3, 2)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(3, 1)}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3, 1)}, Int64})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Cylinder{3, Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Cylinder{3, Float32}, Int64})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Cylinder{3, Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Normal{3, Float32}}, GeometryTypes.Cylinder{3, Float32}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.HyperSphere{3, Float32}, Int64})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.HyperSphere{3, Float32}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##3#4")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##3#4"))}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{Type{GeometryTypes.Point{3, Float32}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 2}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), typeof(Base.:(^)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}, Base.Val{2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{2}, typeof(Base.literal_pow), Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}, Base.RefValue{Base.Val{2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##sum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.sum), Array{Float64, 2}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{typeof(Base._sum), typeof(Base.identity), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base._mapreduce_dim), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(), Tuple{}}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.sqrt), Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sqrt), Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sqrt), Tuple{Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##5#6")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##5#6"))}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##7#8")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##7#8"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##9#10")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##9#10"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##11#12")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##11#12"))}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGBA{Float32}, 1}, Int64})
precompile(Tuple{typeof(Base.:(+)), ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Base.:(/)), ColorTypes.RGBA{Float32}, Float64})
precompile(Tuple{typeof(Base._array_for), Type{ColorTypes.RGBA{Float64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##11#12"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##13#14")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##13#14"))}})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{(3, 3)}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3, 3)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Float64, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##fluctuation_3d#422, Symbol("##15#16")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(##fluctuation_3d#422, Symbol("##15#16"))}})
precompile(Tuple{Type{GeometryTypes.Vec{4, Float32}}, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{GeometryTypes.Point{3, Float32}, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:color, :marker, :markersize, :rotations), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float64}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Array{GeometryTypes.Vec{3, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter!")), NamedTuple{(:color, :marker, :markersize, :rotations), Tuple{Array{ColorTypes.RGBA{Float64}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Array{GeometryTypes.Vec{3, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{ColorTypes.RGBA{Float64}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Array{GeometryTypes.Vec{3, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{ColorTypes.RGBA{Float64}, 1}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{GeometryTypes.Vec{3, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{GeometryTypes.Vec{4, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:color, :marker, :markersize), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float32}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter!")), NamedTuple{(:color, :marker, :markersize), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Float64}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{ColorTypes.RGBA{Float32}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{ColorTypes.RGBA{Float32}, 1}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{4, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{4, Float32}, 1}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.append_any), GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.to_rotation), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{AbstractPlotting.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{AbstractPlotting.Quaternion{Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.to_rotation), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float64}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_mesh), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.view), Array{GeometryTypes.Point{3, Float32}, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:linewidth, :color), T} where T<:Tuple}, Tuple{Float64, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:linewidth, :color), Tuple{Float64, Symbol}}, typeof(AbstractPlotting.lines), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Symbol}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:linewidth, :color), Tuple{Float64, Symbol}}}, typeof(AbstractPlotting.lines), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Type{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{ColorTypes.RGBA{Float32}}, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:strokewidth, :strokecolor, :color), T} where T<:Tuple}, Tuple{Int64, Symbol, ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:strokewidth, :strokecolor, :color), Tuple{Int64, Symbol, ColorTypes.RGBA{Float32}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol, ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, ColorTypes.RGBA{Float32}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.parent), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.parent), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Int64, 1}, Type{Array{Int64, 1}}, String, typeof(Base.map), typeof(Makie.index1D), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Int64, 1}}, Array{Int64, 1}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.index1D), Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{UInt32, 1}, Type{Array{UInt32, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##51#52")), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{UInt32, 1}}, Array{UInt32, 1}, Tuple{Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##51#52")), Reactive.Signal{Array{UInt32, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{UInt32, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{UInt32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.bind), Makie.GLAbstraction.GLBuffer{UInt32}})
precompile(Tuple{typeof(Base.:(==)), Makie.GLAbstraction.GLBuffer{UInt32}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{UInt32}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}, UInt32})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Billboard})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Type{GeometryTypes.HyperSphere{2, T} where T}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{String, String, String, String}, Array{Array{String, 1}, 1}}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{String, String, String}, Array{Array{String, 1}, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 2}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.rand), Type{AbstractPlotting.Quaternion{Float32}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(LinearAlgebra.normalize), Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(LinearAlgebra.normalize), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(LinearAlgebra.normalize), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:rotations, :markersize, :marker), T} where T<:Tuple}, Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:rotations, :markersize, :marker), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.scatter), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Type{Int64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:rotations, :markersize, :marker), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.scatter), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:rotations, :markersize, :marker), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:rotations, :markersize, :marker), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:rotations, :markersize, :marker), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:rotations, :markersize, :marker), Tuple{Array{AbstractPlotting.Quaternion{Float32}, 1}, Int64, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{UInt32, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{UInt32, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Int64, 1}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{UInt32, 1}}}, Tuple{Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{AbstractPlotting.Quaternion{Float32}, 1}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##98#100")), Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Bool, Type{Bool}, String, typeof(Base.map), getfield(Makie, Symbol("##98#100")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Bool}, Bool, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##98#100")), Reactive.Signal{Bool}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.size)}, Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Makie.GLVisualize.Shape})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Attributes}})
precompile(Tuple{Type{ColorTypes.RGBA{Float32}}, Float64, Float64, Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :markersize), T} where T<:Tuple}, Tuple{ColorTypes.RGBA{Float32}, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter")), NamedTuple{(:color, :markersize), Tuple{ColorTypes.RGBA{Float32}, Float64}}, typeof(AbstractPlotting.meshscatter), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{ColorTypes.RGBA{Float32}, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{ColorTypes.RGBA{Float32}}, Type{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter#120")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :markersize), Tuple{ColorTypes.RGBA{Float32}, Float64}}}, typeof(AbstractPlotting.meshscatter), Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Bool}}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{4, Float32}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(##animated_surface_and_wireframe#426.surf_func), Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##animated_surface_and_wireframe#426, Symbol("##1#2")){Int64}, Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##animated_surface_and_wireframe#426, Symbol("##1#2")){Int64}}})
precompile(Tuple{typeof(AbstractPlotting.surface!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##surface!#96")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.surface!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Int64})
precompile(Tuple{getfield(##animated_surface_and_wireframe#426, Symbol("##3#5")), Array{Float32, 2}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 2}, Type{Array{Float64, 2}}, String, typeof(Base.map), getfield(##animated_surface_and_wireframe#426, Symbol("##3#5")), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 2}}, Array{Float64, 2}, Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##animated_surface_and_wireframe#426, Symbol("##3#5")), Reactive.Signal{Array{Float64, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Symbol})
precompile(Tuple{getfield(##animated_surface_and_wireframe#426, Symbol("##4#6")), Symbol})
precompile(Tuple{Type{NamedTuple{(:linewidth, :color), T} where T<:Tuple}, Tuple{Float32, Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##wireframe!")), NamedTuple{(:linewidth, :color), Tuple{Float32, Reactive.Signal{ColorTypes.RGBA{Float32}}}}, typeof(AbstractPlotting.wireframe!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float32, Reactive.Signal{ColorTypes.RGBA{Float32}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float32}, Type{Reactive.Signal{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##wireframe!#242")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:linewidth, :color), Tuple{Float32, Reactive.Signal{ColorTypes.RGBA{Float32}}}}}, typeof(AbstractPlotting.wireframe!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:linewidth, :color), Tuple{Float32, Reactive.Signal{ColorTypes.RGBA{Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:linewidth, :color), Tuple{Float32, Reactive.Signal{ColorTypes.RGBA{Float32}}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##246#247")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Makie.record), getfield(##animated_surface_and_wireframe#426, Symbol("##7#8")), AbstractPlotting.Scene, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Key{:surface}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{3, Float32}, 1}, AbstractPlotting.Key{:light}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Float64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:alpha}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:surface}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:visible}, AbstractPlotting.Key{:surface}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Bool, AbstractPlotting.Key{:fxaa}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.Key{:model}, AbstractPlotting.Key{:surface}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float32, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float32, Float32}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:surface}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base._all), getfield(Makie, Symbol("##129#132")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Makie.to_range), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Makie.to_range), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Makie.to_range), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Reactive.Signal{Array{Float32, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{Float32, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Reactive.value), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{Type{Makie.GLVisualize.Grid{N, T} where T<:(Base.AbstractRange{T} where T) where N}, Array{Float32, 2}, Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Float32, 2}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{3, Float32}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.surface), Reactive.Signal{Array{Float32, 2}}, Makie.GLAbstraction.Style{:surface}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLAbstraction.signal_convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.convert), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##118#119")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.SimpleRectangle{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{Nothing, 1}, Array{Nothing, 1}, Nothing, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{4, Float32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int64, Type{Int64}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Int64}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Makie.GLVisualize.position_calc), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{typeof(Base.Iterators.filter), getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}})
precompile(Tuple{typeof(Base.append_any), Base.Iterators.Filter{getfield(Makie.GLVisualize, Symbol("##115#116")), Tuple{Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing, Nothing, Reactive.Signal{Array{Float32, 2}}, UnionAll}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{Array{Float32, 2}}, Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{UnionAll, Int64}, Int64})
precompile(Tuple{typeof(Makie.GLVisualize._position_calc), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert_struct), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Float32}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Float32}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Float32}}, Base.Pair{Symbol, GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Vec{2, Int32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.Vec{2, Float32}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGBA{Float32}}, Tuple{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Symbol})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{Float32}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, UInt32}, 1}, Tuple{Symbol, UInt32}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Makie.GLAbstraction, Symbol("##47#48")){Makie.GLAbstraction.TextureParameters{2}}}, Int64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float32, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float32, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{Float32, 2}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{2, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{2, Float32}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{GeometryTypes.Point{2, Float32}, 1}, Array{Nothing, 1}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{2, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLVisualize.Grid{2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float32}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, Float32})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float32, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.parent), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.parent), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Type{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, String, typeof(Base.map), typeof(Makie.index1D), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.index1D), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Float64, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##animated_surface_and_wireframe#426, Symbol("##1#2")){Float64}, Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##animated_surface_and_wireframe#426, Symbol("##1#2")){Float64}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Array{Float32, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{Float32, 2}}, Array{Float32, 2}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{Float32, 2}}, Array{Float32, 2}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float32, 2}}, Array{Float32, 2}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{Float32, 2}}, Array{Float32, 2}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float32, 2}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(AbstractPlotting.extrema_nan), Reactive.Signal{Tuple{Float32, Float32}}, Tuple{Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Float32, Float32}}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##animated_surface_and_wireframe#426, Symbol("##3#5")), Reactive.Signal{Array{Float64, 2}}, Tuple{Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{Float64, 2}}, Tuple{Reactive.Signal{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 2}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##246#247")), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}, Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}, Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float32, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##113#114")), Reactive.Signal{Int64}, Tuple{Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}, Reactive.Signal{Array{Float32, 2}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.parent), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.index1D), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{Float32, 2}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}, UInt32})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##rm#9")), Bool, Bool, typeof(Base.Filesystem.rm), String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.mesh), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.getproperty), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(##normals_of_a_cat#428, Symbol("##1#2")), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##normals_of_a_cat#428, Symbol("##1#2")), Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("##3#4")){getfield(##normals_of_a_cat#428, Symbol("##1#2"))}, Base.Iterators.Zip2{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip2{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}}, getfield(Base, Symbol("##3#4")){getfield(##normals_of_a_cat#428, Symbol("##1#2"))}}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Normal{3, Float32}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s16#47")), Type{GeometryTypes.Normal{3, Float32}}, Type{Float32}, Tuple{Int64}, Type{typeof(StaticArrays.similar_type)}, Type{Type{GeometryTypes.Normal{3, Float32}}}, Type{Type{Float32}}, Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.linesegments!), Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#107")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.linesegments!), Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.mesh), GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HyperSphere{3, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{Type{NamedTuple{(:backgroundcolor,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:backgroundcolor,), Tuple{Symbol}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##Scene#74")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:backgroundcolor,), Tuple{Symbol}}}, Type{AbstractPlotting.Scene}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##current_default_theme#72")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:backgroundcolor,), Tuple{Symbol}}}, typeof(AbstractPlotting.current_default_theme)})
precompile(Tuple{typeof(Base.rand), Type{GeometryTypes.Point{3, Float32}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Array{GeometryTypes.Point{3, Float32}, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Float64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Float64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Float64}}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(-)), StaticArrays.Size{(3,)}, Tuple{StaticArrays.Size{(3,)}, StaticArrays.Size{()}}}, Int64})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Point{3, Float64}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Point{3, Float64}}})
precompile(Tuple{typeof(Base.rand), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:glowwidth, :glowcolor, :color, :markersize, :show_axis), T} where T<:Tuple}, Tuple{Float64, Symbol, ColorTypes.RGBA{Float32}, Array{Float64, 1}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:glowwidth, :glowcolor, :color, :markersize, :show_axis), Tuple{Float64, Symbol, ColorTypes.RGBA{Float32}, Array{Float64, 1}, Bool}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Symbol, ColorTypes.RGBA{Float32}, Array{Float64, 1}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.update_cam!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:glowcolor}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Tuple{String, String, String, String, String}, Array{Array{String, 1}, 1}}, Tuple{Tuple{String, String, String}, Array{Array{String, 1}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.to_color), Symbol})
precompile(Tuple{typeof(Base.getindex), Type{GeometryTypes.Point{3, Float32}}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:marker,), T} where T<:Tuple}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker,), Tuple{Array{Symbol, 1}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:marker,), Tuple{Array{Symbol, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Symbol, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Symbol, 1}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{String}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{String}, String, Tuple{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{String}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{String}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{String}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, String})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), String, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, GeometryTypes.Point{2, Float32}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, AbstractPlotting.TextureAtlas, Symbol})
precompile(Tuple{typeof(Makie.get_texture!), AbstractPlotting.TextureAtlas})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Symbol})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##108#111")){AbstractPlotting.TextureAtlas, Array{Ptr{FreeType.FT_FaceRec}, 1}}, String})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##108#111")){AbstractPlotting.TextureAtlas, Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##108#111")){AbstractPlotting.TextureAtlas, Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{String}})
precompile(Tuple{typeof(Makie.GLVisualize.assemble_robj), Base.Dict{Symbol, Any}, Makie.GLVisualize.GLVisualizeShader, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, UInt32, getfield(Makie.GLVisualize, Symbol("##107#110")), Nothing})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), getfield(Makie.GLVisualize, Symbol("##107#110"))})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Int64})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), AbstractPlotting.TextureAtlas})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){AbstractPlotting.TextureAtlas, AbstractPlotting.TextureAtlas}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{Type{Makie.GLAbstraction.Context{Unit} where Unit}, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}})
precompile(Tuple{typeof(Makie.GLAbstraction.transformation), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Makie.GLAbstraction.Composable{unit} where unit, 1}, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}, Symbol})
precompile(Tuple{typeof(Base.push!), Makie.Screen, AbstractPlotting.Scene, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}})
precompile(Tuple{typeof(Base.convert), Type{Makie.GLAbstraction.RenderObject{Pre} where Pre}, Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{getfield(Makie.GLVisualize, Symbol("##37#39")){getfield(Makie.GLVisualize, Symbol("##107#110"))}}, Makie.GLAbstraction.GLVertexArray{Reactive.Signal{Int64}}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{N, T} where T where N}, GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{Type{ColorTypes.RGBA{Float32}}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Array{Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Array{Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, 1}, Base.Generator{Array{Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.vect), GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.isdecomposable), Type{GeometryTypes.Normal{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Normal{3, Float32}}, GeometryTypes.Quad{Float32}})
precompile(Tuple{typeof(Base.similar), Array{GeometryTypes.Quad{Float32}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, Base.Generator{Array{GeometryTypes.Quad{Float32}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.merge), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, 1}}})
precompile(Tuple{typeof(Base.merge), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##110#112")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##111#113")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{GeometryTypes.Normal{3, Float32}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base._deepcopy_array_t), Array{GeometryTypes.Normal{3, Float32}, 1}, Type{GeometryTypes.Normal{3, Float32}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.copy), Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{typeof(Base.values), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.Iterators.zip), Base.ValueIterator{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Base.ValueIterator{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.append!), Array{GeometryTypes.Normal{3, Float32}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip2{Base.ValueIterator{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Symbol, Any}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(GeometryTypes.vertices), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map!), getfield(GeometryTypes, Symbol("##138#139")){GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(GeometryTypes.add_attribute), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}, ColorTypes.RGBA{Float32}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}, Array{Nothing, 1}, ColorTypes.RGBA{Float32}, Nothing, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.similar), Array{Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}, 1}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}, Base.Generator{Array{Tuple{GeometryTypes.HyperRectangle{3, Float32}, ColorTypes.RGBA{Float32}}, 1}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.merge), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}, 1}}})
precompile(Tuple{typeof(Base.merge), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##110#112")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, ColorTypes.RGBA{Float32}, Nothing, Nothing}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, ColorTypes.RGBA{Float32}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.:(!=)), ColorTypes.RGBA{Float32}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), ColorTypes.RGBA{Float32}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.filter), getfield(GeometryTypes, Symbol("##130#132")), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##131#133")), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Symbol, Any}, getfield(GeometryTypes, Symbol("##131#133"))}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}}, Base.Dict{Symbol, Any}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, 1}, Tuple{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Generator{Base.Dict{Symbol, Any}, getfield(GeometryTypes, Symbol("##131#133"))}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Array{Tuple{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, 1}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float32, 1}, Symbol})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##126#127")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}, Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{GeometryTypes.HomogenousMesh{VertT, FaceT, NormalT, TexCoordT, ColorT, AttribT, AttribIDT} where AttribIDT where AttribT where ColorT where TexCoordT where NormalT where FaceT where VertT}, Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}, Array{GeometryTypes.Normal{3, Float32}, 1}, Array{Nothing, 1}, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Array{Float32, 1}})
precompile(Tuple{typeof(AbstractPlotting.mesh), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{3, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}, ColorTypes.RGBA{Float32}, Nothing, Nothing})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##124#126")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base._all), getfield(Makie.GLAbstraction, Symbol("##88#89")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.Colon})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(GeometryTypes, Symbol("##120#121")){GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float32, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{GeometryTypes.Point{3, Float32}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, Base.Pair{Symbol, Array{GeometryTypes.Normal{3, Float32}, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Base.Pair{Symbol, Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float32, 1}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{Float32, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Array{Float32, 1}, Array{Nothing, 1}})
precompile(Tuple{Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##Texture#33")), UInt32, UInt32, UInt32, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Makie.GLAbstraction.Texture{T, NDIM} where NDIM where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Ptr{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Array{Float32, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.update!), Makie.GLAbstraction.GLBuffer{Float32}, Array{Float32, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLAbstraction, Symbol("##22#23")){Base.Dict{Symbol, Any}}, Reactive.Signal{Nothing}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Makie.GLAbstraction.NativeMesh{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.vect), Tuple{Float32, Float32, Float32, GeometryTypes.Point{2, Float32}}, Tuple{Float32, Float32, Float32, GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64}}}})
precompile(Tuple{typeof(Base.rand), Type{Float32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float32, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float64}}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float64}}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float64}}, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float64}}, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float64}}, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(##moire#433.calcpositions), Tuple{Array{Tuple{Float32, Float32, Float32, GeometryTypes.Point{2, Float32}}, 1}}, Base.UnitRange{Int64}, Float64, Tuple{Array{Float64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(##moire#433.calcpositions), Tuple{Tuple{Array{Tuple{Float32, Float32, Float32, GeometryTypes.Point{2, Float32}}, 1}}, Base.UnitRange{Int64}, Float64, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(##moire#433.calcpositions), Tuple{Tuple{Array{Tuple{Float32, Float32, Float32, GeometryTypes.Point{2, Float32}}, 1}}, Base.UnitRange{Int64}, Float64, Tuple{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##moire#433.calcpositions)}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{ColorTypes.RGBA{Float32}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{ColorTypes.RGBA{Float32}}, Tuple{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{ColorTypes.RGBA{Float32}}, Tuple{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float64}}})
precompile(Tuple{Type{NamedTuple{(:color, :thickness, :show_axis), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Float32, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:color, :thickness, :show_axis), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Float32, Bool}}, typeof(AbstractPlotting.lines), Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Float32, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{ColorTypes.RGBA{Float32}, 1}}, Type{Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :thickness, :show_axis), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Float32, Bool}}}, typeof(AbstractPlotting.lines), Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Nothing}, Reactive.Signal{Nothing}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Float64})
precompile(Tuple{Type{NamedTuple{(:raw, :linewidth, :linestyle), T} where T<:Tuple}, Tuple{Bool, Int64, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:raw, :linewidth, :linestyle), Tuple{Bool, Int64, Symbol}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Int64, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Bool}, Type{Int64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Integer}, Type{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Int64, Float64, Float64})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Tuple{Int64, Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.update_cam!), AbstractPlotting.Scene, GeometryTypes.Vec{3, Float32}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.record), getfield(##moire#433, Symbol("##1#2")), AbstractPlotting.Scene, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Nothing})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Nothing, AbstractPlotting.Key{:linestyle}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.GLVisualize.visualize), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Makie.GLAbstraction.Style{:lines}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Makie.GLAbstraction.Style{:lines}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Int32}, Type{GeometryTypes.Vec{2, Int32}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Base.map), typeof(Base.convert), Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float32, 1}, Type{Array{Float32, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:linesegments}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Float32}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{GeometryTypes.Point{3, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(##moire#433.calcpositions), Tuple{Tuple{Array{Tuple{Float32, Float32, Float32, GeometryTypes.Point{2, Float32}}, 1}}, Base.UnitRange{Int64}, Float64, Tuple{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Array{GeometryTypes.Point{3, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Array{GeometryTypes.Point{3, Float64}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Array{GeometryTypes.Point{3, Float64}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Array{GeometryTypes.Point{3, Float64}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}, Array{GeometryTypes.Point{3, Float64}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##53#57")){GeometryTypes.Point{3, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.convert), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Int32}}}, Reactive.Signal{GeometryTypes.Vec{2, Int32}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, GeometryTypes.Vec{2, Int32}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{Float32, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Reactive.Signal{GeometryTypes.Vec{2, Int32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Union{Nothing, AbstractPlotting.Keyboard.Button, AbstractPlotting.Mouse.Button}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.ProjectionEnum}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Point{3, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Symbol}})
precompile(Tuple{typeof(AbstractPlotting.disconnect!), Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Nothing}})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{AbstractPlotting.Mouse.DragEnum}})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{Type{NamedTuple{(:linewidth,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:linewidth,), Tuple{Int64}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:linewidth,), Tuple{Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:linewidth,), Tuple{Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:linewidth,), Tuple{Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.vect), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.translate!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64, Int64, Int64})
precompile(Tuple{typeof(AbstractPlotting.to_colormap), Symbol})
precompile(Tuple{typeof(Makie.record), getfield(##line_gif#435, Symbol("##1#2")), AbstractPlotting.Scene, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:linewidth}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Type{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Tuple{Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Array{AbstractPlotting.Quaternion{Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##91#92")), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, Tuple{}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}, Tuple{Reactive.Signal{Array{Float32, 1}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{Float32, 1}}, Array{Float32, 1}})
precompile(Tuple{typeof(Base.pushfirst!), Array{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, 1}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{Float32}, Type{ColorTypes.RGBA{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.drop), Array{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Drop{Array{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.translation), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.getindex), GeometryTypes.Vec{3, Float32}, Int64})
precompile(Tuple{typeof(Base.:(+)), Float32, Float64})
precompile(Tuple{typeof(AbstractPlotting.translate!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Drop{Array{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, 1}}, Int64})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.:(*)), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{ColorTypes.RGBA{Float32}}}, Tuple{Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLAbstraction, Symbol("##10#11")), Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}})
precompile(Tuple{typeof(Base.:(-)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), typeof(Base.:(^)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Val{2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), typeof(Base.:(^)), LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.Val{2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.RefValue{Base.Val{2}}}}}}}}}}, Int64}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.surface)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{Type{NamedTuple{(:levels, :linewidth, :transformation), T} where T<:Tuple}, Tuple{Int64, Int64, Tuple{Symbol, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour!")), NamedTuple{(:levels, :linewidth, :transformation), Tuple{Int64, Int64, Tuple{Symbol, Float32}}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Int64, Tuple{Symbol, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Int64}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Tuple{Symbol, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##contour!#2")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:levels, :linewidth, :transformation), Tuple{Int64, Int64, Tuple{Symbol, Float32}}}}, typeof(Makie.contour!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:levels, :linewidth, :transformation), Tuple{Int64, Int64, Tuple{Symbol, Float32}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:levels, :linewidth, :transformation), Tuple{Int64, Int64, Tuple{Symbol, Float32}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.wireframe)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.cam2d!), AbstractPlotting.Scene})
precompile(Tuple{typeof(Base.getproperty), AbstractPlotting.Events, Symbol})
precompile(Tuple{typeof(Base.map), getfield(##interaction_with_mouse#438, Symbol("##1#3")), Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(##interaction_with_mouse#438, Symbol("##1#3")), Tuple{Float64, Float64}, Float64})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float64}, 1}, Type{Array{GeometryTypes.Point{2, Float64}, 1}}, String, typeof(Base.map), getfield(##interaction_with_mouse#438, Symbol("##1#3")), Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float64}, 1}}, Array{GeometryTypes.Point{2, Float64}, 1}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##interaction_with_mouse#438, Symbol("##1#3")), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}})
precompile(Tuple{Type{NamedTuple{(:raw,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:raw,), Tuple{Bool}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:raw,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float64}, 1}, Type{Array{GeometryTypes.Point{2, Float64}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float64}, 1}}, Array{GeometryTypes.Point{2, Float64}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{2, Float64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:markersize, :marker, :color, :raw), T} where T<:Tuple}, Tuple{Float32, Symbol, Reactive.Signal{Any}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:markersize, :marker, :color, :raw), Tuple{Float32, Symbol, Reactive.Signal{Any}, Bool}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float32, Symbol, Reactive.Signal{Any}, Bool}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Float64}, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##133#135")), Float32})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{Float32}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Tuple{Reactive.Signal{Float32}}})
precompile(Tuple{typeof(Makie.global_gl_screen)})
precompile(Tuple{typeof(Base.Multimedia.display), Makie.Screen, AbstractPlotting.Scene})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##interaction_with_mouse#438, Symbol("##1#3")), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Tuple{Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Makie.GLAbstraction.Style{:lines}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:colormap}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float32}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float32})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float32, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Billboard})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Char, Type{Char}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Char}, Char, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}, Reactive.Signal{Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Char}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Symbol, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Char}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Char}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Char})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Char, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Char, Type{Char}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Char}, Char, Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Char}, Reactive.Signal{Char}})
precompile(Tuple{typeof(Base.map), typeof(Makie.pixel2world), Reactive.Signal{AbstractPlotting.Scene}, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{Char}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Int32, Type{Int32}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Char}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##103#105")), Reactive.Signal{Int32}, Reactive.Signal{Char}})
precompile(Tuple{typeof(Makie.GLVisualize.primitive_uv_offset_width), Char})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{Char}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.primitive_uv_offset_width), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{Char}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Float64}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Bool}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float32}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float32})
precompile(Tuple{Type{ColorTypes.RGBA{Float32}}, Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, ColorTypes.RGBA{Float32}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Float32}, Float64})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Float32}, Float64, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Makie.record), getfield(##interaction_with_mouse#438, Symbol("##5#6")), AbstractPlotting.Scene, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Tuple{Reactive.Signal{Any}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.gl_convert), Reactive.Signal{ColorTypes.RGBA{Float32}}, Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Char}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Tuple{Reactive.Signal{Any}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGBA{Float32}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Char}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Char}}, Base.Colon})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float32}, Float64, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Float32}, Float64, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Float32}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{GeometryTypes.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Float32}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##53#57")){GeometryTypes.Point{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##54#58")), Reactive.Signal{GeometryTypes.Vec{2, Int32}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##55#59")), Reactive.Signal{Array{Float32, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##heatmap!")), NamedTuple{(:scale_plot,), Tuple{Bool}}, typeof(AbstractPlotting.heatmap!), AbstractPlotting.Scene, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:scale_plot,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, Array{Float64, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 2}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Reactive.Signal{Nothing}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.getindex), Type{GeometryTypes.Point{2, Float32}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(##mouse_picking#440, Symbol("##1#2")), Base.Set{AbstractPlotting.Mouse.Button}})
precompile(Tuple{typeof(AbstractPlotting.ispressed), AbstractPlotting.Scene, AbstractPlotting.Mouse.Button})
precompile(Tuple{Type{NamedTuple{(:color, :marker, :markersize, :raw), T} where T<:Tuple}, Tuple{Symbol, Char, Int64, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:color, :marker, :markersize, :raw), Tuple{Symbol, Char, Int64, Bool}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Char, Int64, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{Char}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Char, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Char}}, Tuple{}})
precompile(Tuple{typeof(Reactive.runaction), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##293#297")){AbstractPlotting.Scene, Base.RefValue{GeometryTypes.Vec{2, Int64}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Reactive.Signal{Nothing}}})
precompile(Tuple{typeof(Base.rand), Type{GeometryTypes.Point{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{GeometryTypes.Point{2, Float32}, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Base.rand), Type{ColorTypes.RGB{Float32}}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float32}}})
precompile(Tuple{typeof(Base.sizeof), Type{ColorTypes.RGB{Float32}}})
precompile(Tuple{typeof(AbstractPlotting.FRect), Int64, Int64, GeometryTypes.Point{2, Float32}})
precompile(Tuple{Type{NamedTuple{(:markersize, :color, :limits), T} where T<:Tuple}, Tuple{Int64, Array{ColorTypes.RGB{Float32}, 1}, GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize, :color, :limits), Tuple{Int64, Array{ColorTypes.RGB{Float32}, 1}, GeometryTypes.HyperRectangle{2, Float32}}}, typeof(AbstractPlotting.scatter), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Array{ColorTypes.RGB{Float32}, 1}, GeometryTypes.HyperRectangle{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :color, :limits), Tuple{Int64, Array{ColorTypes.RGB{Float32}, 1}, GeometryTypes.HyperRectangle{2, Float32}}}}, typeof(AbstractPlotting.scatter), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{ColorTypes.RGB{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Makie.record), getfield(##pong#441, Symbol("##1#4")), AbstractPlotting.Scene, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Makie.to_gl_text), String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, GeometryTypes.Vec{2, Float32}, Array{AbstractPlotting.Quaternion{Float32}, 1}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(Makie, Symbol("##105#106")){String, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, AbstractPlotting.TextureAtlas, Int64, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, GeometryTypes.Point{2, Float32}, GeometryTypes.Vec{2, Float32}, Tuple{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("#kw##visualize")), NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Float64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float32, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{Float32, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Makie.GLAbstraction.Style{:linesegment}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Type{GeometryTypes.HyperSphere{2, T} where T}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGB{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGB{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, GeometryTypes.HyperSphere{2, Float32}})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{GeometryTypes.HyperSphere{2, Float32}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{GeometryTypes.Point{2, Float32}, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{GeometryTypes.Point{2, Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{typeof(Base.map), getfield(##pong#441, Symbol("##2#5")), Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(StaticArrays.same_size), Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(StaticArrays._first_static), Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(StaticArrays._first_static), GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(StaticArrays._sizes_match), StaticArrays.Size{(2,)}, Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(StaticArrays._sizes_match), StaticArrays.Size{(2,)}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(StaticArrays._sizes_match), StaticArrays.Size{(2,)}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(StaticArrays._map), getfield(##pong#441, Symbol("##2#5")), StaticArrays.Size{(2,)}, Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType, DataType, DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType, DataType, DataType, DataType}}}})
precompile(Tuple{typeof(Base.eltype), Type{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{GeometryTypes.Point{2, Float64}}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##229#231")){Tuple{DataType, DataType, DataType, DataType}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(<))}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.:(|))}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), GeometryTypes.Point{2, Float64}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{GeometryTypes.Point{2, Float64}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{GeometryTypes.Point{2, Float64}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(<)), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(|)), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{GeometryTypes.Point{2, Float64}, Float64}}, Float32}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{()}, StaticArrays.Size{(2,)}, StaticArrays.Size{()}, StaticArrays.Size{()}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{StaticArrays.Size{()}, StaticArrays.Size{()}, StaticArrays.Size{(2,)}, StaticArrays.Size{()}, StaticArrays.Size{()}}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{DataType, DataType, DataType, DataType, DataType, DataType}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType, DataType, DataType, DataType, DataType}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("##217#220")){Tuple{DataType, DataType, DataType, DataType, DataType, DataType}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("##218#221")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType}, getfield(StaticArrays, Symbol("##218#221"))}, Int64, Int64})
precompile(Tuple{typeof(Base.map), getfield(##pong#441, Symbol("##3#6")), GeometryTypes.Point{2, Bool}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(StaticArrays._map), getfield(##pong#441, Symbol("##3#6")), StaticArrays.Size{(2,)}, GeometryTypes.Point{2, Bool}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(Base.eltype), Type{GeometryTypes.Point{2, Bool}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float64}, 1}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float64}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float64}, 1}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float64}, 1}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{1}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Float64}}}}})
precompile(Tuple{typeof(Base.size), Type{StaticArrays.SArray{Tuple{2}, Any, 1, 2}}})
precompile(Tuple{typeof(Base.:(*)), GeometryTypes.Point{2, Float32}, Float64})
precompile(Tuple{typeof(Base.:(+)), GeometryTypes.Point{2, Float64}, GeometryTypes.Point{2, Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Point{2, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{GeometryTypes.Point{2, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{StaticArrays.SArray{Tuple{2}, Any, 1, 2}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(StaticArrays._sizes_match), StaticArrays.Size{(2,)}, GeometryTypes.Point{2, Float32}, StaticArrays.SArray{Tuple{2}, Any, 1, 2}})
precompile(Tuple{typeof(StaticArrays._map), getfield(##pong#441, Symbol("##2#5")), StaticArrays.Size{(2,)}, Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}, StaticArrays.SArray{Tuple{2}, Any, 1, 2}})
precompile(Tuple{typeof(Base.eltype), Type{StaticArrays.SArray{Tuple{2}, Any, 1, 2}}})
precompile(Tuple{getfield(##pong#441, Symbol("##2#5")), GeometryTypes.Point{2, Float64}, Float32, Float32, GeometryTypes.Point{2, Float32}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :color, :raw), T} where T<:Tuple}, Tuple{Char, Float64, Symbol, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:marker, :markersize, :color, :raw), Tuple{Char, Float64, Symbol, Bool}}, typeof(AbstractPlotting.scatter), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Char, Float64, Symbol, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Char}, Type{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :color, :raw), Tuple{Char, Float64, Symbol, Bool}}}, typeof(AbstractPlotting.scatter), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:marker, :markersize, :color, :raw), Tuple{Char, Float64, Symbol, Bool}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :color, :raw), Tuple{Char, Float64, Symbol, Bool}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:marker, :markersize, :color, :raw), Tuple{Char, Float64, Symbol, Bool}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :color, :raw), Tuple{Char, Float64, Symbol, Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Makie.record), getfield(##pulsing_marker#443, Symbol("##1#2")), AbstractPlotting.Scene, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Array{Int64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ColorTypes.RGBA{Float32}, Type{ColorTypes.RGBA{Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGBA{Float32}, Tuple{Reactive.Signal{Symbol}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##133#135")), Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{getfield(##travelling_wave#445, Symbol("##1#2")), Float64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(##travelling_wave#445.f)}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 1}, Type{Array{Float64, 1}}, String, typeof(Base.map), getfield(##travelling_wave#445, Symbol("##1#2")), Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 1}}, Array{Float64, 1}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##travelling_wave#445, Symbol("##1#2")), Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Makie.record), getfield(##travelling_wave#445, Symbol("##3#4")), AbstractPlotting.Scene, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##travelling_wave#445, Symbol("##1#2")), Reactive.Signal{Array{Float64, 1}}, Tuple{Reactive.Signal{Float64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{Float64, 1}}, Tuple{Reactive.Signal{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}}})
precompile(Tuple{Type{NamedTuple{(:markersize, :color), T} where T<:Tuple}, Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize, :color), Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.scatter), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.scatter), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize, :color), Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize, :color), Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Int64, Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.UnitRange{Int64}}, Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##viridis_meshscatter#448, Symbol("##1#2")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##viridis_meshscatter#448, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Float64}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Float64}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Float64}}, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##viridis_meshscatter#448, Symbol("##1#2"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##viridis_meshscatter#448, Symbol("##3#4")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##viridis_meshscatter#448, Symbol("##3#4"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##viridis_meshscatter#448, Symbol("##3#4"))}, Int64})
precompile(Tuple{Type{NamedTuple{(:markersize, :color), T} where T<:Tuple}, Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter")), NamedTuple{(:markersize, :color), Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.meshscatter), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter#120")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.meshscatter), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize, :color), Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize, :color), Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Float64, Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Float64})
precompile(Tuple{Type{NamedTuple{(:markersize, :color), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Float64, 1}}, Type{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Array{Float64, 1}, Array{ColorTypes.RGB{Float32}, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{ColorTypes.RGB{Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGB{Float32}, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{GeometryTypes.Point{2, Float32}}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Int64}}})
precompile(Tuple{typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{NamedTuple{(:marker_offset, :color), T} where T<:Tuple}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker_offset, :color), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Symbol}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Array{GeometryTypes.Point{2, Float32}, 1}, AbstractPlotting.Automatic})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Point{2, Float32}, 1}, AbstractPlotting.Key{:marker_offset}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{typeof(Base.map), getfield(##colormaps#451, Symbol("##1#2")), Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##colormaps#451, Symbol("##1#2")), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Symbol, 1}, Base.Generator{Array{Symbol, 1}, getfield(##colormaps#451, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{GeometryTypes.Point{2, Float32}, Tuple{Symbol, Symbol}, Bool, Float64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{GeometryTypes.Point{2, Float32}}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.length), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##image!")), NamedTuple{(:show_axis,), Tuple{Bool}}, typeof(AbstractPlotting.image!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##image!#81")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:show_axis,), Tuple{Bool}}}, typeof(AbstractPlotting.image!), AbstractPlotting.Scene, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:show_axis,), Tuple{Bool}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:show_axis,), Tuple{Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :light, :alpha, :visible, :transformation, :linewidth, :model, :colormap, :colorrange, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Array{ColorTypes.RGBA{Float32}, 1}, AbstractPlotting.Automatic, Bool}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:position, :align, :show_axis, :textsize), Tuple{GeometryTypes.Point{2, Float32}, Tuple{Symbol, Symbol}, Bool, Float64}}, typeof(AbstractPlotting.text!), AbstractPlotting.Scene, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, GeometryTypes.Point{2, Float32}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(AbstractPlotting.text_limits), GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:textsize}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, GeometryTypes.Point{2, Float32}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, GeometryTypes.Point{2, Float32}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(AbstractPlotting.translate!), AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}, Type{Float64}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Symbol, 1}, getfield(##colormaps#451, Symbol("##1#2"))}, Int64})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Point{2, Float32}}}, Tuple{}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:image}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Bool})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.image)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Point{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, GeometryTypes.Point{2, Float32}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), GeometryTypes.Point{2, Float32}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{GeometryTypes.Point{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:textsize}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(Base.collect), Base.Dict{Symbol, Char}})
precompile(Tuple{typeof(Base.length), Array{Base.Pair{Symbol, Char}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{GeometryTypes.Point{2, Float32}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{2, Float32}}, Tuple{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{2, Float32}}, Tuple{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{GeometryTypes.Vec{2, Float32}}, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), Array{Base.Pair{Symbol, Char}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Array{Base.Pair{Symbol, Char}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{Base.Pair{Symbol, Char}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :raw, :marker_offset), T} where T<:Tuple}, Tuple{Array{Char, 1}, Float64, Bool, GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :markersize, :raw, :marker_offset), Tuple{Array{Char, 1}, Float64, Bool, GeometryTypes.Vec{2, Float32}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Scene, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Char, 1}, Float64, Bool, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Array{Char, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Char, 1}}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Array{Char, 1}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{Char, 1}}, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Point{2, Float32}}}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{Type{NamedTuple{(:align, :textsize, :raw), T} where T<:Tuple}, Tuple{Tuple{Symbol, Symbol}, Float64, Bool}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Array{Base.Pair{Symbol, Char}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.string), String, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{Base.Pair{Symbol, Char}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{Base.Pair{Symbol, Char}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{Base.Pair{Symbol, Char}, 1}}}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##annotations!")), NamedTuple{(:align, :textsize, :raw), Tuple{Tuple{Symbol, Symbol}, Float64, Bool}}, typeof(AbstractPlotting.annotations!), AbstractPlotting.Scene, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Symbol, Symbol}, Float64, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Symbol, Symbol}}, Type{Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##annotations!#271")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:align, :textsize, :raw), Tuple{Tuple{Symbol, Symbol}, Float64, Bool}}}, typeof(AbstractPlotting.annotations!), AbstractPlotting.Scene, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:align, :textsize, :raw), Tuple{Tuple{Symbol, Symbol}, Float64, Bool}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:align, :textsize, :raw), Tuple{Tuple{Symbol, Symbol}, Float64, Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##275#283")){Int64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, String, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.bs_length), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_length), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}}}})
precompile(Tuple{typeof(AbstractPlotting.bs_length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(AbstractPlotting.bs_length), Array{String, 1}})
precompile(Tuple{typeof(AbstractPlotting.bs_length), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.bs_length), Symbol})
precompile(Tuple{typeof(AbstractPlotting.bs_length), Float64})
precompile(Tuple{typeof(AbstractPlotting.bs_length), Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(AbstractPlotting.bs_getindex), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.bs_getindex), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64}, Int64}}})
precompile(Tuple{typeof(AbstractPlotting.bs_getindex), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(AbstractPlotting.bs_getindex), Array{String, 1}, Int64})
precompile(Tuple{typeof(AbstractPlotting.bs_getindex), Array{GeometryTypes.Point{2, Float32}, 1}, Int64})
precompile(Tuple{typeof(AbstractPlotting.bs_getindex), Symbol, Int64})
precompile(Tuple{typeof(AbstractPlotting.bs_getindex), Float64, Int64})
precompile(Tuple{typeof(AbstractPlotting.bs_getindex), Tuple{Symbol, Symbol}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##276#284")){StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, String, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}, Int64, String, GeometryTypes.Point{2, Float32}, Symbol, Float64, Tuple{Symbol, Symbol}, Float64})
precompile(Tuple{typeof(Base.Iterators.repeated), ColorTypes.RGBA{Float32}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Type{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##275#283")){Int64}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}, Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{Any}, Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Symbol, Symbol}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{Char, 1}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Char, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{Char, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Char, 1}, AbstractPlotting.Key{:marker}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), String, Type{String}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{String}, String, Tuple{Reactive.Signal{Array{Char, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{String}, Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{String}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, String})
precompile(Tuple{typeof(Makie.GLVisualize._default), Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Makie.GLAbstraction.Style{:default}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Char, 1}}})
precompile(Tuple{typeof(GeometryTypes.decompose), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.HyperSphere{2, Float32}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:linewidth, :color), Tuple{Int64, Symbol}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{String}}, Tuple{Reactive.Signal{Array{Char, 1}}}})
precompile(Tuple{Type{Makie.Stepper}, AbstractPlotting.Scene, String})
precompile(Tuple{typeof(Makie.step!), Makie.Stepper})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Int64})
precompile(Tuple{getfield(FileIO, Symbol("##save#15")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.save), String, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(FileIO.save), FileIO.File{FileIO.DataFormat{:JPEG}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(FileIO, Symbol("##save#30")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.save), FileIO.File{FileIO.DataFormat{:JPEG}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(ImageMagick.save), FileIO.File{FileIO.DataFormat{:JPEG}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{getfield(Base, Symbol("##s565#402")), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Int64, Type{typeof(Base.permutedims!)}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Type{Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ntuple")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Int64, Symbol, Symbol, Expr, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr, Expr, Expr})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Function}, Expr})
precompile(Tuple{typeof(Base.hash), Symbol, UInt64})
precompile(Tuple{getfield(ImageMagick, Symbol("##image2wand#29")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ImageMagick.image2wand), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, typeof(Base.identity), Nothing, Bool})
precompile(Tuple{getfield(ImageMagick, Symbol("##constituteimage#18")), Int64, Int64, typeof(ImageMagick.constituteimage), Base.ReinterpretArray{UInt8, 3, FixedPointNumbers.Normed{UInt8, 8}, Array{FixedPointNumbers.Normed{UInt8, 8}, 3}}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Int64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), Symbol, Int64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:linewidth, :color), Tuple{Int64, Symbol}}, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{String}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{Float32, 1}}, Tuple{Reactive.Signal{Array{Float32, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{getfield(FileIO, Symbol("##save#15")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.save), String, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Tuple{Int64, Int64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Int64, Int64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Int64, Int64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Int64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#359")), Tuple{Symbol, Float64}, Int64, typeof(Base.append!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Reactive.Signal{Any}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Reactive.async_push!), Reactive.Signal{Any}, Tuple{Float64, Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Float64, Float64}, typeof(Reactive.print_error)})
precompile(Tuple{typeof(Reactive.run_push), Reactive.Signal{Any}, Tuple{Float64, Float64}, typeof(Reactive.print_error), Bool})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Int64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{typeof(AbstractPlotting.draw_titles), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{String, String}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Float32, Float32}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.same_length_array), Array{String, 1}, Tuple{Symbol, Float64}, AbstractPlotting.Key{:color}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float32, Tuple{Symbol, Symbol}, Float64, Tuple{Symbol, Float64}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float32, Float64}})
precompile(Tuple{typeof(Base.:(-)), Base.Irrational{:π}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})


precompile(Tuple{typeof(Main.sad), Array{ColorTypes.Gray{Float64}, 2}, Array{ColorTypes.Gray{Float64}, 2}})
precompile(Tuple{typeof(Base.length), Array{ColorTypes.Gray{Float64}, 2}})
precompile(Tuple{Type{GeometryTypes.HyperRectangle{N, T} where T where N}, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s52#104")), Type{Type{GeometryTypes.HyperRectangle{N, T} where T where N}}, Tuple{DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.iseven), Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##105#107")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##105#107"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("##106#108")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("##106#108"))}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:linewidth,), Tuple{Float64}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:linewidth,), Tuple{Float64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_shim), Int64, String, Nothing, Symbol, Symbol, Symbol, Int64, Array{Any, 1}})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Symbol, Symbol, String, Int64})
precompile(Tuple{Type{NamedTuple{(:position, :align, :textsize, :font, :color, :scale_plot), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:position, :align, :textsize, :font, :color, :scale_plot), Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Bool}}, typeof(AbstractPlotting.text!), AbstractPlotting.Scene, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, Int64, String, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), String, Tuple{Int64, Int64}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##356#357")){String, Tuple{Int64, Int64}, AbstractPlotting.TextureAtlas, Bool, GeometryTypes.Vec{3, Float32}}, Int64, AbstractPlotting.Quaternion{Float64}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Float32})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Float32}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Int64, Int64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Int64, Int64}, AbstractPlotting.Key{:position}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{GeometryTypes.Point{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{String}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, String})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), String, AbstractPlotting.Key{:font}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Ptr{FreeType.FT_FaceRec}, 1}, Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Array{Ptr{FreeType.FT_FaceRec}, 1}, Tuple{Reactive.Signal{String}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Symbol}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Symbol}, AbstractPlotting.Key{:align}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}, GeometryTypes.Vec{2, Float32}, Tuple{Reactive.Signal{Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Int64, AbstractPlotting.Key{:textsize}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Float64, AbstractPlotting.Key{:rotation}, AbstractPlotting.Key{:text}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), AbstractPlotting.Quaternion{Float64}, Type{AbstractPlotting.Quaternion{Float64}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{AbstractPlotting.Quaternion{Float64}}, AbstractPlotting.Quaternion{Float64}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:text}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{typeof(Makie.to_gl_text), String, GeometryTypes.Point{2, Float32}, Float32, Array{Ptr{FreeType.FT_FaceRec}, 1}, GeometryTypes.Vec{2, Float32}, AbstractPlotting.Quaternion{Float64}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(AbstractPlotting.to_ndim), Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Vec{4, Float32}, Float32})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{AbstractPlotting.TextureAtlas}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, String, typeof(Base.map), typeof(Makie.to_gl_text), Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}, Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}})
precompile(Tuple{getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##110#112")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float64}, 1}, Type{Array{GeometryTypes.Vec{2, Float64}, 1}}, String, typeof(Base.map), typeof(Base.getindex), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float64}, 1}}, Array{GeometryTypes.Vec{2, Float64}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}})
precompile(Tuple{Type{NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("#kw##visualize")), NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie.GLVisualize, Symbol("##visualize#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :stroke_color, :stroke_width, :rotation, :scale, :offset, :uv_offset_width, :distancefield, :visible), Tuple{Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{ColorTypes.RGBA{Float32}}, Reactive.Signal{Float32}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Makie.GLAbstraction.Texture{Float16, 2}, Reactive.Signal{Bool}}}}, typeof(Makie.GLVisualize.visualize), Tuple{Makie.GLVisualize.Shape, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{4, Float32}, Type{GeometryTypes.Vec{4, Float32}}, String, typeof(Base.map), typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{GeometryTypes.Vec{4, Float32}}, GeometryTypes.Vec{4, Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{GeometryTypes.Point{2, Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Float32}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Float32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Float32}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{getfield(Makie.GLAbstraction, Symbol("##gl_convert#95")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}}, Type{GeometryTypes.Vec{2, Float32}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.Vec{2, Float32}}, Array{GeometryTypes.Vec{2, Float64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{GeometryTypes.Vec{2, Float32}}, Array{GeometryTypes.Vec{2, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{GeometryTypes.Vec{2, Float64}, 1}, Base.Generator{Array{GeometryTypes.Vec{2, Float64}, 1}, Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), typeof(Base.map), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.map), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{Type{Makie.GLAbstraction.GLBuffer{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.all), getfield(AbstractPlotting, Symbol("##53#56")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}})
precompile(Tuple{typeof(Base._all), getfield(AbstractPlotting, Symbol("##53#56")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, Reactive.Signal{Bool}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), Tuple{String}}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.to_gl_text), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Tuple{Reactive.Signal{String}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{AbstractPlotting.Quaternion{Float64}}, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}, Reactive.Signal{Int64}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}, Array{GeometryTypes.Vec{2, Float64}, 1}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.map), Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Tuple{Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##implicit_equation#456, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##implicit_equation#456, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Val{4}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##implicit_equation#456, Symbol("##1#2"))}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Float64, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Float64, Base.RefValue{Base.Val{2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Float64, Base.RefValue{Base.Val{2}}}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(##implicit_equation#456, Symbol("##1#2")), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Float64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(##implicit_equation#456, Symbol("##1#2")), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs), Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(<)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 2}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 2}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 2}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 2}}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 2}}}, Int64}}}}})
precompile(Tuple{typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.contour)}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##contour#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Makie.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##cube_lattice#457, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##cube_lattice#457, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.abs), Array{Float64, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs), Tuple{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Float64}}}}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Makie.contour), Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(Makie.contour)(), ArgType} where ArgType}, Array{Float64, 3}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Type{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Type{Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(Makie, Symbol("##12#17")){Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##13#18")), Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(AbstractPlotting.interpolated_getindex), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float64})
precompile(Tuple{typeof(ColorTypes.color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{ColorTypes.RGBA{Float32}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##13#18")), Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##13#18")), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume!")), NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}, typeof(AbstractPlotting.volume!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##volume!#91")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}}, typeof(AbstractPlotting.volume!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, AbstractPlotting.Attributes, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), IntervalSets.ClosedInterval{Float64}, Type{IntervalSets.ClosedInterval{Float64}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{IntervalSets.ClosedInterval{Float64}}, IntervalSets.ClosedInterval{Float64}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Symbol, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Symbol}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}}, Base.Colon})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Array{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Int64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{getfield(Makie, Symbol("##133#136")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##3d_cube_with_sphere_cutout,_inside#458, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##3d_cube_with_sphere_cutout,_inside#458, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Array{Float64, 3}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##3d_cube_with_sphere_cutout,_outside#459, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##3d_cube_with_sphere_cutout,_outside#459, Symbol("##1#2"))}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<)), Tuple{Array{Float64, 3}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(<)), Tuple{Array{Float64, 3}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(<)), Tuple{Array{Float64, 3}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(<)), Tuple{Array{Float64, 3}, Float64}}}}})
precompile(Tuple{typeof(IntervalSets.:(..)), Int64, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume")), NamedTuple{(:algorithm,), Tuple{Symbol}}, typeof(AbstractPlotting.volume), IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##volume#90")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:algorithm,), Tuple{Symbol}}}, typeof(AbstractPlotting.volume), IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:algorithm,), Tuple{Symbol}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:algorithm,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:algorithm,), Tuple{Symbol}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:algorithm,), Tuple{Symbol}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Attributes, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.plottype), IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}, Type{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Tuple{Symbol, Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), IntervalSets.ClosedInterval{Int64}, Type{IntervalSets.ClosedInterval{Int64}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{IntervalSets.ClosedInterval{Int64}}, IntervalSets.ClosedInterval{Int64}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 3}, Type{Array{Float64, 3}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 3}}, Array{Float64, 3}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{Float64, 3}}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Reactive.value), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Reactive.value), Tuple{Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}}}})
precompile(Tuple{typeof(AbstractPlotting._boundingbox), IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 3}}}, Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{Array{Float64, 3}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Float64}}, 1}, Base.Pair{Symbol, Reactive.Signal{Float64}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Float32})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##140#142")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{getfield(Makie, Symbol("##140#142")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(Base.minimum), Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.minimum), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.minimum), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.maximum), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.maximum), Tuple{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Int64, Int64, Int64}, Int64})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, String, typeof(Base.map), getfield(Makie, Symbol("##140#142")), Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##biohazard#460, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##biohazard#460, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##biohazard#460, Symbol("##1#2"))}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(##biohazard#460, Symbol("##1#2")), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(##biohazard#460, Symbol("##1#2")), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##biohazard#460, Symbol("##3#4")), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##biohazard#460, Symbol("##3#4"))}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Int64, Base.Irrational{:π}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Broadcast.DefaultArrayStyle{0}, typeof(Base.:(*)), Int64, Base.Irrational{:π}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Irrational{:π}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 3}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}}, Tuple{Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}, Reactive.Signal{IntervalSets.ClosedInterval{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##twisty_cube_thing#461, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##twisty_cube_thing#461, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##twisty_cube_thing#461, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, getfield(##twisty_cube_thing#461, Symbol("##1#2")), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##twisty_cube_thing#461, Symbol("##1#2"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##twisty_cube_thing#461, Symbol("##3#4")), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##twisty_cube_thing#461, Symbol("##3#4"))}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.atan)}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 2}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(>)), Tuple{Array{Float64, 3}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Float64}}}}}}})
precompile(Tuple{Type{NamedTuple{(:levels, :colormap), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour")), NamedTuple{(:levels, :colormap), Tuple{Int64, Symbol}}, typeof(Makie.contour), Array{Float64, 3}})
precompile(Tuple{getfield(Makie, Symbol("##contour#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:levels, :colormap), Tuple{Int64, Symbol}}}, typeof(Makie.contour), Array{Float64, 3}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##spacecraft_from_a_galaxy_far,_far_away#462, Symbol("##1#2")), Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##spacecraft_from_a_galaxy_far,_far_away#462, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64}}, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64}}, Float64}}, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64}}, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64}}, Float64}}, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64}}, Float64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64}}, Float64}}, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(<)), Tuple{Float64, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(>)), Tuple{Float64, Float64}}}}}}}}}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.HasShape{3}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 3}, Float64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, getfield(##spacecraft_from_a_galaxy_far,_far_away#462, Symbol("##1#2"))}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 3}, Base.Colon, Base.Colon, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{Float64, 3}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.Colon, Base.Colon, Int64}})
precompile(Tuple{typeof(Base.min), Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.min), Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 3}, Array{Float64, 2}, Base.Colon, Base.Colon, Int64})
precompile(Tuple{typeof(Base.max), Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.max), Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Float64}}})
precompile(Tuple{Type{NamedTuple{(:colormap, :colorrange, :alpha, :levels), T} where T<:Tuple}, Tuple{Symbol, Tuple{Float64, Float64}, Float64, Int64}})
precompile(Tuple{getfield(Makie, Symbol("#kw##contour")), NamedTuple{(:colormap, :colorrange, :alpha, :levels), Tuple{Symbol, Tuple{Float64, Float64}, Float64, Int64}}, typeof(Makie.contour), Array{Float64, 3}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Tuple{Float64, Float64}, Float64, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Makie, Symbol("##contour#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :alpha, :levels), Tuple{Symbol, Tuple{Float64, Float64}, Float64, Int64}}}, typeof(Makie.contour), Array{Float64, 3}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, AbstractPlotting.Automatic})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Makie, Symbol("##13#18")), Symbol, Int64, Float64, Float64, Tuple{Float64, Float64}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Makie, Symbol("##14#19")){Float64, GeometryTypes.Vec{2, Float32}, Int64, Float64, IntervalSets.ClosedInterval{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Makie, Symbol("##14#19")){Float64, GeometryTypes.Vec{2, Float32}, Int64, Float64, IntervalSets.ClosedInterval{Float64}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), getfield(Makie, Symbol("##15#20")){Float64, Float64, IntervalSets.ClosedInterval{Float64}}, NamedTuple{(:init,), Tuple{Bool}}, Base.StepRangeLen{Float32, Float64, Float64}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{Type{NamedTuple{(:colormap, :colorrange, :algorithm), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume!")), NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Int64}}, typeof(AbstractPlotting.volume!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Type{Reactive.Signal{Tuple{Float64, Float64}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##volume!#91")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Int64}}}, typeof(AbstractPlotting.volume!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:colormap, :colorrange, :algorithm), Tuple{Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Tuple{Float64, Float64}}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(Makie.contour)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{IntervalSets.ClosedInterval{Float64}}, Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Any}, Reactive.Signal{Int64}, Reactive.Signal{Any}, Reactive.Signal{Float64}, Reactive.Signal{Tuple{Float64, Float64}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}}, Base.Colon})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:volume}})
precompile(Tuple{typeof(Base.map), Type{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{Type{GeometryTypes.Vec{2, Float32}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Vec{2, Float32}, Type{GeometryTypes.Vec{2, Float32}}, String, typeof(Base.map), Type{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), Type{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{GeometryTypes.Vec{2, Float32}}, Reactive.Signal{Tuple{Float64, Float64}}})
precompile(Tuple{Type{NamedTuple{(:raw, :align, :position), T} where T<:Tuple}, Tuple{Bool, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text")), NamedTuple{(:raw, :align, :position), Tuple{Bool, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}, typeof(AbstractPlotting.text), String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Bool}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##text#125")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:raw, :align, :position), Tuple{Bool, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}}, typeof(AbstractPlotting.text), String})
precompile(Tuple{typeof(AbstractPlotting.campixel!), AbstractPlotting.Scene})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Scene})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##linesegments!")), NamedTuple{(:raw,), Tuple{Bool}}, typeof(AbstractPlotting.linesegments!), GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#107")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:raw,), Tuple{Bool}}}, typeof(AbstractPlotting.linesegments!), GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HyperRectangle{3, Float32}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##text!")), NamedTuple{(:raw, :align, :position), Tuple{Bool, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}, typeof(AbstractPlotting.text!), String})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##text!#127")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:raw, :align, :position), Tuple{Bool, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}}, typeof(AbstractPlotting.text!), String})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.text)(), ArgType} where ArgType}, AbstractPlotting.Attributes, String})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##199#200")){AbstractPlotting.Scene}, Reactive.Signal{Nothing}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.empty_shader_cache!)})
precompile(Tuple{Type{NamedTuple{(:algorithm, :isorange, :show_axis), T} where T<:Tuple}, Tuple{Symbol, Float32, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume")), NamedTuple{(:algorithm, :isorange, :show_axis), Tuple{Symbol, Float32, Bool}}, typeof(AbstractPlotting.volume), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Float32, Bool}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##volume#90")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:algorithm, :isorange, :show_axis), Tuple{Symbol, Float32, Bool}}}, typeof(AbstractPlotting.volume), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:algorithm, :isorange, :show_axis), Tuple{Symbol, Float32, Bool}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:algorithm, :isorange, :show_axis), Tuple{Symbol, Float32, Bool}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:algorithm, :isorange, :show_axis), Tuple{Symbol, Float32, Bool}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:algorithm, :isorange, :show_axis), Tuple{Symbol, Float32, Bool}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{Type{Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}, getfield(##test_1#464, Symbol("##1#2")), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##1#2"))})
precompile(Tuple{getfield(##test_1#464, Symbol("##1#2")), Float64, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##test_1#464, Symbol("##1#2")), Tuple{Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, getfield(##test_1#464, Symbol("##1#2")), Tuple{Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##test_1#464, Symbol("##1#2"))}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{Type{NamedTuple{(:algorithm, :show_axis), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##volume!")), NamedTuple{(:algorithm, :show_axis), Tuple{Symbol, Bool}}, typeof(AbstractPlotting.volume!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##3#4"))})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Symbol}, Type{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##volume!#92")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:algorithm, :show_axis), Tuple{Symbol, Bool}}}, typeof(AbstractPlotting.volume!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##3#4"))})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{Type{Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}, getfield(##test_1#464, Symbol("##3#4")), Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}})
precompile(Tuple{getfield(##test_1#464, Symbol("##3#4")), Float64, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(##test_1#464, Symbol("##3#4")), Tuple{Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, getfield(##test_1#464, Symbol("##3#4")), Tuple{Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(##test_1#464, Symbol("##3#4"))}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Reactive.Signal{Array{Float64, 3}}}})
precompile(Tuple{Type{GeometryTypes.Vec{3, Float32}}, Tuple{Float64, Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.translate!), AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float32}, AbstractPlotting.Atomic{typeof(AbstractPlotting.volume)(), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{getfield(Makie, Symbol("##140#142")), StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{Type{NamedTuple{(:strokewidth, :strokecolor, :color), T} where T<:Tuple}, Tuple{Int64, Symbol, Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##poly")), NamedTuple{(:strokewidth, :strokecolor, :color), Tuple{Int64, Symbol, Tuple{Symbol, Float64}}}, typeof(AbstractPlotting.poly), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol, Tuple{Symbol, Float64}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLProgram})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##poly#215")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:strokewidth, :strokecolor, :color), Tuple{Int64, Symbol, Tuple{Symbol, Float64}}}}, typeof(AbstractPlotting.poly), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:color, :visible, :strokecolor, :colormap, :colorrange, :strokewidth, :linestyle), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, ColorTypes.RGBA{Float32}, Reactive.Signal{Any}, AbstractPlotting.Automatic, Float64, Nothing}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##220#222")), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(GeometryTypes.polygon2faces), Array{GeometryTypes.Point{2, Float32}, 1}, Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{Type{GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}, Tuple{Base.Broadcast.Extruded{Array{Array{GeometryTypes.Point{2, Float32}, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Array{Nothing, 1}}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Array{Nothing, 1}}}})
precompile(Tuple{Type{NamedTuple{(:color, :visible), T} where T<:Tuple}, Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##mesh!")), NamedTuple{(:color, :visible), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##mesh!#111")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:color, :visible), Tuple{Reactive.Signal{Tuple{Symbol, Float64}}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.mesh!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines!")), NamedTuple{(:visible, :color, :linestyle, :linewidth), Tuple{Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Int64}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines!#101")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:visible, :color, :linestyle, :linewidth), Tuple{Reactive.Signal{Any}, Reactive.Signal{Symbol}, Reactive.Signal{Any}, Reactive.Signal{Int64}}}}, typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Symbol, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.mesh)(), Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Symbol, Float64}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:mesh}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Symbol, Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base.vect), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.poly), Array{GeometryTypes.HyperRectangle{2, Int64}, 1}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.poly)}, Int64})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.HyperRectangle{2, Int64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), ArgType} where ArgType}, Array{GeometryTypes.HyperRectangle{2, Int64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Array{GeometryTypes.HyperRectangle{2, Int64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Type{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.HyperRectangle{2, Int64}, 1}, Type{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Array{GeometryTypes.HyperRectangle{2, Int64}, 1}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##224#226")), Array{GeometryTypes.HyperRectangle{2, Int64}, 1}})
precompile(Tuple{typeof(Base.size), Type{GeometryTypes.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.length), Type{GeometryTypes.Vec{2, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Int64}, 1}, Type{Array{GeometryTypes.Point{2, Int64}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##224#226")), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Int64}, 1}}, Array{GeometryTypes.Point{2, Int64}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##224#226")), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##225#227")), Array{GeometryTypes.HyperRectangle{2, Int64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Int64}, 1}, Type{Array{GeometryTypes.Vec{2, Int64}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Int64}, 1}}, Array{GeometryTypes.Vec{2, Int64}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##225#227")), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), T} where T<:Tuple}, Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{DataType}, Type{Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#116")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker, :markersize, :transform_marker, :marker_offset, :color, :strokecolor, :colormap, :colorrange, :strokewidth, :visible), Tuple{DataType, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Bool, GeometryTypes.Vec{2, Float32}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, typeof(AbstractPlotting.scatter!), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{Type{Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}}, Type{GeometryTypes.HyperRectangle{2, Int64}}, Tuple{}, Base.Dict{Reactive.Signal{T} where T, Int64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Symbol})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Int64}, 1}, Type{Array{GeometryTypes.Point{2, Int64}, 1}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Int64}, 1}}, Array{GeometryTypes.Point{2, Int64}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Array{GeometryTypes.Point{2, Int64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{GeometryTypes.Point{2, Int64}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}, Symbol})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Int64}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:color, :markersize, :raw), T} where T<:Tuple}, Tuple{Symbol, Int64, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:color, :markersize, :raw), Tuple{Symbol, Int64, Bool}}, typeof(AbstractPlotting.scatter!), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64, Bool}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#117")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :markersize, :raw), Tuple{Symbol, Int64, Bool}}}, typeof(AbstractPlotting.scatter!), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.poly)(), Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{GeometryTypes.Vec{2, Int64}, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{GeometryTypes.Vec{2, Int64}, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{2, Float32}, 1}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{2, Float32}, 1}}, Array{GeometryTypes.Vec{2, Float32}, 1}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(AbstractPlotting.to_spritemarker), Type{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.HyperRectangle{2, Float32}, Type{GeometryTypes.HyperRectangle{2, Float32}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.HyperRectangle{2, Float32}}, GeometryTypes.HyperRectangle{2, Float32}, Tuple{Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:color, :colormap), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:color, :colormap), Tuple{Array{Float64, 1}, Symbol}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Symbol}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Float64, 1}}, Type{Symbol}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :colormap), Tuple{Array{Float64, 1}, Symbol}}}, typeof(AbstractPlotting.scatter), Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}}, Tuple{Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}}})
precompile(Tuple{Type{NamedTuple{(:linewidth, :scale_plot), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:linewidth, :scale_plot), Tuple{Int64, Bool}}, typeof(AbstractPlotting.lines), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:linewidth, :scale_plot), Tuple{Int64, Bool}}}, typeof(AbstractPlotting.lines), GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{Type{NamedTuple{(:markersize, :marker, :scale_plot), T} where T<:Tuple}, Tuple{Int64, Char, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:markersize, :marker, :scale_plot), Tuple{Int64, Char, Bool}}, typeof(AbstractPlotting.scatter!), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Char, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Char}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#117")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :marker, :scale_plot), Tuple{Int64, Char, Bool}}}, typeof(AbstractPlotting.scatter!), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:color, :linewidth), Tuple{Array{Float64, 1}, Int64}}, typeof(AbstractPlotting.lines), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{Float64, 1}}, Type{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Array{Float64, 1}, Int64}}}, typeof(AbstractPlotting.lines), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color, :linewidth), Tuple{Array{Float64, 1}, Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Array{Float64, 1}, Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :linewidth), Tuple{Array{Float64, 1}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Array{Float64, 1}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 1}}}}, AbstractPlotting.Attributes, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 1}}}, 1}, Base.Pair{Symbol, Reactive.Signal{Array{Float64, 1}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 1}}}, 1}, Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Reactive.Signal{Array{Float64, 1}}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:lines}})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Base.rand), Type{ColorTypes.RGBA{Float32}}, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##lines")), NamedTuple{(:color, :linewidth), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}, typeof(AbstractPlotting.lines), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Array{ColorTypes.RGBA{Float32}, 1}}, Type{Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##lines#100")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}}, typeof(AbstractPlotting.lines), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color, :linewidth), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color, :linewidth), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :linewidth), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.meshscatter), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter#120")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.meshscatter), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{Float64, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{Float64, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Vec{3, Float32}}, GeometryTypes.Vec{3, Float32}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{GeometryTypes.Vec{3, Float32}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Tuple{Float64, Float64}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Tuple{Float64, Float64}, AbstractPlotting.Key{:colorrange}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLVisualize.intensity_convert_tex), Reactive.Signal{Array{Float32, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{Float32}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.isa_gl_struct), Makie.GLAbstraction.TextureBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Makie.GLAbstraction.TextureBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{Float32}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{Float32}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.meshscatter), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter#120")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.meshscatter), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 1}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Symbol}, NamedTuple{(:color,), Tuple{Array{ColorTypes.RGBA{Float32}, 1}}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}}, Tuple{}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}, Reactive.Signal{Array{Float32, 1}}}})
precompile(Tuple{Type{GeometryTypes.Vec{2, Float32}}, Int64})
precompile(Tuple{typeof(AbstractPlotting.IRect), GeometryTypes.Vec{2, Float32}, GeometryTypes.Vec{2, Float32}})
precompile(Tuple{Type{NamedTuple{(:ranges, :labels), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ranges, :labels), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Type{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Tuple{Array{String, 1}, Array{String, 1}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{AbstractPlotting.Attributes}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##axis2d!")), NamedTuple{(:ticks,), Tuple{AbstractPlotting.Attributes}}, typeof(AbstractPlotting.axis2d!), AbstractPlotting.Scene, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, AbstractPlotting.Attributes, Tuple{Symbol}, NamedTuple{(:ticks,), Tuple{AbstractPlotting.Attributes}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), ArgType} where ArgType}, GeometryTypes.HyperRectangle{2, Int64}})
precompile(Tuple{typeof(AbstractPlotting.plottype), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Type{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Tuple{Symbol}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Type{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.identity), Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Tuple{Nothing, Nothing}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Nothing, Nothing}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Nothing, Nothing}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Tuple{String, String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{String, String}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), typeof(AbstractPlotting.Formatters.plain)})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), typeof(AbstractPlotting.Formatters.plain), Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, typeof(AbstractPlotting.Formatters.plain), Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Tuple{Float64, Float64}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{Float64, Float64}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{Float64, Float64}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, Tuple{Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##380#382")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Array{Float64, 1}, Array{Float64, 1}}, AbstractPlotting.Automatic})
precompile(Tuple{typeof(AbstractPlotting.replace_automatic!), getfield(AbstractPlotting, Symbol("##381#383")){AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Reactive.Signal{Any}}, AbstractPlotting.Attributes, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Array{String, 1}, Array{String, 1}}, AbstractPlotting.Automatic})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##TextBuffer#361")), Array{AbstractPlotting.Quaternion{Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.TextBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Attributes, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, AbstractPlotting.Attributes, Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{String, 1}}, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(AbstractPlotting.LinesegmentBuffer), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Type{GeometryTypes.Point{2, T} where T}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##linesegments!#106")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :raw), Tuple{Array{ColorTypes.RGBA{Float32}, 1}, Array{Float32, 1}, Bool}}}, typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.getindex), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Symbol, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(AbstractPlotting.draw_axis), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}, Int64, Int64, Float64, Symbol, Nothing, Symbol, Bool, Float64, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Tuple{Symbol, Symbol}, Float64, Symbol, String}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Float64}, Type{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Tuple{Int64, Int64}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Tuple{Int64, Int64}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Int64, Int64}, Float64}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Float64, Int64}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(AbstractPlotting.draw_ticks), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Int64, Tuple{Float64, Float64}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Int64, Int64}, Tuple{Tuple{Symbol, Float64}, Tuple{Symbol, Float64}}, Tuple{Nothing, Nothing}, Tuple{ColorTypes.RGBA{Float32}, ColorTypes.RGBA{Float32}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Float64, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:rotation, :textsize, :align, :color, :font), Tuple{Float64, Float64, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:rotation, :textsize, :align, :color, :font), Tuple{Float64, Float64, Tuple{Symbol, Symbol}, ColorTypes.RGBA{Float32}, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getindex), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Int64}}})
precompile(Tuple{Type{GeometryTypes.Point{2, Float32}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(AbstractPlotting.draw_titles), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Base.Iterators.Zip2{Array{Float64, 1}, Array{String, 1}}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{String, String}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{String, String}, Tuple{Symbol, Symbol}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}}, Tuple{String, String}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##push!#362")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float64, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.push!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, String, Tuple{Float64, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##append!#363")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:textsize, :align, :rotation, :color, :font), Tuple{Float64, Tuple{Symbol, Symbol}, Float64, Symbol, String}}}, typeof(Base.append!), AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}, Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Nothing}, Nothing, Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}, Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){typeof(AbstractPlotting.draw_axis), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Tuple{Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Reactive.Signal{Nothing}}}, Array{Reactive.Signal{Nothing}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}, Tuple{Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Nothing}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(AbstractPlotting.center!), AbstractPlotting.Scene})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.axis2d)(), Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{GeometryTypes.Point{2, Float32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{2, Float32}}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{2, Float32}}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{NamedTuple{(:rotations, :marker, :scale_plot), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Char, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter")), NamedTuple{(:rotations, :marker, :scale_plot), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Char, Bool}}, typeof(AbstractPlotting.scatter), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Char, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Type{Char}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter#115")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:rotations, :marker, :scale_plot), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Char, Bool}}}, typeof(AbstractPlotting.scatter), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("#windowposition#75")){Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}}, GLFW.Window, Int32, Int32})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Reactive.value), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Attributes, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:markersize, :color, :scale_plot), T} where T<:Tuple}, Tuple{Float64, Symbol, Bool}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##scatter!")), NamedTuple{(:markersize, :color, :scale_plot), Tuple{Float64, Symbol, Bool}}, typeof(AbstractPlotting.scatter!), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Symbol, Bool}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##scatter!#117")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :color, :scale_plot), Tuple{Float64, Symbol, Bool}}}, typeof(AbstractPlotting.scatter!), Array{GeometryTypes.Point{2, Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Reactive.Signal{T} where T}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Symbol})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, AbstractPlotting.Key{:rotations}, AbstractPlotting.Key{:scatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{AbstractPlotting.Quaternion{Float64}, 1}, Type{Array{AbstractPlotting.Quaternion{Float64}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Array{AbstractPlotting.Quaternion{Float64}, 1}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.scatter)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Symbol})
precompile(Tuple{getfield(Makie, Symbol("##98#100")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Bool, Type{Bool}, String, typeof(Base.map), getfield(Makie, Symbol("##98#100")), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Bool}, Bool, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##98#100")), Reactive.Signal{Bool}, Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Makie.GLVisualize.vec2quaternion), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{4, Float32}, 1}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##91#92")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{4, Float32}, 1}}, Array{GeometryTypes.Vec{4, Float32}, 1}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##91#92")), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Bool}}, Tuple{Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}}, Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:colormap, :alpha), T} where T<:Tuple}, Tuple{Symbol, Float64}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##heatmap")), NamedTuple{(:colormap, :alpha), Tuple{Symbol, Float64}}, typeof(AbstractPlotting.heatmap), Array{Float64, 2}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##heatmap#85")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:colormap, :alpha), Tuple{Symbol, Float64}}}, typeof(AbstractPlotting.heatmap), Array{Float64, 2}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Float64}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float64, Type{Float64}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float64}, Float64, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}}, Reactive.Signal{Float64}, Reactive.Signal{Float64}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Symbol}, AbstractPlotting.Atomic{typeof(AbstractPlotting.heatmap)(), Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Pair{Symbol, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##arc")), NamedTuple{(:linewidth,), Tuple{Int64}}, typeof(AbstractPlotting.arc), GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{getfield(AbstractPlotting, Symbol("##304#306"))}, Int64})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##arc#299")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:linewidth,), Tuple{Int64}}}, typeof(AbstractPlotting.arc), GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot")), NamedTuple{(:linewidth,), Tuple{Int64}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot#149")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:linewidth,), Tuple{Int64}}}, typeof(AbstractPlotting.plot), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float64}}, Tuple{Reactive.Signal{Float64}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Type{Float32}}, Reactive.Signal{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##plot!")), NamedTuple{(:linewidth,), Tuple{Int64}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##plot!#155")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:linewidth,), Tuple{Int64}}}, typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, AbstractPlotting.Attributes, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, AbstractPlotting.Scene, AbstractPlotting.Attributes, Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{typeof(AbstractPlotting.plottype), GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, typeof(AbstractPlotting.to_value), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractPlotting.to_value), Tuple{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(typeof), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(AbstractPlotting.to_value), Tuple{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}, Type{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##1#3")){Int64}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(AbstractPlotting.argument_names), Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(AbstractPlotting, Symbol("##138#144")){UnionAll, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Tuple{Symbol, Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##map")), NamedTuple{(:name,), Tuple{String}}, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), GeometryTypes.Point{2, Float32}, Type{GeometryTypes.Point{2, Float32}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{GeometryTypes.Point{2, Float32}}, GeometryTypes.Point{2, Float32}, Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Float32, Type{Float32}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Float32}, Float32, Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Float32}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.Irrational{:π}, Type{Base.Irrational{:π}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.Irrational{:π}}, Base.Irrational{:π}, Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), ArgType} where ArgType}})
precompile(Tuple{Type{NamedTuple{(:alpha, :colormap, :visible, :linestyle, :light, :transformation, :model, :colorrange, :color, :linewidth, :fxaa), T} where T<:Tuple}, Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:alpha, :colormap, :visible, :linestyle, :light, :transformation, :model, :colorrange, :color, :linewidth, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:alpha, :colormap, :visible, :linestyle, :light, :transformation, :model, :colorrange, :color, :linewidth, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}, NamedTuple{(:resolution,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:alpha, :colormap, :visible, :linestyle, :light, :transformation, :model, :colorrange, :color, :linewidth, :fxaa), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}}}}, Type{NamedTuple{(:resolution,), Tuple{Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:alpha, :colormap, :visible, :linestyle, :light, :transformation, :model, :colorrange, :color, :linewidth, :fxaa, :resolution), Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Int64}}, Type{AbstractPlotting.Attributes}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Reactive.Signal{Any}, Int64}}})
precompile(Tuple{Type{AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Reactive.value), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##304#306")), GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Reactive, Symbol("##10#11")), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{2, Float32}, 1}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##304#306")), Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{2, Float32}, 1}}, Array{GeometryTypes.Point{2, Float32}, 1}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##304#306")), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.lines!), AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, AbstractPlotting.Attributes, Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Symbol, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.lines)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, AbstractPlotting.Attributes})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Base.Irrational{:π}}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.Irrational{:π}}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{GeometryTypes.Point{2, Float32}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Float32}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.Irrational{:π}}}, Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Float32}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Base.Irrational{:π}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{GeometryTypes.Point{2, Float32}}, Reactive.Signal{Float32}, Reactive.Signal{Float32}, Reactive.Signal{Base.Irrational{:π}}, Reactive.Signal{Any}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{typeof(AbstractPlotting.arc)(), Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.Irrational{:π}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.Irrational{:π}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(AbstractPlotting.Plot), Type{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{typeof(Base.reshape), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{GeometryTypes.Point{3, Float32}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{3, Float32}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, Type{GeometryTypes.Point{3, Float32}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.ReshapedArray{Float64, 3, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{3}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(##type_recipe_for_molecule_simulation#477, Symbol("##11#12")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(##type_recipe_for_molecule_simulation#477, Symbol("##11#12"))}})
precompile(Tuple{typeof(Base.getindex), Array{GeometryTypes.Point{3, Float32}, 3}, Int64})
precompile(Tuple{typeof(Base.similar), Base.UnitRange{Int64}, Type{GeometryTypes.Point{3, Float32}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{GeometryTypes.Point{3, Float32}, 1}, GeometryTypes.Point{3, Float32}, Base.Generator{Base.UnitRange{Int64}, getfield(##type_recipe_for_molecule_simulation#477, Symbol("##11#12"))}, Int64})
precompile(Tuple{typeof(Base.:(+)), GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}})
precompile(Tuple{Type{##type_recipe_for_molecule_simulation#477.Simulation}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(AbstractPlotting.plot), ##type_recipe_for_molecule_simulation#477.Simulation})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractPlotting.plot)}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.plot!), AbstractPlotting.Scene, Type{Any}, AbstractPlotting.Attributes, ##type_recipe_for_molecule_simulation#477.Simulation})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, ##type_recipe_for_molecule_simulation#477.Simulation})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Tuple{##type_recipe_for_molecule_simulation#477.Simulation}, Type{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##137#143")){DataType}, Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}, Tuple{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##137#143")){DataType}, Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), ##type_recipe_for_molecule_simulation#477.Simulation, Type{##type_recipe_for_molecule_simulation#477.Simulation}, String, typeof(Base.map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, DataType}, Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{##type_recipe_for_molecule_simulation#477.Simulation}, ##type_recipe_for_molecule_simulation#477.Simulation, Tuple{Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(AbstractPlotting, Symbol("##139#145")){Int64, DataType}, Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}, Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){DataType, AbstractPlotting.Scene}, Symbol, AbstractPlotting.Scene, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Scene, Type{AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Array{Float64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(AbstractPlotting.to_node), Type{Any}, Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.identity), Array{Symbol, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Symbol, 1}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Array{Symbol, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Float64, 1}, Type{Any}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Any}, Array{Float64, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{Type{AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, AbstractPlotting.Scene, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}, Tuple{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{getfield(##type_recipe_for_molecule_simulation#477, Symbol("##1#6")){##type_recipe_for_molecule_simulation#477.Simulation}, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##1#6")){##type_recipe_for_molecule_simulation#477.Simulation}, Reactive.Signal{Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##1#6")){##type_recipe_for_molecule_simulation#477.Simulation}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Any}})
precompile(Tuple{typeof(AbstractPlotting.to_value), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(##type_recipe_for_molecule_simulation#477, Symbol("##2#7")){Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Float64, 1}}, Array{Float64, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##2#7")){Int64}, Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(##type_recipe_for_molecule_simulation#477, Symbol("##3#8")){Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(##type_recipe_for_molecule_simulation#477, Symbol("##4#9")){Int64}, Array{Symbol, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{Symbol, 1}}, Array{Symbol, 1}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##4#9")){Int64}, Reactive.Signal{Array{Symbol, 1}}, Reactive.Signal{Any}})
precompile(Tuple{Type{NamedTuple{(:markersize, :color), T} where T<:Tuple}, Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("#kw##meshscatter!")), NamedTuple{(:markersize, :color), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Symbol, 1}}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Reactive.Signal{Array{Float64, 1}}}, Type{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##meshscatter!#121")), Base.Iterators.Pairs{Symbol, Reactive.Signal{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :color), Tuple{Reactive.Signal{Array{Float64, 1}}, Reactive.Signal{Array{Symbol, 1}}}}}, typeof(AbstractPlotting.meshscatter!), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.merged_get!), getfield(AbstractPlotting, Symbol("##140#146")){UnionAll, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, Symbol, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, AbstractPlotting.Attributes})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(##type_recipe_for_molecule_simulation#477, Symbol("##5#10")){Array{Int64, 1}}, Array{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, String, typeof(Base.map), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##5#10")){Array{Int64, 1}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##5#10")){Array{Int64, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}})
precompile(Tuple{typeof(AbstractPlotting.linesegments!), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, String, typeof(Base.map), typeof(Base.identity), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.identity), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(AbstractPlotting.convert_arguments), Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}, Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(AbstractPlotting.default_theme), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), ArgType} where ArgType}})
precompile(Tuple{Type{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, AbstractPlotting.Transformation, AbstractPlotting.Attributes, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.calculated_attributes!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.color_and_colormap!), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Reactive.Signal{Any}})
precompile(Tuple{getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, AbstractPlotting.Automatic, GeometryTypes.Vec{3, Float32}})
precompile(Tuple{typeof(AbstractPlotting.isaxis), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.data_limits), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(AbstractPlotting.children_with), getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}, Reactive.Signal{Any}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.filter!), getfield(AbstractPlotting, Symbol("##51#54")){getfield(AbstractPlotting, Symbol("##58#59")){getfield(AbstractPlotting, Symbol("##292#296")){AbstractPlotting.Scene, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, Reactive.Signal{Any}, Tuple{Reactive.Signal{Any}}, Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}}}, Array{Reactive.Signal{GeometryTypes.HyperRectangle{3, Float32}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Nothing})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{getfield(Reactive, Symbol("##15#17")), Tuple{Int64, Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{getfield(Reactive, Symbol("##18#21")), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}, Tuple{}})
precompile(Tuple{getfield(Reactive, Symbol("##19#22")), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, Tuple{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}, Tuple{Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Float64, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{Symbol, 1}}}, Tuple{Reactive.Signal{Any}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}}, Base.Colon})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(AbstractPlotting.boundingbox), AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Makie.record), getfield(##type_recipe_for_molecule_simulation#477, Symbol("##13#14")), AbstractPlotting.Scene, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Float64, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Float64, 1}, AbstractPlotting.Key{:markersize}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Vec{3, Float32}, 1}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{GeometryTypes.Vec{3, Float32}, 1}}, Array{GeometryTypes.Vec{3, Float32}, 1}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Reactive.Signal{Array{Float64, 1}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Array{Symbol, 1}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(AbstractPlotting.convert_attribute), Array{Symbol, 1}, AbstractPlotting.Key{:color}, AbstractPlotting.Key{:meshscatter}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.convert_attribute), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{AbstractPlotting.Key{:color}}}}, Type{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{ColorTypes.RGBA{Float32}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AbstractPlotting.convert_attribute), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{AbstractPlotting.Key{:color}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{ColorTypes.RGBA{Float32}, 1}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, String, typeof(Base.map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name,), Tuple{String}}, Type{Reactive.Signal{T} where T}, Type{Array{ColorTypes.RGBA{Float32}, 1}}, Array{ColorTypes.RGBA{Float32}, 1}, Tuple{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.meshscatter)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), Type{Makie.GLAbstraction.TextureBuffer{T} where T<:Union{Real, ColorTypes.Colorant{T, N} where N where T, StaticArrays.StaticArray{Tuple{N}, T, 1} where T where N}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_meshcolor), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}, Symbol})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.toglsltype_string), Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Base.insert!), Makie.Screen, AbstractPlotting.Scene, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{Any}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}, Base.Pair{Symbol, Reactive.Signal{ColorTypes.RGBA{Float32}}}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}}, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{AbstractPlotting.Attributes, getfield(Makie, Symbol("##86#89")){AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}}, Int64, Int64})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Array{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Nothing})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, Bool})
precompile(Tuple{typeof(Makie.lift_convert), Symbol, Reactive.Signal{StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}}, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Makie, Symbol("##93#94")){Symbol, AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}, StaticArrays.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Makie.handle_view), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{GeometryTypes.Point{3, Float32}, 1}, Type{Array{GeometryTypes.Point{3, Float32}, 1}}, String, typeof(Base.map), typeof(Base.parent), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Base.parent), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{Int64, 1}, Type{Array{Int64, 1}}, String, typeof(Base.map), typeof(Makie.index1D), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.index1D), Reactive.Signal{Array{Int64, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Makie.GLAbstraction.matches_target), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gl_convert), typeof(Makie.GLVisualize.to_index_buffer), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Array{UInt32, 1}, Type{Array{UInt32, 1}}, String, typeof(Base.map), getfield(Makie.GLVisualize, Symbol("##51#52")), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), getfield(Makie.GLVisualize, Symbol("##51#52")), Reactive.Signal{Array{UInt32, 1}}, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.auto_name!), String, Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{getfield(Reactive, Symbol("##map#32")), Nothing, Type{Nothing}, String, typeof(Base.map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Reactive.connect_map), typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Array{UInt32, 1}}, Symbol})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.preserve), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Reactive.Signal{T} where T, Int64}, Int64, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Makie.GLAbstraction.GLBuffer{UInt32}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Makie.GLAbstraction.GLBuffer{UInt32}, Int64})
precompile(Tuple{Type{Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}}, Makie.GLAbstraction.GLProgram, UInt32, Int64, Base.Dict{String, Makie.GLAbstraction.GLBuffer{T} where T}, Makie.GLAbstraction.GLBuffer{UInt32}})
precompile(Tuple{typeof(Base.setindex!), AbstractPlotting.Combined{Any, Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}, Int64, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(Reactive, Symbol("##20#23")){Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##type_recipe_for_molecule_simulation#477, Symbol("##1#6")){##type_recipe_for_molecule_simulation#477.Simulation}, Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Any}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(##type_recipe_for_molecule_simulation#477, Symbol("##5#10")){Array{Int64, 1}}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Tuple{Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.identity), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##137#143")){UnionAll}, Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.set_value!), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(AbstractPlotting, Symbol("##139#145")){Int64, UnionAll}, Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}, Tuple{Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Symbol, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}, Reactive.Signal{Array{GeometryTypes.Vec{3, Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}, Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Base.parent), Reactive.Signal{Array{GeometryTypes.Point{3, Float32}, 1}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.index1D), Reactive.Signal{Array{Int64, 1}}, Tuple{Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Array{UInt32, 1}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Array{Int64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){getfield(Makie.GLVisualize, Symbol("##51#52")), Reactive.Signal{Array{UInt32, 1}}, Tuple{Reactive.Signal{Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.:(==)), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Nothing})
precompile(Tuple{typeof(Reactive.run_node), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Base.any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Reactive.isactive), Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}}, Base.Colon})
precompile(Tuple{typeof(Reactive.runaction), getfield(Reactive, Symbol("##33#34")){typeof(Makie.GLAbstraction.update!), Reactive.Signal{Nothing}, Tuple{Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}, Reactive.Signal{Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Reactive.deactivate!), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.gluniform), Int32, Int64, Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.RenderObject{Makie.GLAbstraction.StandardPrerender}, Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.render), Makie.GLAbstraction.GLVertexArray{Makie.GLAbstraction.GLBuffer{UInt32}}, UInt32})
precompile(Tuple{getfield(Base, Symbol("##printstyled#667")), Bool, Symbol, typeof(Base.printstyled), String, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, String, String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#666")), Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.TTY, String, String, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.TTY, String, String, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#665")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.TTY, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{typeof(FreeTypeAbstraction.ft_done)})
precompile(Tuple{typeof(GLFW.Terminate)})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{UInt32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{UInt32}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{UInt32, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Int64, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{3, Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{GeometryTypes.Vec{3, Float32}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{3, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Point{3, Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{GeometryTypes.Point{3, Float32}, 1}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HyperSphere{3, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{Float32}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{ColorTypes.RGBA{Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Float32, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Vec{4, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Point{2, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Vec{4, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Point{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{String}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{String}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{String, String, String}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Symbol, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{##type_recipe_for_molecule_simulation#477.Simulation}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{##type_recipe_for_molecule_simulation#477.Simulation}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Scene}, Symbol})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{AbstractPlotting.Scene}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{AbstractPlotting.Camera2D}, Symbol})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{typeof(Base.getproperty), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}, Symbol})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(AbstractPlotting.disconnect!), Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{GeometryTypes.HyperRectangle{2, Float32}}})
precompile(Tuple{typeof(Reactive.unpreserve), Reactive.Signal{Any}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Reactive.Signal{T} where T, Int64}, Reactive.Signal{Any}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Camera2D}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Atomic{typeof(AbstractPlotting.linesegments)(), Tuple{Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Combined{typeof(AbstractPlotting.annotations)(), Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{String, Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, Array{Array{Ptr{FreeType.FT_FaceRec}, 1}, 1}, Array{AbstractPlotting.Quaternion{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{String, 1}, Array{GeometryTypes.Point{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{String, String}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.Irrational{:π}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Point{2, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{GeometryTypes.Point{2, Float32}, Float32, Float32, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{Makie.GLVisualize.Intensity{Float32}, 2}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Makie.GLVisualize.Intensity{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{IntervalSets.ClosedInterval{Float64}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{AbstractPlotting.Quaternion{Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{Float32}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{Float32, 1}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Point{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.HyperRectangle{2, Int64}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Vec{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.HyperRectangle{2, Int64}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, Nothing, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 3}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{Float32, 3}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Float32, 3}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Float64, 3}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{getfield(##test_1#464, Symbol("##3#4"))}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{getfield(##test_1#464, Symbol("##1#2"))}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{4, Float32}, 1}, Array{GeometryTypes.Vec{2, Float64}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{AbstractPlotting.Quaternion{Float64}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Ptr{FreeType.FT_FaceRec}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{IntervalSets.ClosedInterval{Int64}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, IntervalSets.ClosedInterval{Int64}, Array{Float64, 3}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGBA{Float32}, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Point{2, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.Texture{Float32, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{Float32, 2}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Float32, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLBuffer{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Symbol, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.SubArray{GeometryTypes.Point{3, Float32}, 1, Array{GeometryTypes.Point{3, Float32}, 1}, Tuple{Array{GeometryTypes.Face{2, GeometryTypes.OffsetInteger{-1, UInt32}}, 1}}, false}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Makie.GLAbstraction.TextureBuffer{GeometryTypes.Vec{4, Float32}}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{GeometryTypes.Vec{4, Float32}, 1}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{typeof(##axis___surface#421.f)}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, Nothing, Array{ColorTypes.RGBA{Float32}, 1}, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Int64, 2}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Vec{2, Float64}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{ColorTypes.RGBA{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{getfield(##surface___contour3d#419, Symbol("##1#2"))}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{typeof(##surface___contour3d#419.f)}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.Pyramid{Float32}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{3, Float32}, 1}, Array{GeometryTypes.Point{3, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{Float32, 2}, Array{Float32, 2}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{getfield(##contour3d_1#415, Symbol("##1#2"))}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{typeof(##3d_contour_with_2d_contour_slices#414.test)}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Tuple{GeometryTypes.Point{3, Float32}, GeometryTypes.Point{3, Float32}}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{GeometryTypes.HyperSphere{3, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{GeometryTypes.HomogenousMesh{GeometryTypes.Point{3, Float32}, GeometryTypes.Face{3, GeometryTypes.OffsetInteger{-1, UInt32}}, GeometryTypes.Normal{3, Float32}, GeometryTypes.TextureCoordinate{2, Float32}, Nothing, Nothing, Nothing}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Base.Pair{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.SimpleRectangle{Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.SimpleRectangle{Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Type{GeometryTypes.HyperSphere{2, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.HyperSphere{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{Float32}, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{IntervalSets.ClosedInterval{Float64}, IntervalSets.ClosedInterval{Float64}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Array{GeometryTypes.Point{2, Float32}, 1}, Array{GeometryTypes.Vec{2, Float32}, 1}, GeometryTypes.Vec{2, Float32}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Reactive.schedule_node_cleanup), Reactive.Signal{Array{Tuple{GeometryTypes.Point{2, Float32}, GeometryTypes.Point{2, Float32}}, 1}}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{Float16, 2}})
precompile(Tuple{getfield(Makie, Symbol("##53#54")), Makie.Screen})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{typeof(Base.empty!)}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.empty!), Array{Tuple{Int64, UInt8, Makie.GLAbstraction.RenderObject{Pre} where Pre}, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.empty!), Array{Tuple{UInt8, Reactive.Signal{GeometryTypes.HyperRectangle{2, Int64}}, Reactive.Signal{Bool}, Reactive.Signal{ColorTypes.RGBA{Float32}}}, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.empty!), Base.Dict{UInt64, Makie.GLAbstraction.RenderObject{Pre} where Pre}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.empty!), Base.Dict{WeakRef, UInt8}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.empty!), Base.Dict{UInt16, AbstractPlotting.AbstractPlot{Typ} where Typ}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.GLVertexArray{Int64}})
precompile(Tuple{typeof(Makie.GLAbstraction.free), Makie.GLAbstraction.Texture{GeometryTypes.Vec{2, UInt16}, 2}})
